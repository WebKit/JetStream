/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/assertion-error/index.js":
/*!***********************************************!*\
  !*** ./node_modules/assertion-error/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssertionError: () => (/* binding */ AssertionError),\n/* harmony export */   AssertionResult: () => (/* binding */ AssertionResult)\n/* harmony export */ });\n// deno-fmt-ignore-file\n// deno-lint-ignore-file\n// This code was bundled using `deno bundle` and it's not recommended to edit it manually\n\nconst canElideFrames = \"captureStackTrace\" in Error;\nclass AssertionError extends Error {\n    message;\n    get name() {\n        return \"AssertionError\";\n    }\n    get ok() {\n        return false;\n    }\n    constructor(message = \"Unspecified AssertionError\", props, ssf){\n        super(message);\n        this.message = message;\n        if (canElideFrames) {\n            Error.captureStackTrace(this, ssf || AssertionError);\n        }\n        for(const key in props){\n            if (!(key in this)) {\n                this[key] = props[key];\n            }\n        }\n    }\n    toJSON(stack) {\n        return {\n            ...this,\n            name: this.name,\n            message: this.message,\n            ok: false,\n            stack: stack !== false ? this.stack : undefined\n        };\n    }\n}\nclass AssertionResult {\n    get name() {\n        return \"AssertionResult\";\n    }\n    get ok() {\n        return true;\n    }\n    constructor(props){\n        for(const key in props){\n            if (!(key in this)) {\n                this[key] = props[key];\n            }\n        }\n    }\n    toJSON() {\n        return {\n            ...this,\n            name: this.name,\n            ok: this.ok\n        };\n    }\n}\n\n\n\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/assertion-error/index.js?\n}");

/***/ }),

/***/ "./node_modules/chai/index.js":
/*!************************************!*\
  !*** ./node_modules/chai/index.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assertion: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.Assertion),\n/* harmony export */   AssertionError: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.AssertionError),\n/* harmony export */   Should: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.Should),\n/* harmony export */   assert: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.assert),\n/* harmony export */   config: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   expect: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.expect),\n/* harmony export */   should: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.should),\n/* harmony export */   use: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.use),\n/* harmony export */   util: () => (/* reexport safe */ _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__.util)\n/* harmony export */ });\n/* harmony import */ var _lib_chai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/chai.js */ \"./node_modules/chai/lib/chai.js\");\n\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/index.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai.js":
/*!***************************************!*\
  !*** ./node_modules/chai/lib/chai.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assertion: () => (/* reexport safe */ _chai_assertion_js__WEBPACK_IMPORTED_MODULE_5__.Assertion),\n/* harmony export */   AssertionError: () => (/* reexport safe */ assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError),\n/* harmony export */   Should: () => (/* reexport safe */ _chai_interface_should_js__WEBPACK_IMPORTED_MODULE_6__.Should),\n/* harmony export */   assert: () => (/* reexport safe */ _chai_interface_assert_js__WEBPACK_IMPORTED_MODULE_7__.assert),\n/* harmony export */   config: () => (/* reexport safe */ _chai_config_js__WEBPACK_IMPORTED_MODULE_2__.config),\n/* harmony export */   expect: () => (/* reexport safe */ _chai_interface_expect_js__WEBPACK_IMPORTED_MODULE_4__.expect),\n/* harmony export */   should: () => (/* reexport safe */ _chai_interface_should_js__WEBPACK_IMPORTED_MODULE_6__.should),\n/* harmony export */   use: () => (/* binding */ use),\n/* harmony export */   util: () => (/* reexport module object */ _chai_utils_index_js__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _chai_utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chai/utils/index.js */ \"./node_modules/chai/lib/chai/utils/index.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/* harmony import */ var _chai_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chai/config.js */ \"./node_modules/chai/lib/chai/config.js\");\n/* harmony import */ var _chai_core_assertions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chai/core/assertions.js */ \"./node_modules/chai/lib/chai/core/assertions.js\");\n/* harmony import */ var _chai_interface_expect_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chai/interface/expect.js */ \"./node_modules/chai/lib/chai/interface/expect.js\");\n/* harmony import */ var _chai_assertion_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chai/assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _chai_interface_should_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chai/interface/should.js */ \"./node_modules/chai/lib/chai/interface/should.js\");\n/* harmony import */ var _chai_interface_assert_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chai/interface/assert.js */ \"./node_modules/chai/lib/chai/interface/assert.js\");\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n\n\n\n\nconst used = [];\n\n// Assertion Error\n\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function} fn\n * @returns {this} for chaining\n * @public\n */\nfunction use(fn) {\n  const exports = {\n    use,\n    AssertionError: assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError,\n    util: _chai_utils_index_js__WEBPACK_IMPORTED_MODULE_0__,\n    config: _chai_config_js__WEBPACK_IMPORTED_MODULE_2__.config,\n    expect: _chai_interface_expect_js__WEBPACK_IMPORTED_MODULE_4__.expect,\n    assert: _chai_interface_assert_js__WEBPACK_IMPORTED_MODULE_7__.assert,\n    Assertion: _chai_assertion_js__WEBPACK_IMPORTED_MODULE_5__.Assertion,\n    ..._chai_interface_should_js__WEBPACK_IMPORTED_MODULE_6__\n  };\n\n  if (!~used.indexOf(fn)) {\n    fn(exports, _chai_utils_index_js__WEBPACK_IMPORTED_MODULE_0__);\n    used.push(fn);\n  }\n\n  return exports;\n}\n\n// Utility Functions\n\n\n// Configuration\n\n\n// Primary `Assertion` prototype\n\n\n// Expect interface\n\n\n// Should interface\n\n\n// Assert interface\n\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/assertion.js":
/*!*************************************************!*\
  !*** ./node_modules/chai/lib/chai/assertion.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assertion: () => (/* binding */ Assertion)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"./node_modules/chai/lib/chai/config.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/index.js */ \"./node_modules/chai/lib/chai/utils/index.js\");\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\nclass Assertion {\n  /** @type {{}} */\n  __flags = {};\n\n  /**\n   * Creates object for chaining.\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   * the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   * contain `numKittens` so that the `equal` assertion can reference it when\n   * needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   * prepended to the error message that's generated by the assertion when it\n   * fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   * contains a function reference that serves as the starting point for\n   * removing frames from the stack trace of the error that's created by the\n   * assertion when it fails. The goal is to provide a cleaner stack trace to\n   * end users by removing Chai's internal functions. Note that it only works\n   * in environments that support `Error.captureStackTrace`, and only when\n   * `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   * should retain its current value, even as assertions are chained off of\n   * this object. This is usually set to `true` when creating a new assertion\n   * from within another assertion. It's also temporarily set to `true` before\n   * an overwritten assertion gets called by the overwriting assertion.\n   *\n   * - `eql`: This flag contains the deepEqual function to be used by the assertion.\n   *\n   * @param {unknown} obj target of the assertion\n   * @param {string} [msg] (optional) custom error message\n   * @param {Function} [ssfi] (optional) starting point for removing stack frames\n   * @param {boolean} [lockSsfi] (optional) whether or not the ssfi flag is locked\n   */\n  constructor(obj, msg, ssfi, lockSsfi) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'ssfi', ssfi || Assertion);\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'lockSsfi', lockSsfi);\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'object', obj);\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'message', msg);\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'eql', _config_js__WEBPACK_IMPORTED_MODULE_0__.config.deepEqual || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.eql);\n\n    return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.proxify(this);\n  }\n\n  /** @returns {boolean} */\n  static get includeStack() {\n    console.warn(\n      'Assertion.includeStack is deprecated, use chai.config.includeStack instead.'\n    );\n    return _config_js__WEBPACK_IMPORTED_MODULE_0__.config.includeStack;\n  }\n\n  /** @param {boolean} value */\n  static set includeStack(value) {\n    console.warn(\n      'Assertion.includeStack is deprecated, use chai.config.includeStack instead.'\n    );\n    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.includeStack = value;\n  }\n\n  /** @returns {boolean} */\n  static get showDiff() {\n    console.warn(\n      'Assertion.showDiff is deprecated, use chai.config.showDiff instead.'\n    );\n    return _config_js__WEBPACK_IMPORTED_MODULE_0__.config.showDiff;\n  }\n\n  /** @param {boolean} value */\n  static set showDiff(value) {\n    console.warn(\n      'Assertion.showDiff is deprecated, use chai.config.showDiff instead.'\n    );\n    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.showDiff = value;\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   */\n  static addProperty(name, fn) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.addProperty(this.prototype, name, fn);\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   */\n  static addMethod(name, fn) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.addMethod(this.prototype, name, fn);\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   * @param {Function} chainingBehavior\n   */\n  static addChainableMethod(name, fn, chainingBehavior) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   */\n  static overwriteProperty(name, fn) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.overwriteProperty(this.prototype, name, fn);\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   */\n  static overwriteMethod(name, fn) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.overwriteMethod(this.prototype, name, fn);\n  }\n\n  /**\n   * @param {string} name\n   * @param {Function} fn\n   * @param {Function} chainingBehavior\n   */\n  static overwriteChainableMethod(name, fn, chainingBehavior) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  }\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {unknown} _expr to be tested\n   * @param {string | Function} msg or function that returns message to display if expression fails\n   * @param {string | Function} _negateMsg or function that returns negatedMessage to display if negated expression fails\n   * @param {unknown} expected value (remember to check for negation)\n   * @param {unknown} _actual (optional) will default to `this.obj`\n   * @param {boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @returns {void}\n   */\n  assert(_expr, msg, _negateMsg, expected, _actual, showDiff) {\n    const ok = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== _config_js__WEBPACK_IMPORTED_MODULE_0__.config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getMessage(this, arguments);\n      const actual = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getActual(this, arguments);\n      /** @type {Record<PropertyKey, unknown>} */\n      const assertionErrorObjectProperties = {\n        actual: actual,\n        expected: expected,\n        showDiff: showDiff\n      };\n\n      const operator = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        // @ts-expect-error Not sure what to do about these types yet\n        _config_js__WEBPACK_IMPORTED_MODULE_0__.config.includeStack ? this.assert : _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'ssfi')\n      );\n    }\n  }\n\n  /**\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @returns {unknown}\n   */\n  get _obj() {\n    return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'object');\n  }\n\n  /**\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @param {unknown} val\n   */\n  set _obj(val) {\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'object', val);\n  }\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/assertion.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/config.js":
/*!**********************************************!*\
  !*** ./node_modules/chai/lib/chai/config.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\nconst config = {\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {boolean}\n   * @public\n   */\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {boolean}\n   * @public\n   */\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {number}\n   * @public\n   */\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {boolean}\n   * @public\n   */\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @public\n   */\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON'],\n\n  /**\n   * ### config.deepEqual\n   *\n   * User configurable property, defines which a custom function to use for deepEqual\n   * comparisons.\n   * By default, the function used is the one from the `deep-eql` package without custom comparator.\n   *\n   *     // use a custom comparator\n   *     chai.config.deepEqual = (expected, actual) => {\n   *         return chai.util.eql(expected, actual, {\n   *             comparator: (expected, actual) => {\n   *                 // for non number comparison, use the default behavior\n   *                 if(typeof expected !== 'number') return null;\n   *                 // allow a difference of 10 between compared numbers\n   *                 return typeof actual === 'number' && Math.abs(actual - expected) < 10\n   *             }\n   *         })\n   *     };\n   *\n   * @param {Function}\n   * @public\n   */\n  deepEqual: null\n};\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/config.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/core/assertions.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/core/assertions.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/chai/lib/chai/utils/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config.js */ \"./node_modules/chai/lib/chai/config.js\");\n/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\nconst {flag} = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__;\n\n/**\n * ### Language Chains\n *\n * The following are provided as chainable getters to improve the readability\n * of your assertions.\n *\n * **Chains**\n *\n * - to\n * - be\n * - been\n * - is\n * - that\n * - which\n * - and\n * - has\n * - have\n * - with\n * - at\n * - of\n * - same\n * - but\n * - does\n * - still\n * - also\n *\n * @name language chains\n * @namespace BDD\n * @public\n */\n\n[\n  'to',\n  'be',\n  'been',\n  'is',\n  'and',\n  'has',\n  'have',\n  'with',\n  'that',\n  'which',\n  'at',\n  'of',\n  'same',\n  'but',\n  'does',\n  'still',\n  'also'\n].forEach(function (chain) {\n  _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty(chain);\n});\n\n/**\n * ### .not\n *\n * Negates all assertions that follow in the chain.\n *\n *     expect(function () {}).to.not.throw();\n *     expect({a: 1}).to.not.have.property('b');\n *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n *\n * Just because you can negate any assertion with `.not` doesn't mean you\n * should. With great power comes great responsibility. It's often best to\n * assert that the one expected output was produced, rather than asserting\n * that one of countless unexpected outputs wasn't produced. See individual\n * assertions for specific guidance.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.equal(1); // Not recommended\n *\n * @name not\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('not', function () {\n  flag(this, 'negate', true);\n});\n\n/**\n * ### .deep\n *\n * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n * assertions that follow in the chain to use deep equality instead of strict\n * (`===`) equality. See the `deep-eql` project page for info on the deep\n * equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * @name deep\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('deep', function () {\n  flag(this, 'deep', true);\n});\n\n/**\n * ### .nested\n *\n * Enables dot- and bracket-notation in all `.property` and `.include`\n * assertions that follow in the chain.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n *\n * `.nested` cannot be combined with `.own`.\n *\n * @name nested\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('nested', function () {\n  flag(this, 'nested', true);\n});\n\n/**\n * ### .own\n *\n * Causes all `.property` and `.include` assertions that follow in the chain\n * to ignore inherited properties.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * `.own` cannot be combined with `.nested`.\n *\n * @name own\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('own', function () {\n  flag(this, 'own', true);\n});\n\n/**\n * ### .ordered\n *\n * Causes all `.members` assertions that follow in the chain to require that\n * members be in the same order.\n *\n *     expect([1, 2]).to.have.ordered.members([1, 2])\n *       .but.not.have.ordered.members([2, 1]);\n *\n * When `.include` and `.ordered` are combined, the ordering begins at the\n * start of both arrays.\n *\n *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n *       .but.not.include.ordered.members([2, 3]);\n *\n * @name ordered\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('ordered', function () {\n  flag(this, 'ordered', true);\n});\n\n/**\n * ### .any\n *\n * Causes all `.keys` assertions that follow in the chain to only require that\n * the target have at least one of the given keys. This is the opposite of\n * `.all`, which requires that the target have all of the given keys.\n *\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name any\n * @namespace BDD\n * @public\n */\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('any', function () {\n  flag(this, 'any', true);\n  flag(this, 'all', false);\n});\n\n/**\n * ### .all\n *\n * Causes all `.keys` assertions that follow in the chain to require that the\n * target have all of the given keys. This is the opposite of `.any`, which\n * only requires that the target have at least one of the given keys.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` are\n * added earlier in the chain. However, it's often best to add `.all` anyway\n * because it improves readability.\n *\n * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n *\n * @name all\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('all', function () {\n  flag(this, 'all', true);\n  flag(this, 'any', false);\n});\n\nconst functionTypes = {\n  function: [\n    'function',\n    'asyncfunction',\n    'generatorfunction',\n    'asyncgeneratorfunction'\n  ],\n  asyncfunction: ['asyncfunction', 'asyncgeneratorfunction'],\n  generatorfunction: ['generatorfunction', 'asyncgeneratorfunction'],\n  asyncgeneratorfunction: ['asyncgeneratorfunction']\n};\n\n/**\n * ### .a(type[, msg])\n *\n * Asserts that the target's type is equal to the given string `type`. Types\n * are case insensitive. See the utility file `./type-detect.js` for info on the\n * type detection algorithm.\n *\n *     expect('foo').to.be.a('string');\n *     expect({a: 1}).to.be.an('object');\n *     expect(null).to.be.a('null');\n *     expect(undefined).to.be.an('undefined');\n *     expect(new Error).to.be.an('error');\n *     expect(Promise.resolve()).to.be.a('promise');\n *     expect(new Float32Array).to.be.a('float32array');\n *     expect(Symbol()).to.be.a('symbol');\n *\n * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n *\n *     var myObj = {\n *         [Symbol.toStringTag]: 'myCustomType'\n *     };\n *\n *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n *\n * It's often best to use `.a` to check a target's type before making more\n * assertions on the same target. That way, you avoid unexpected behavior from\n * any assertion that does different things based on the target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n * assert that the target is the expected type, rather than asserting that it\n * isn't one of many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.an('array'); // Not recommended\n *\n * `.a` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     expect(1).to.be.a('string', 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.a('string');\n *\n * `.a` can also be used as a language chain to improve the readability of\n * your assertions.\n *\n *     expect({b: 2}).to.have.a.property('b');\n *\n * The alias `.an` can be used interchangeably with `.a`.\n *\n * @name a\n * @alias an\n * @param {string} type\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction an(type, msg) {\n  if (msg) flag(this, 'message', msg);\n  type = type.toLowerCase();\n  let obj = flag(this, 'object'),\n    article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n  const detectedType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase();\n\n  if (functionTypes['function'].includes(type)) {\n    this.assert(\n      functionTypes[type].includes(detectedType),\n      'expected #{this} to be ' + article + type,\n      'expected #{this} not to be ' + article + type\n    );\n  } else {\n    this.assert(\n      type === detectedType,\n      'expected #{this} to be ' + article + type,\n      'expected #{this} not to be ' + article + type\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('an', an);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('a', an);\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nfunction SameValueZero(a, b) {\n  return (_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNaN(a) && _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNaN(b)) || a === b;\n}\n\n/** */\nfunction includeChainingBehavior() {\n  flag(this, 'contains', true);\n}\n\n/**\n * ### .include(val[, msg])\n *\n * When the target is a string, `.include` asserts that the given string `val`\n * is a substring of the target.\n *\n *     expect('foobar').to.include('foo');\n *\n * When the target is an array, `.include` asserts that the given `val` is a\n * member of the target.\n *\n *     expect([1, 2, 3]).to.include(2);\n *\n * When the target is an object, `.include` asserts that the given object\n * `val`'s properties are a subset of the target's properties.\n *\n *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n *\n * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n * member of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Set([1, 2])).to.include(2);\n *\n * When the target is a Map, `.include` asserts that the given `val` is one of\n * the values of the target. SameValueZero equality algorithm is used.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n *\n * Because `.include` does different things based on the target's type, it's\n * important to check the target's type before using `.include`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n *\n * By default, strict (`===`) equality is used to compare array members and\n * object properties. Add `.deep` earlier in the chain to use deep equality\n * instead (WeakSet targets are not supported). See the `deep-eql` project\n * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) includes `{a: 1}`\n *     expect([{a: 1}]).to.deep.include({a: 1});\n *     expect([{a: 1}]).to.not.include({a: 1});\n *\n *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n *\n * By default, all of the target's properties are searched when working with\n * objects. This includes properties that are inherited and/or non-enumerable.\n * Add `.own` earlier in the chain to exclude the target's inherited\n * properties from the search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.own.include({a: 1});\n *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n *\n * Note that a target object is always only searched for `val`'s own\n * enumerable properties.\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.include`.\n *\n *     expect('foobar').to.not.include('taco');\n *     expect([1, 2, 3]).to.not.include(4);\n *\n * However, it's dangerous to negate `.include` when the target is an object.\n * The problem is that it creates uncertain expectations by asserting that the\n * target object doesn't have all of `val`'s key/value pairs but may or may\n * not have some of them. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target object isn't even expected to have `val`'s keys, it's\n * often best to assert exactly that.\n *\n *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * When the target object is expected to have `val`'s keys, it's often best to\n * assert that each of the properties has its expected value, rather than\n * asserting that each property doesn't have one of many unexpected values.\n *\n *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n *\n * `.include` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n *\n * `.include` can also be used as a language chain, causing all `.members` and\n * `.keys` assertions that follow in the chain to require the target to be a\n * superset of the expected set, rather than an identical set. Note that\n * `.members` ignores duplicates in the subset when `.include` is added.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n * to ignore `.include`.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *\n * The aliases `.includes`, `.contain`, and `.contains` can be used\n * interchangeably with `.include`.\n *\n * @name include\n * @alias contain\n * @alias includes\n * @alias contains\n * @param {unknown} val\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction include(val, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  let obj = flag(this, 'object'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    flagMsg = flag(this, 'message'),\n    negate = flag(this, 'negate'),\n    ssfi = flag(this, 'ssfi'),\n    isDeep = flag(this, 'deep'),\n    descriptor = isDeep ? 'deep ' : '',\n    isEql = isDeep ? flag(this, 'eql') : SameValueZero;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  let included = false;\n\n  switch (objType) {\n    case 'string':\n      included = obj.indexOf(val) !== -1;\n      break;\n\n    case 'weakset':\n      if (isDeep) {\n        throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n          flagMsg + 'unable to use .deep.include with WeakSet',\n          undefined,\n          ssfi\n        );\n      }\n\n      included = obj.has(val);\n      break;\n\n    case 'map':\n      obj.forEach(function (item) {\n        included = included || isEql(item, val);\n      });\n      break;\n\n    case 'set':\n      if (isDeep) {\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n      } else {\n        included = obj.has(val);\n      }\n      break;\n\n    case 'array':\n      if (isDeep) {\n        included = obj.some(function (item) {\n          return isEql(item, val);\n        });\n      } else {\n        included = obj.indexOf(val) !== -1;\n      }\n      break;\n\n    default: {\n      // This block is for asserting a subset of properties in an object.\n      // `_.expectTypes` isn't used here because `.include` should work with\n      // objects with a custom `@@toStringTag`.\n      if (val !== Object(val)) {\n        throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n          flagMsg +\n            'the given combination of arguments (' +\n            objType +\n            ' and ' +\n            _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(val).toLowerCase() +\n            ')' +\n            ' is invalid for this assertion. ' +\n            'You can use an array, a map, an object, a set, a string, ' +\n            'or a weakset instead of a ' +\n            _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(val).toLowerCase(),\n          undefined,\n          ssfi\n        );\n      }\n\n      let props = Object.keys(val);\n      let firstErr = null;\n      let numErrs = 0;\n\n      props.forEach(function (prop) {\n        let propAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj);\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.transferFlags(this, propAssertion, true);\n        flag(propAssertion, 'lockSsfi', true);\n\n        if (!negate || props.length === 1) {\n          propAssertion.property(prop, val[prop]);\n          return;\n        }\n\n        try {\n          propAssertion.property(prop, val[prop]);\n        } catch (err) {\n          if (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.compatibleConstructor(err, assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError)) {\n            throw err;\n          }\n          if (firstErr === null) firstErr = err;\n          numErrs++;\n        }\n      }, this);\n\n      // When validating .not.include with multiple properties, we only want\n      // to throw an assertion error if all of the properties are included,\n      // in which case we throw the first property assertion error that we\n      // encountered.\n      if (negate && props.length > 1 && numErrs === props.length) {\n        throw firstErr;\n      }\n      return;\n    }\n  }\n\n  // Assert inclusion in collection or substring in a string.\n  this.assert(\n    included,\n    'expected #{this} to ' + descriptor + 'include ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(val),\n    'expected #{this} to not ' + descriptor + 'include ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(val)\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('include', include, includeChainingBehavior);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n/**\n * ### .ok\n *\n * Asserts that the target is a truthy value (considered `true` in boolean context).\n * However, it's often best to assert that the target is strictly (`===`) or\n * deeply equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.ok; // Not recommended\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.be.ok; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.ok`.\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.not.be.ok; // Not recommended\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.ok; // Not recommended\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.be.ok; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.be.ok; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.ok;\n *\n * @name ok\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('ok', function () {\n  this.assert(\n    flag(this, 'object'),\n    'expected #{this} to be truthy',\n    'expected #{this} to be falsy'\n  );\n});\n\n/**\n * ### .true\n *\n * Asserts that the target is strictly (`===`) equal to `true`.\n *\n *     expect(true).to.be.true;\n *\n * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `true`.\n *\n *     expect(false).to.be.false; // Recommended\n *     expect(false).to.not.be.true; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.true; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(false, 'nooo why fail??').to.be.true;\n *\n * @name true\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('true', function () {\n  this.assert(\n    true === flag(this, 'object'),\n    'expected #{this} to be true',\n    'expected #{this} to be false',\n    flag(this, 'negate') ? false : true\n  );\n});\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('numeric', function () {\n  const object = flag(this, 'object');\n\n  this.assert(\n    ['Number', 'BigInt'].includes(_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(object)),\n    'expected #{this} to be numeric',\n    'expected #{this} to not be numeric',\n    flag(this, 'negate') ? false : true\n  );\n});\n\n/**\n * ### .callable\n *\n * Asserts that the target a callable function.\n *\n *     expect(console.log).to.be.callable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('not a function', 'nooo why fail??').to.be.callable;\n *\n * @name callable\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('callable', function () {\n  const val = flag(this, 'object');\n  const ssfi = flag(this, 'ssfi');\n  const message = flag(this, 'message');\n  const msg = message ? `${message}: ` : '';\n  const negate = flag(this, 'negate');\n\n  const assertionMessage = negate\n    ? `${msg}expected ${_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(val)} not to be a callable function`\n    : `${msg}expected ${_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(val)} to be a callable function`;\n\n  const isCallable = [\n    'Function',\n    'AsyncFunction',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction'\n  ].includes(_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(val));\n\n  if ((isCallable && negate) || (!isCallable && !negate)) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(assertionMessage, undefined, ssfi);\n  }\n});\n\n/**\n * ### .false\n *\n * Asserts that the target is strictly (`===`) equal to `false`.\n *\n *     expect(false).to.be.false;\n *\n * Add `.not` earlier in the chain to negate `.false`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `false`.\n *\n *     expect(true).to.be.true; // Recommended\n *     expect(true).to.not.be.false; // Not recommended\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.false; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(true, 'nooo why fail??').to.be.false;\n *\n * @name false\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('false', function () {\n  this.assert(\n    false === flag(this, 'object'),\n    'expected #{this} to be false',\n    'expected #{this} to be true',\n    flag(this, 'negate') ? true : false\n  );\n});\n\n/**\n * ### .null\n *\n * Asserts that the target is strictly (`===`) equal to `null`.\n *\n *     expect(null).to.be.null;\n *\n * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `null`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.null; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.null;\n *\n * @name null\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('null', function () {\n  this.assert(\n    null === flag(this, 'object'),\n    'expected #{this} to be null',\n    'expected #{this} not to be null'\n  );\n});\n\n/**\n * ### .undefined\n *\n * Asserts that the target is strictly (`===`) equal to `undefined`.\n *\n *     expect(undefined).to.be.undefined;\n *\n * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to `undefined`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.undefined; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.undefined;\n *\n * @name undefined\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('undefined', function () {\n  this.assert(\n    undefined === flag(this, 'object'),\n    'expected #{this} to be undefined',\n    'expected #{this} not to be undefined'\n  );\n});\n\n/**\n * ### .NaN\n *\n * Asserts that the target is exactly `NaN`.\n *\n *     expect(NaN).to.be.NaN;\n *\n * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n * to assert that the target is equal to its expected value, rather than not\n * equal to `NaN`.\n *\n *     expect('foo').to.equal('foo'); // Recommended\n *     expect('foo').to.not.be.NaN; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(42, 'nooo why fail??').to.be.NaN;\n *\n * @name NaN\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('NaN', function () {\n  this.assert(\n    _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNaN(flag(this, 'object')),\n    'expected #{this} to be NaN',\n    'expected #{this} not to be NaN'\n  );\n});\n\n/**\n * ### .exist\n *\n * Asserts that the target is not strictly (`===`) equal to either `null` or\n * `undefined`. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.exist; // Not recommended\n *\n *     expect(0).to.equal(0); // Recommended\n *     expect(0).to.exist; // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.exist`.\n *\n *     expect(null).to.be.null; // Recommended\n *     expect(null).to.not.exist; // Not recommended\n *\n *     expect(undefined).to.be.undefined; // Recommended\n *     expect(undefined).to.not.exist; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(null, 'nooo why fail??').to.exist;\n *\n * The alias `.exists` can be used interchangeably with `.exist`.\n *\n * @name exist\n * @alias exists\n * @namespace BDD\n * @public\n */\nfunction assertExist() {\n  let val = flag(this, 'object');\n  this.assert(\n    val !== null && val !== undefined,\n    'expected #{this} to exist',\n    'expected #{this} to not exist'\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('exist', assertExist);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('exists', assertExist);\n\n/**\n * ### .empty\n *\n * When the target is a string or array, `.empty` asserts that the target's\n * `length` property is strictly (`===`) equal to `0`.\n *\n *     expect([]).to.be.empty;\n *     expect('').to.be.empty;\n *\n * When the target is a map or set, `.empty` asserts that the target's `size`\n * property is strictly equal to `0`.\n *\n *     expect(new Set()).to.be.empty;\n *     expect(new Map()).to.be.empty;\n *\n * When the target is a non-function object, `.empty` asserts that the target\n * doesn't have any own enumerable properties. Properties with Symbol-based\n * keys are excluded from the count.\n *\n *     expect({}).to.be.empty;\n *\n * Because `.empty` does different things based on the target's type, it's\n * important to check the target's type before using `.empty`. See the `.a`\n * doc for info on testing a target's type.\n *\n *     expect([]).to.be.an('array').that.is.empty;\n *\n * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n * best to assert that the target contains its expected number of values,\n * rather than asserting that it's not empty.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n *\n *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n *\n *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n *     expect({a: 1}).to.not.be.empty; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n *\n * @name empty\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('empty', function () {\n  let val = flag(this, 'object'),\n    ssfi = flag(this, 'ssfi'),\n    flagMsg = flag(this, 'message'),\n    itemsCount;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  switch (_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(val).toLowerCase()) {\n    case 'array':\n    case 'string':\n      itemsCount = val.length;\n      break;\n    case 'map':\n    case 'set':\n      itemsCount = val.size;\n      break;\n    case 'weakmap':\n    case 'weakset':\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n        flagMsg + '.empty was passed a weak collection',\n        undefined,\n        ssfi\n      );\n    case 'function': {\n      const msg = flagMsg + '.empty was passed a function ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getName(val);\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(msg.trim(), undefined, ssfi);\n    }\n    default:\n      if (val !== Object(val)) {\n        throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n          flagMsg + '.empty was passed non-string primitive ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(val),\n          undefined,\n          ssfi\n        );\n      }\n      itemsCount = Object.keys(val).length;\n  }\n\n  this.assert(\n    0 === itemsCount,\n    'expected #{this} to be empty',\n    'expected #{this} not to be empty'\n  );\n});\n\n/**\n * ### .arguments\n *\n * Asserts that the target is an `arguments` object.\n *\n *     function test () {\n *         expect(arguments).to.be.arguments;\n *     }\n *\n *     test();\n *\n * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n * best to assert which type the target is expected to be, rather than\n * asserting that it’s not an `arguments` object.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.arguments; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({}, 'nooo why fail??').to.be.arguments;\n *\n * The alias `.Arguments` can be used interchangeably with `.arguments`.\n *\n * @name arguments\n * @alias Arguments\n * @namespace BDD\n * @public\n */\nfunction checkArguments() {\n  let obj = flag(this, 'object'),\n    type = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj);\n  this.assert(\n    'Arguments' === type,\n    'expected #{this} to be arguments but got ' + type,\n    'expected #{this} to not be arguments'\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('arguments', checkArguments);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('Arguments', checkArguments);\n\n/**\n * ### .equal(val[, msg])\n *\n * Asserts that the target is strictly (`===`) equal to the given `val`.\n *\n *     expect(1).to.equal(1);\n *     expect('foo').to.equal('foo');\n *\n * Add `.deep` earlier in the chain to use deep equality instead. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) equals `{a: 1}`\n *     expect({a: 1}).to.deep.equal({a: 1});\n *     expect({a: 1}).to.not.equal({a: 1});\n *\n *     // Target array deeply (but not strictly) equals `[1, 2]`\n *     expect([1, 2]).to.deep.equal([1, 2]);\n *     expect([1, 2]).to.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n * best to assert that the target is equal to its expected value, rather than\n * not equal to one of countless unexpected values.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.equal(2); // Not recommended\n *\n * `.equal` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.equal(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.equal(2);\n *\n * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n *\n * @name equal\n * @alias equals\n * @alias eq\n * @param {unknown} val\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertEqual(val, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object');\n  if (flag(this, 'deep')) {\n    let prevLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    this.eql(val);\n    flag(this, 'lockSsfi', prevLockSsfi);\n  } else {\n    this.assert(\n      val === obj,\n      'expected #{this} to equal #{exp}',\n      'expected #{this} to not equal #{exp}',\n      val,\n      this._obj,\n      true\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('equal', assertEqual);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('equals', assertEqual);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('eq', assertEqual);\n\n/**\n * ### .eql(obj[, msg])\n *\n * Asserts that the target is deeply equal to the given `obj`. See the\n * `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target object is deeply (but not strictly) equal to {a: 1}\n *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n *\n *     // Target array is deeply (but not strictly) equal to [1, 2]\n *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n *\n * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n * to assert that the target is deeply equal to its expected value, rather\n * than not deeply equal to one of countless unexpected values.\n *\n *     expect({a: 1}).to.eql({a: 1}); // Recommended\n *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n *\n * `.eql` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n *\n * The alias `.eqls` can be used interchangeably with `.eql`.\n *\n * The `.deep.equal` assertion is almost identical to `.eql` but with one\n * difference: `.deep.equal` causes deep equality comparisons to also be used\n * for any other assertions that follow in the chain.\n *\n * @name eql\n * @alias eqls\n * @param {unknown} obj\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertEql(obj, msg) {\n  if (msg) flag(this, 'message', msg);\n  let eql = flag(this, 'eql');\n  this.assert(\n    eql(obj, flag(this, 'object')),\n    'expected #{this} to deeply equal #{exp}',\n    'expected #{this} to not deeply equal #{exp}',\n    obj,\n    this._obj,\n    true\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('eql', assertEql);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('eqls', assertEql);\n\n/**\n * ### .above(n[, msg])\n *\n * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.above(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.above`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(1).to.not.be.above(2); // Not recommended\n *\n * `.above` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.above(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.above(2);\n *\n * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n * `.above`.\n *\n * @name above\n * @alias gt\n * @alias greaterThan\n * @param {number} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertAbove(n, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    doLength = flag(this, 'doLength'),\n    flagMsg = flag(this, 'message'),\n    msgPrefix = flagMsg ? flagMsg + ': ' : '',\n    ssfi = flag(this, 'ssfi'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    nType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(n).toLowerCase();\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && objType === 'date' && nType !== 'date') {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      msgPrefix + 'the argument to above must be a date',\n      undefined,\n      ssfi\n    );\n  } else if (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(n) && (doLength || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj))) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      msgPrefix + 'the argument to above must be a number',\n      undefined,\n      ssfi\n    );\n  } else if (!doLength && objType !== 'date' && !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj)) {\n    let printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      msgPrefix + 'expected ' + printObj + ' to be a number or a date',\n      undefined,\n      ssfi\n    );\n  }\n\n  if (doLength) {\n    let descriptor = 'length',\n      itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n      itemsCount > n,\n      'expected #{this} to have a ' +\n        descriptor +\n        ' above #{exp} but got #{act}',\n      'expected #{this} to not have a ' + descriptor + ' above #{exp}',\n      n,\n      itemsCount\n    );\n  } else {\n    this.assert(\n      obj > n,\n      'expected #{this} to be above #{exp}',\n      'expected #{this} to be at most #{exp}',\n      n\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('above', assertAbove);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('gt', assertAbove);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('greaterThan', assertAbove);\n\n/**\n * ### .least(n[, msg])\n *\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `n` respectively. However, it's often best to assert that the target is equal to\n * its expected value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.at.least(1); // Not recommended\n *     expect(2).to.be.at.least(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.least`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.at.least(2); // Not recommended\n *\n * `.least` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.at.least(2, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.at.least(2);\n *\n * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n * `.least`.\n *\n * @name least\n * @alias gte\n * @alias greaterThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertLeast(n, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    doLength = flag(this, 'doLength'),\n    flagMsg = flag(this, 'message'),\n    msgPrefix = flagMsg ? flagMsg + ': ' : '',\n    ssfi = flag(this, 'ssfi'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    nType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(n).toLowerCase(),\n    errorMessage,\n    shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && objType === 'date' && nType !== 'date') {\n    errorMessage = msgPrefix + 'the argument to least must be a date';\n  } else if (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(n) && (doLength || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to least must be a number';\n  } else if (!doLength && objType !== 'date' && !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj)) {\n    let printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n    errorMessage =\n      msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    let descriptor = 'length',\n      itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n      itemsCount >= n,\n      'expected #{this} to have a ' +\n        descriptor +\n        ' at least #{exp} but got #{act}',\n      'expected #{this} to have a ' + descriptor + ' below #{exp}',\n      n,\n      itemsCount\n    );\n  } else {\n    this.assert(\n      obj >= n,\n      'expected #{this} to be at least #{exp}',\n      'expected #{this} to be below #{exp}',\n      n\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('least', assertLeast);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('gte', assertLeast);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n/**\n * ### .below(n[, msg])\n *\n * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.below(2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.length(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.below`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.below(1); // Not recommended\n *\n * `.below` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.below(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.below(1);\n *\n * The aliases `.lt` and `.lessThan` can be used interchangeably with\n * `.below`.\n *\n * @name below\n * @alias lt\n * @alias lessThan\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertBelow(n, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    doLength = flag(this, 'doLength'),\n    flagMsg = flag(this, 'message'),\n    msgPrefix = flagMsg ? flagMsg + ': ' : '',\n    ssfi = flag(this, 'ssfi'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    nType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(n).toLowerCase(),\n    errorMessage,\n    shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && objType === 'date' && nType !== 'date') {\n    errorMessage = msgPrefix + 'the argument to below must be a date';\n  } else if (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(n) && (doLength || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to below must be a number';\n  } else if (!doLength && objType !== 'date' && !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj)) {\n    let printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n    errorMessage =\n      msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    let descriptor = 'length',\n      itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n      itemsCount < n,\n      'expected #{this} to have a ' +\n        descriptor +\n        ' below #{exp} but got #{act}',\n      'expected #{this} to not have a ' + descriptor + ' below #{exp}',\n      n,\n      itemsCount\n    );\n  } else {\n    this.assert(\n      obj < n,\n      'expected #{this} to be below #{exp}',\n      'expected #{this} to be at least #{exp}',\n      n\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('below', assertBelow);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('lt', assertBelow);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('lessThan', assertBelow);\n\n/**\n * ### .most(n[, msg])\n *\n * Asserts that the target is a number or a date less than or equal to the given number\n * or date `n` respectively. However, it's often best to assert that the target is equal to its\n * expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.at.most(2); // Not recommended\n *     expect(1).to.be.at.most(1); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is less than or equal to the given number `n`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.most`.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.not.be.at.most(1); // Not recommended\n *\n * `.most` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(2).to.be.at.most(1, 'nooo why fail??');\n *     expect(2, 'nooo why fail??').to.be.at.most(1);\n *\n * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n * `.most`.\n *\n * @name most\n * @alias lte\n * @alias lessThanOrEqual\n * @param {unknown} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertMost(n, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    doLength = flag(this, 'doLength'),\n    flagMsg = flag(this, 'message'),\n    msgPrefix = flagMsg ? flagMsg + ': ' : '',\n    ssfi = flag(this, 'ssfi'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    nType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(n).toLowerCase(),\n    errorMessage,\n    shouldThrow = true;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (!doLength && objType === 'date' && nType !== 'date') {\n    errorMessage = msgPrefix + 'the argument to most must be a date';\n  } else if (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(n) && (doLength || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj))) {\n    errorMessage = msgPrefix + 'the argument to most must be a number';\n  } else if (!doLength && objType !== 'date' && !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj)) {\n    let printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n    errorMessage =\n      msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    let descriptor = 'length',\n      itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n      itemsCount <= n,\n      'expected #{this} to have a ' +\n        descriptor +\n        ' at most #{exp} but got #{act}',\n      'expected #{this} to have a ' + descriptor + ' above #{exp}',\n      n,\n      itemsCount\n    );\n  } else {\n    this.assert(\n      obj <= n,\n      'expected #{this} to be at most #{exp}',\n      'expected #{this} to be above #{exp}',\n      n\n    );\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('most', assertMost);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('lte', assertMost);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('lessThanOrEqual', assertMost);\n\n/**\n * ### .within(start, finish[, msg])\n *\n * Asserts that the target is a number or a date greater than or equal to the given\n * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n * However, it's often best to assert that the target is equal to its expected\n * value.\n *\n *     expect(2).to.equal(2); // Recommended\n *     expect(2).to.be.within(1, 3); // Not recommended\n *     expect(2).to.be.within(2, 3); // Not recommended\n *     expect(2).to.be.within(1, 2); // Not recommended\n *\n * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n * or `size` is greater than or equal to the given number `start`, and less\n * than or equal to the given number `finish`.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.within`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.within(2, 4); // Not recommended\n *\n * `.within` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n *\n * @name within\n * @param {unknown} start lower bound inclusive\n * @param {unknown} finish upper bound inclusive\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('within', function (start, finish, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    doLength = flag(this, 'doLength'),\n    flagMsg = flag(this, 'message'),\n    msgPrefix = flagMsg ? flagMsg + ': ' : '',\n    ssfi = flag(this, 'ssfi'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    startType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(start).toLowerCase(),\n    finishType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(finish).toLowerCase(),\n    errorMessage,\n    shouldThrow = true,\n    range =\n      startType === 'date' && finishType === 'date'\n        ? start.toISOString() + '..' + finish.toISOString()\n        : start + '..' + finish;\n\n  if (doLength && objType !== 'map' && objType !== 'set') {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n  }\n\n  if (\n    !doLength &&\n    objType === 'date' &&\n    (startType !== 'date' || finishType !== 'date')\n  ) {\n    errorMessage = msgPrefix + 'the arguments to within must be dates';\n  } else if (\n    (!_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(start) || !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(finish)) &&\n    (doLength || _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj))\n  ) {\n    errorMessage = msgPrefix + 'the arguments to within must be numbers';\n  } else if (!doLength && objType !== 'date' && !_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isNumeric(obj)) {\n    let printObj = objType === 'string' ? \"'\" + obj + \"'\" : obj;\n    errorMessage =\n      msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n  } else {\n    shouldThrow = false;\n  }\n\n  if (shouldThrow) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(errorMessage, undefined, ssfi);\n  }\n\n  if (doLength) {\n    let descriptor = 'length',\n      itemsCount;\n    if (objType === 'map' || objType === 'set') {\n      descriptor = 'size';\n      itemsCount = obj.size;\n    } else {\n      itemsCount = obj.length;\n    }\n    this.assert(\n      itemsCount >= start && itemsCount <= finish,\n      'expected #{this} to have a ' + descriptor + ' within ' + range,\n      'expected #{this} to not have a ' + descriptor + ' within ' + range\n    );\n  } else {\n    this.assert(\n      obj >= start && obj <= finish,\n      'expected #{this} to be within ' + range,\n      'expected #{this} to not be within ' + range\n    );\n  }\n});\n\n/**\n * ### .instanceof(constructor[, msg])\n *\n * Asserts that the target is an instance of the given `constructor`.\n *\n *     function Cat () { }\n *\n *     expect(new Cat()).to.be.an.instanceof(Cat);\n *     expect([1, 2]).to.be.an.instanceof(Array);\n *\n * Add `.not` earlier in the chain to negate `.instanceof`.\n *\n *     expect({a: 1}).to.not.be.an.instanceof(Array);\n *\n * `.instanceof` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n *\n * Due to limitations in ES5, `.instanceof` may not always work as expected\n * when using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing built-in object such as\n * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n *\n * @name instanceof\n * @param {unknown} constructor\n * @param {string} msg _optional_\n * @alias instanceOf\n * @namespace BDD\n * @public\n */\nfunction assertInstanceOf(constructor, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  let target = flag(this, 'object');\n  let ssfi = flag(this, 'ssfi');\n  let flagMsg = flag(this, 'message');\n  let isInstanceOf;\n\n  try {\n    isInstanceOf = target instanceof constructor;\n  } catch (err) {\n    if (err instanceof TypeError) {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n        flagMsg +\n          'The instanceof assertion needs a constructor but ' +\n          _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(constructor) +\n          ' was given.',\n        undefined,\n        ssfi\n      );\n    }\n    throw err;\n  }\n\n  let name = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getName(constructor);\n  if (name == null) {\n    name = 'an unnamed constructor';\n  }\n\n  this.assert(\n    isInstanceOf,\n    'expected #{this} to be an instance of ' + name,\n    'expected #{this} to not be an instance of ' + name\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('instanceof', assertInstanceOf);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('instanceOf', assertInstanceOf);\n\n/**\n * ### .property(name[, val[, msg]])\n *\n * Asserts that the target has a property with the given key `name`.\n *\n *     expect({a: 1}).to.have.property('a');\n *\n * When `val` is provided, `.property` also asserts that the property's value\n * is equal to the given `val`.\n *\n *     expect({a: 1}).to.have.property('a', 1);\n *\n * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n * chain to use deep equality instead. See the `deep-eql` project page for\n * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n *\n *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n *\n * The target's enumerable and non-enumerable properties are always included\n * in the search. By default, both own and inherited properties are included.\n * Add `.own` earlier in the chain to exclude inherited properties from the\n * search.\n *\n *     Object.prototype.b = 2;\n *\n *     expect({a: 1}).to.have.own.property('a');\n *     expect({a: 1}).to.have.own.property('a', 1);\n *     expect({a: 1}).to.have.property('b');\n *     expect({a: 1}).to.not.have.own.property('b');\n *\n * `.deep` and `.own` can be combined.\n *\n *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n *\n * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n * referencing nested properties.\n *\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n *\n * If `.` or `[]` are part of an actual property name, they can be escaped by\n * adding two backslashes before them.\n *\n *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n *\n * `.deep` and `.nested` can be combined.\n *\n *     expect({a: {b: [{c: 3}]}})\n *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n *\n * `.own` and `.nested` cannot be combined.\n *\n * Add `.not` earlier in the chain to negate `.property`.\n *\n *     expect({a: 1}).to.not.have.property('b');\n *\n * However, it's dangerous to negate `.property` when providing `val`. The\n * problem is that it creates uncertain expectations by asserting that the\n * target either doesn't have a property with the given key `name`, or that it\n * does have a property with the given key `name` but its value isn't equal to\n * the given `val`. It's often best to identify the exact output that's\n * expected, and then write an assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property with the given key\n * `name`, it's often best to assert exactly that.\n *\n *     expect({b: 2}).to.not.have.property('a'); // Recommended\n *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n *\n * When the target is expected to have a property with the given key `name`,\n * it's often best to assert that the property has its expected value, rather\n * than asserting that it doesn't have one of many unexpected values.\n *\n *     expect({a: 3}).to.have.property('a', 3); // Recommended\n *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n *\n * `.property` changes the target of any assertions that follow in the chain\n * to be the value of the property from the original target object.\n *\n *     expect({a: 1}).to.have.property('a').that.is.a('number');\n *\n * `.property` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing `val`, only use the\n * second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n *\n *     // Not recommended\n *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `val`. Instead,\n * it's asserting that the target object has a `b` property that's equal to\n * `undefined`.\n *\n * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n * interchangeably with `.own.property`.\n *\n * @name property\n * @param {string} name\n * @param {unknown} val (optional)\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertProperty(name, val, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  let isNested = flag(this, 'nested'),\n    isOwn = flag(this, 'own'),\n    flagMsg = flag(this, 'message'),\n    obj = flag(this, 'object'),\n    ssfi = flag(this, 'ssfi'),\n    nameType = typeof name;\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  if (isNested) {\n    if (nameType !== 'string') {\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n        flagMsg +\n          'the argument to property must be a string when using nested syntax',\n        undefined,\n        ssfi\n      );\n    }\n  } else {\n    if (\n      nameType !== 'string' &&\n      nameType !== 'number' &&\n      nameType !== 'symbol'\n    ) {\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n        flagMsg +\n          'the argument to property must be a string, number, or symbol',\n        undefined,\n        ssfi\n      );\n    }\n  }\n\n  if (isNested && isOwn) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n      undefined,\n      ssfi\n    );\n  }\n\n  if (obj === null || obj === undefined) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      flagMsg + 'Target cannot be null or undefined.',\n      undefined,\n      ssfi\n    );\n  }\n\n  let isDeep = flag(this, 'deep'),\n    negate = flag(this, 'negate'),\n    pathInfo = isNested ? _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getPathInfo(obj, name) : null,\n    value = isNested ? pathInfo.value : obj[name],\n    isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n  let descriptor = '';\n  if (isDeep) descriptor += 'deep ';\n  if (isOwn) descriptor += 'own ';\n  if (isNested) descriptor += 'nested ';\n  descriptor += 'property ';\n\n  let hasProperty;\n  if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n  else if (isNested) hasProperty = pathInfo.exists;\n  else hasProperty = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.hasProperty(obj, name);\n\n  // When performing a negated assertion for both name and val, merely having\n  // a property with the given name isn't enough to cause the assertion to\n  // fail. It must both have a property with the given name, and the value of\n  // that property must equal the given val. Therefore, skip this assertion in\n  // favor of the next.\n  if (!negate || arguments.length === 1) {\n    this.assert(\n      hasProperty,\n      'expected #{this} to have ' + descriptor + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name),\n      'expected #{this} to not have ' + descriptor + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name)\n    );\n  }\n\n  if (arguments.length > 1) {\n    this.assert(\n      hasProperty && isEql(val, value),\n      'expected #{this} to have ' +\n        descriptor +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name) +\n        ' of #{exp}, but got #{act}',\n      'expected #{this} to not have ' +\n        descriptor +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name) +\n        ' of #{act}',\n      val,\n      value\n    );\n  }\n\n  flag(this, 'object', value);\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('property', assertProperty);\n\n/**\n * @param {unknown} _name\n * @param {unknown} _value\n * @param {string} _msg\n */\nfunction assertOwnProperty(_name, _value, _msg) {\n  flag(this, 'own', true);\n  assertProperty.apply(this, arguments);\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('ownProperty', assertOwnProperty);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n/**\n * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n *\n * Asserts that the target has its own property descriptor with the given key\n * `name`. Enumerable and non-enumerable properties are included in the\n * search.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n *\n * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n * the property's descriptor is deeply equal to the given `descriptor`. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n *\n *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n *\n * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n * a `descriptor`. The problem is that it creates uncertain expectations by\n * asserting that the target either doesn't have a property descriptor with\n * the given key `name`, or that it does have a property descriptor with the\n * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n * often best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to have a property descriptor with the given\n * key `name`, it's often best to assert exactly that.\n *\n *     // Recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n *\n *     // Not recommended\n *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * When the target is expected to have a property descriptor with the given\n * key `name`, it's often best to assert that the property has its expected\n * descriptor, rather than asserting that it doesn't have one of many\n * unexpected descriptors.\n *\n *     // Recommended\n *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 3,\n *     });\n *\n *     // Not recommended\n *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 1,\n *     });\n *\n * `.ownPropertyDescriptor` changes the target of any assertions that follow\n * in the chain to be the value of the property descriptor from the original\n * target object.\n *\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n *       .that.has.property('enumerable', true);\n *\n * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n * custom error message to show when the assertion fails. The message can also\n * be given as the second argument to `expect`. When not providing\n * `descriptor`, only use the second form.\n *\n *     // Recommended\n *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     }, 'nooo why fail??');\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n *         configurable: true,\n *         enumerable: true,\n *         writable: true,\n *         value: 2,\n *     });\n *\n *     // Recommended\n *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n *\n *     // Not recommended\n *     expect({a: 1})\n *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n *\n * The above assertion isn't the same thing as not providing `descriptor`.\n * Instead, it's asserting that the target object has a `b` property\n * descriptor that's deeply equal to `undefined`.\n *\n * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n * `.ownPropertyDescriptor`.\n *\n * @name ownPropertyDescriptor\n * @alias haveOwnPropertyDescriptor\n * @param {string} name\n * @param {object} descriptor _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertOwnPropertyDescriptor(name, descriptor, msg) {\n  if (typeof descriptor === 'string') {\n    msg = descriptor;\n    descriptor = null;\n  }\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object');\n  let actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n  let eql = flag(this, 'eql');\n  if (actualDescriptor && descriptor) {\n    this.assert(\n      eql(descriptor, actualDescriptor),\n      'expected the own property descriptor for ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name) +\n        ' on #{this} to match ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(descriptor) +\n        ', got ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(actualDescriptor),\n      'expected the own property descriptor for ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name) +\n        ' on #{this} to not match ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(descriptor),\n      descriptor,\n      actualDescriptor,\n      true\n    );\n  } else {\n    this.assert(\n      actualDescriptor,\n      'expected #{this} to have an own property descriptor for ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name),\n      'expected #{this} to not have an own property descriptor for ' +\n        _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(name)\n    );\n  }\n  flag(this, 'object', actualDescriptor);\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n/** */\nfunction assertLengthChain() {\n  flag(this, 'doLength', true);\n}\n\n/**\n * ### .lengthOf(n[, msg])\n *\n * Asserts that the target's `length` or `size` is equal to the given number\n * `n`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *     expect('foo').to.have.lengthOf(3);\n *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n *\n * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n * best to assert that the target's `length` property is equal to its expected\n * value, rather than not equal to one of many unexpected values.\n *\n *     expect('foo').to.have.lengthOf(3); // Recommended\n *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n *\n * `.lengthOf` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n *\n * `.lengthOf` can also be used as a language chain, causing all `.above`,\n * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n * chain to use the target's `length` property as the target. However, it's\n * often best to assert that the target's `length` property is equal to its\n * expected length, rather than asserting that its `length` property falls\n * within some range of values.\n *\n *     // Recommended\n *     expect([1, 2, 3]).to.have.lengthOf(3);\n *\n *     // Not recommended\n *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n *\n * Due to a compatibility issue, the alias `.length` can't be chained directly\n * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n * interchangeably with `.lengthOf` in every situation. It's recommended to\n * always use `.lengthOf` instead of `.length`.\n *\n *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n *\n * @name lengthOf\n * @alias length\n * @param {number} n\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertLength(n, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj).toLowerCase(),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi'),\n    descriptor = 'length',\n    itemsCount;\n\n  switch (objType) {\n    case 'map':\n    case 'set':\n      descriptor = 'size';\n      itemsCount = obj.size;\n      break;\n    default:\n      new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n      itemsCount = obj.length;\n  }\n\n  this.assert(\n    itemsCount == n,\n    'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}',\n    'expected #{this} to not have a ' + descriptor + ' of #{act}',\n    n,\n    itemsCount\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n/**\n * ### .match(re[, msg])\n *\n * Asserts that the target matches the given regular expression `re`.\n *\n *     expect('foobar').to.match(/^foo/);\n *\n * Add `.not` earlier in the chain to negate `.match`.\n *\n *     expect('foobar').to.not.match(/taco/);\n *\n * `.match` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n *\n * The alias `.matches` can be used interchangeably with `.match`.\n *\n * @name match\n * @alias matches\n * @param {RegExp} re\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertMatch(re, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object');\n  this.assert(\n    re.exec(obj),\n    'expected #{this} to match ' + re,\n    'expected #{this} not to match ' + re\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('match', assertMatch);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('matches', assertMatch);\n\n/**\n * ### .string(str[, msg])\n *\n * Asserts that the target string contains the given substring `str`.\n *\n *     expect('foobar').to.have.string('bar');\n *\n * Add `.not` earlier in the chain to negate `.string`.\n *\n *     expect('foobar').to.not.have.string('taco');\n *\n * `.string` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n *\n * @name string\n * @param {string} str\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('string', function (str, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n  this.assert(\n    ~obj.indexOf(str),\n    'expected #{this} to contain ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(str),\n    'expected #{this} to not contain ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(str)\n  );\n});\n\n/**\n * ### .keys(key1[, key2[, ...]])\n *\n * Asserts that the target object, array, map, or set has the given keys. Only\n * the target's own inherited properties are included in the search.\n *\n * When the target is an object or array, keys can be provided as one or more\n * string arguments, a single array argument, or a single object argument. In\n * the latter case, only the keys in the given object matter; the values are\n * ignored.\n *\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *     expect(['x', 'y']).to.have.all.keys(0, 1);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n *\n *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n *\n * When the target is a map or set, each key must be provided as a separate\n * argument.\n *\n *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n *\n * Because `.keys` does different things based on the target's type, it's\n * important to check the target's type before using `.keys`. See the `.a` doc\n * for info on testing a target's type.\n *\n *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n *\n * By default, strict (`===`) equality is used to compare keys of maps and\n * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n * the `deep-eql` project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target set deeply (but not strictly) has key `{a: 1}`\n *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n *\n * By default, the target must have all of the given keys and no more. Add\n * `.any` earlier in the chain to only require that the target have at least\n * one of the given keys. Also, add `.not` earlier in the chain to negate\n * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n * `.all` when asserting `.keys` without negation.\n *\n * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n * exactly what's expected of the output, whereas `.not.all.keys` creates\n * uncertain expectations.\n *\n *     // Recommended; asserts that target doesn't have any of the given keys\n *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n *\n *     // Not recommended; asserts that target doesn't have all of the given\n *     // keys but may or may not have some of them\n *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n *\n * When asserting `.keys` without negation, `.all` is preferred because\n * `.all.keys` asserts exactly what's expected of the output, whereas\n * `.any.keys` creates uncertain expectations.\n *\n *     // Recommended; asserts that target has all the given keys\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n *\n *     // Not recommended; asserts that target has at least one of the given\n *     // keys but may or may not have more of them\n *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n *\n * Note that `.all` is used by default when neither `.all` nor `.any` appear\n * earlier in the chain. However, it's often best to add `.all` anyway because\n * it improves readability.\n *\n *     // Both assertions are identical\n *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n *\n * Add `.include` earlier in the chain to require that the target's keys be a\n * superset of the expected keys, rather than identical sets.\n *\n *     // Target object's keys are a superset of ['a', 'b'] but not identical\n *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n *\n * However, if `.any` and `.include` are combined, only the `.any` takes\n * effect. The `.include` is ignored in this case.\n *\n *     // Both assertions are identical\n *     expect({a: 1}).to.have.any.keys('a', 'b');\n *     expect({a: 1}).to.include.any.keys('a', 'b');\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n *\n * The alias `.key` can be used interchangeably with `.keys`.\n *\n * @name keys\n * @alias key\n * @param {...string | Array | object} keys\n * @namespace BDD\n * @public\n */\nfunction assertKeys(keys) {\n  let obj = flag(this, 'object'),\n    objType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(obj),\n    keysType = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.type(keys),\n    ssfi = flag(this, 'ssfi'),\n    isDeep = flag(this, 'deep'),\n    str,\n    deepStr = '',\n    actual,\n    ok = true,\n    flagMsg = flag(this, 'message');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n  let mixedArgsMsg =\n    flagMsg +\n    'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n  if (objType === 'Map' || objType === 'Set') {\n    deepStr = isDeep ? 'deeply ' : '';\n    actual = [];\n\n    // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n    obj.forEach(function (val, key) {\n      actual.push(key);\n    });\n\n    if (keysType !== 'Array') {\n      keys = Array.prototype.slice.call(arguments);\n    }\n  } else {\n    actual = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.getOwnEnumerableProperties(obj);\n\n    switch (keysType) {\n      case 'Array':\n        if (arguments.length > 1) {\n          throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(mixedArgsMsg, undefined, ssfi);\n        }\n        break;\n      case 'Object':\n        if (arguments.length > 1) {\n          throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(mixedArgsMsg, undefined, ssfi);\n        }\n        keys = Object.keys(keys);\n        break;\n      default:\n        keys = Array.prototype.slice.call(arguments);\n    }\n\n    // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n    keys = keys.map(function (val) {\n      return typeof val === 'symbol' ? val : String(val);\n    });\n  }\n\n  if (!keys.length) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(flagMsg + 'keys required', undefined, ssfi);\n  }\n\n  let len = keys.length,\n    any = flag(this, 'any'),\n    all = flag(this, 'all'),\n    expected = keys,\n    isEql = isDeep ? flag(this, 'eql') : (val1, val2) => val1 === val2;\n\n  if (!any && !all) {\n    all = true;\n  }\n\n  // Has any\n  if (any) {\n    ok = expected.some(function (expectedKey) {\n      return actual.some(function (actualKey) {\n        return isEql(expectedKey, actualKey);\n      });\n    });\n  }\n\n  // Has all\n  if (all) {\n    ok = expected.every(function (expectedKey) {\n      return actual.some(function (actualKey) {\n        return isEql(expectedKey, actualKey);\n      });\n    });\n\n    if (!flag(this, 'contains')) {\n      ok = ok && keys.length == actual.length;\n    }\n  }\n\n  // Key string\n  if (len > 1) {\n    keys = keys.map(function (key) {\n      return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(key);\n    });\n    let last = keys.pop();\n    if (all) {\n      str = keys.join(', ') + ', and ' + last;\n    }\n    if (any) {\n      str = keys.join(', ') + ', or ' + last;\n    }\n  } else {\n    str = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(keys[0]);\n  }\n\n  // Form\n  str = (len > 1 ? 'keys ' : 'key ') + str;\n\n  // Have / include\n  str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n  // Assertion\n  this.assert(\n    ok,\n    'expected #{this} to ' + deepStr + str,\n    'expected #{this} to not ' + deepStr + str,\n    expected.slice(0).sort(_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.compareByInspect),\n    actual.sort(_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.compareByInspect),\n    true\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('keys', assertKeys);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('key', assertKeys);\n\n/**\n * ### .throw([errorLike], [errMsgMatcher], [msg])\n *\n * When no arguments are provided, `.throw` invokes the target function and\n * asserts that an error is thrown.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw();\n *\n * When one argument is provided, and it's an error constructor, `.throw`\n * invokes the target function and asserts that an error is thrown that's an\n * instance of that error constructor.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(TypeError);\n *\n * When one argument is provided, and it's an error instance, `.throw` invokes\n * the target function and asserts that an error is thrown that's strictly\n * (`===`) equal to that error instance.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(err);\n *\n * When one argument is provided, and it's a string, `.throw` invokes the\n * target function and asserts that an error is thrown with a message that\n * contains that string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw('salmon');\n *\n * When one argument is provided, and it's a regular expression, `.throw`\n * invokes the target function and asserts that an error is thrown with a\n * message that matches that regular expression.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *     expect(badFn).to.throw(/salmon/);\n *\n * When two arguments are provided, and the first is an error instance or\n * constructor, and the second is a string or regular expression, `.throw`\n * invokes the function and asserts that an error is thrown that fulfills both\n * conditions as described above.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon');\n *     expect(badFn).to.throw(TypeError, /salmon/);\n *     expect(badFn).to.throw(err, 'salmon');\n *     expect(badFn).to.throw(err, /salmon/);\n *\n * Add `.not` earlier in the chain to negate `.throw`.\n *\n *     var goodFn = function () {};\n *     expect(goodFn).to.not.throw();\n *\n * However, it's dangerous to negate `.throw` when providing any arguments.\n * The problem is that it creates uncertain expectations by asserting that the\n * target either doesn't throw an error, or that it throws an error but of a\n * different type than the given type, or that it throws an error of the given\n * type but with a message that doesn't include the given string. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to throw an error, it's often best to assert\n * exactly that.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.not.throw(); // Recommended\n *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * When the target is expected to throw an error, it's often best to assert\n * that the error is of its expected type, and has a message that includes an\n * expected string, rather than asserting that it doesn't have one of many\n * unexpected types, and doesn't have a message that includes some string.\n *\n *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n *\n *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n *\n * `.throw` changes the target of any assertions that follow in the chain to\n * be the error object that's thrown.\n *\n *     var err = new TypeError('Illegal salmon!');\n *     err.code = 42;\n *     var badFn = function () { throw err; };\n *\n *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n *\n * `.throw` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`. When not providing two arguments, always use\n * the second form.\n *\n *     var goodFn = function () {};\n *\n *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n *     expect(goodFn, 'nooo why fail??').to.throw();\n *\n * Due to limitations in ES5, `.throw` may not always work as expected when\n * using a transpiler such as Babel or TypeScript. In particular, it may\n * produce unexpected results when subclassing the built-in `Error` object and\n * then passing the subclassed constructor to `.throw`. See your transpiler's\n * docs for details:\n *\n * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n *\n * Beware of some common mistakes when using the `throw` assertion. One common\n * mistake is to accidentally invoke the function yourself instead of letting\n * the `throw` assertion invoke the function for you. For example, when\n * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n * the target for the assertion.\n *\n *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n *\n * If you need to assert that your function `fn` throws when passed certain\n * arguments, then wrap a call to `fn` inside of another function.\n *\n *     expect(function () { fn(42); }).to.throw();  // Function expression\n *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n *\n * Another common mistake is to provide an object method (or any stand-alone\n * function that relies on `this`) as the target of the assertion. Doing so is\n * problematic because the `this` context will be lost when the function is\n * invoked by `.throw`; there's no way for it to know what `this` is supposed\n * to be. There are two ways around this problem. One solution is to wrap the\n * method or function call inside of another function. Another solution is to\n * use `bind`.\n *\n *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n *\n * Finally, it's worth mentioning that it's a best practice in JavaScript to\n * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n * `TypeError`, and user-defined objects that extend `Error`. No other type of\n * value will generate a stack trace when initialized. With that said, the\n * `throw` assertion does technically support any type of value being thrown,\n * not just `Error` and its derivatives.\n *\n * The aliases `.throws` and `.Throw` can be used interchangeably with\n * `.throw`.\n *\n * @name throw\n * @alias throws\n * @alias Throw\n * @param {Error} errorLike\n * @param {string | RegExp} errMsgMatcher error message\n * @param {string} msg _optional_\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @returns {void} error for chaining (null if no error)\n * @namespace BDD\n * @public\n */\nfunction assertThrows(errorLike, errMsgMatcher, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    ssfi = flag(this, 'ssfi'),\n    flagMsg = flag(this, 'message'),\n    negate = flag(this, 'negate') || false;\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n  if (_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isRegExp(errorLike) || typeof errorLike === 'string') {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  let caughtErr;\n  let errorWasThrown = false;\n  try {\n    obj();\n  } catch (err) {\n    errorWasThrown = true;\n    caughtErr = err;\n  }\n\n  // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n  // but we want it to match a given set of criteria\n  let everyArgIsUndefined =\n    errorLike === undefined && errMsgMatcher === undefined;\n\n  // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n  // See Issue #551 and PR #683@GitHub\n  let everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n  let errorLikeFail = false;\n  let errMsgMatcherFail = false;\n\n  // Checking if error was thrown\n  if (everyArgIsUndefined || (!everyArgIsUndefined && !negate)) {\n    // We need this to display results correctly according to their types\n    let errorLikeString = 'an error';\n    if (errorLike instanceof Error) {\n      errorLikeString = '#{exp}';\n    } else if (errorLike) {\n      errorLikeString = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(errorLike);\n    }\n\n    let actual = caughtErr;\n    if (caughtErr instanceof Error) {\n      actual = caughtErr.toString();\n    } else if (typeof caughtErr === 'string') {\n      actual = caughtErr;\n    } else if (\n      caughtErr &&\n      (typeof caughtErr === 'object' || typeof caughtErr === 'function')\n    ) {\n      try {\n        actual = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(caughtErr);\n      } catch (_err) {\n        // somehow wasn't a constructor, maybe we got a function thrown\n        // or similar\n      }\n    }\n\n    this.assert(\n      errorWasThrown,\n      'expected #{this} to throw ' + errorLikeString,\n      'expected #{this} to not throw an error but #{act} was thrown',\n      errorLike && errorLike.toString(),\n      actual\n    );\n  }\n\n  if (errorLike && caughtErr) {\n    // We should compare instances only if `errorLike` is an instance of `Error`\n    if (errorLike instanceof Error) {\n      let isCompatibleInstance = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.compatibleInstance(\n        caughtErr,\n        errorLike\n      );\n\n      if (isCompatibleInstance === negate) {\n        // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n        // See Issue #551 and PR #683@GitHub\n        if (everyArgIsDefined && negate) {\n          errorLikeFail = true;\n        } else {\n          this.assert(\n            negate,\n            'expected #{this} to throw #{exp} but #{act} was thrown',\n            'expected #{this} to not throw #{exp}' +\n              (caughtErr && !negate ? ' but #{act} was thrown' : ''),\n            errorLike.toString(),\n            caughtErr.toString()\n          );\n        }\n      }\n    }\n\n    let isCompatibleConstructor = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.compatibleConstructor(\n      caughtErr,\n      errorLike\n    );\n    if (isCompatibleConstructor === negate) {\n      if (everyArgIsDefined && negate) {\n        errorLikeFail = true;\n      } else {\n        this.assert(\n          negate,\n          'expected #{this} to throw #{exp} but #{act} was thrown',\n          'expected #{this} to not throw #{exp}' +\n            (caughtErr ? ' but #{act} was thrown' : ''),\n          errorLike instanceof Error\n            ? errorLike.toString()\n            : errorLike && _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(errorLike),\n          caughtErr instanceof Error\n            ? caughtErr.toString()\n            : caughtErr && _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(caughtErr)\n        );\n      }\n    }\n  }\n\n  if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n    // Here we check compatible messages\n    let placeholder = 'including';\n    if (_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.isRegExp(errMsgMatcher)) {\n      placeholder = 'matching';\n    }\n\n    let isCompatibleMessage = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.compatibleMessage(\n      caughtErr,\n      errMsgMatcher\n    );\n    if (isCompatibleMessage === negate) {\n      if (everyArgIsDefined && negate) {\n        errMsgMatcherFail = true;\n      } else {\n        this.assert(\n          negate,\n          'expected #{this} to throw error ' +\n            placeholder +\n            ' #{exp} but got #{act}',\n          'expected #{this} to throw error not ' + placeholder + ' #{exp}',\n          errMsgMatcher,\n          _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getMessage(caughtErr)\n        );\n      }\n    }\n  }\n\n  // If both assertions failed and both should've matched we throw an error\n  if (errorLikeFail && errMsgMatcherFail) {\n    this.assert(\n      negate,\n      'expected #{this} to throw #{exp} but #{act} was thrown',\n      'expected #{this} to not throw #{exp}' +\n        (caughtErr ? ' but #{act} was thrown' : ''),\n      errorLike instanceof Error\n        ? errorLike.toString()\n        : errorLike && _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(errorLike),\n      caughtErr instanceof Error\n        ? caughtErr.toString()\n        : caughtErr && _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.checkError.getConstructorName(caughtErr)\n    );\n  }\n\n  flag(this, 'object', caughtErr);\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('throw', assertThrows);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('throws', assertThrows);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('Throw', assertThrows);\n\n/**\n * ### .respondTo(method[, msg])\n *\n * When the target is a non-function object, `.respondTo` asserts that the\n * target has a method with the given name `method`. The method can be own or\n * inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.respondTo('meow');\n *\n * When the target is a function, `.respondTo` asserts that the target's\n * `prototype` property has a method with the given name `method`. Again, the\n * method can be own or inherited, and it can be enumerable or non-enumerable.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(Cat).to.respondTo('meow');\n *\n * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n * target as a non-function object, even if it's a function. Thus, it asserts\n * that the target has a method with the given name `method`, rather than\n * asserting that the target's `prototype` property has a method with the\n * given name `method`.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * When not adding `.itself`, it's important to check the target's type before\n * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *\n *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n *\n * Add `.not` earlier in the chain to negate `.respondTo`.\n *\n *     function Dog () {}\n *     Dog.prototype.bark = function () {};\n *\n *     expect(new Dog()).to.not.respondTo('meow');\n *\n * `.respondTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect({}).to.respondTo('meow', 'nooo why fail??');\n *     expect({}, 'nooo why fail??').to.respondTo('meow');\n *\n * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n *\n * @name respondTo\n * @alias respondsTo\n * @param {string} method\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction respondTo(method, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    itself = flag(this, 'itself'),\n    context =\n      'function' === typeof obj && !itself\n        ? obj.prototype[method]\n        : obj[method];\n\n  this.assert(\n    'function' === typeof context,\n    'expected #{this} to respond to ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(method),\n    'expected #{this} to not respond to ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect(method)\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('respondTo', respondTo);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('respondsTo', respondTo);\n\n/**\n * ### .itself\n *\n * Forces all `.respondTo` assertions that follow in the chain to behave as if\n * the target is a non-function object, even if it's a function. Thus, it\n * causes `.respondTo` to assert that the target has a method with the given\n * name, rather than asserting that the target's `prototype` property has a\n * method with the given name.\n *\n *     function Cat () {}\n *     Cat.prototype.meow = function () {};\n *     Cat.hiss = function () {};\n *\n *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n *\n * @name itself\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('itself', function () {\n  flag(this, 'itself', true);\n});\n\n/**\n * ### .satisfy(matcher[, msg])\n *\n * Invokes the given `matcher` function with the target being passed as the\n * first argument, and asserts that the value returned is truthy.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 0;\n *     });\n *\n * Add `.not` earlier in the chain to negate `.satisfy`.\n *\n *     expect(1).to.not.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * `.satisfy` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1).to.satisfy(function(num) {\n *         return num > 2;\n *     }, 'nooo why fail??');\n *\n *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n *         return num > 2;\n *     });\n *\n * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n *\n * @name satisfy\n * @alias satisfies\n * @param {Function} matcher\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction satisfy(matcher, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object');\n  let result = matcher(obj);\n  this.assert(\n    result,\n    'expected #{this} to satisfy ' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.objDisplay(matcher),\n    'expected #{this} to not satisfy' + _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.objDisplay(matcher),\n    flag(this, 'negate') ? false : true,\n    result\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('satisfy', satisfy);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('satisfies', satisfy);\n\n/**\n * ### .closeTo(expected, delta[, msg])\n *\n * Asserts that the target is a number that's within a given +/- `delta` range\n * of the given number `expected`. However, it's often best to assert that the\n * target is equal to its expected value.\n *\n *     // Recommended\n *     expect(1.5).to.equal(1.5);\n *\n *     // Not recommended\n *     expect(1.5).to.be.closeTo(1, 0.5);\n *     expect(1.5).to.be.closeTo(2, 0.5);\n *     expect(1.5).to.be.closeTo(1, 1);\n *\n * Add `.not` earlier in the chain to negate `.closeTo`.\n *\n *     expect(1.5).to.equal(1.5); // Recommended\n *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n *\n * `.closeTo` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n *\n * The alias `.approximately` can be used interchangeably with `.closeTo`.\n *\n * @name closeTo\n * @alias approximately\n * @param {number} expected\n * @param {number} delta\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction closeTo(expected, delta, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).is.numeric;\n  let message = 'A `delta` value is required for `closeTo`';\n  if (delta == undefined) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      flagMsg ? `${flagMsg}: ${message}` : message,\n      undefined,\n      ssfi\n    );\n  }\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(delta, flagMsg, ssfi, true).is.numeric;\n  message = 'A `expected` value is required for `closeTo`';\n  if (expected == undefined) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      flagMsg ? `${flagMsg}: ${message}` : message,\n      undefined,\n      ssfi\n    );\n  }\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(expected, flagMsg, ssfi, true).is.numeric;\n\n  const abs = (x) => (x < 0n ? -x : x);\n\n  // Used to round floating point number precision arithmetics\n  // See: https://stackoverflow.com/a/3644302\n  const strip = (number) => parseFloat(parseFloat(number).toPrecision(12));\n\n  this.assert(\n    strip(abs(obj - expected)) <= delta,\n    'expected #{this} to be close to ' + expected + ' +/- ' + delta,\n    'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('closeTo', closeTo);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('approximately', closeTo);\n\n/**\n * @param {unknown} _subset\n * @param {unknown} _superset\n * @param {unknown} cmp\n * @param {unknown} contains\n * @param {unknown} ordered\n * @returns {boolean}\n */\nfunction isSubsetOf(_subset, _superset, cmp, contains, ordered) {\n  let superset = Array.from(_superset);\n  let subset = Array.from(_subset);\n  if (!contains) {\n    if (subset.length !== superset.length) return false;\n    superset = superset.slice();\n  }\n\n  return subset.every(function (elem, idx) {\n    if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n    if (!cmp) {\n      let matchIdx = superset.indexOf(elem);\n      if (matchIdx === -1) return false;\n\n      // Remove match from superset so not counted twice if duplicate in subset.\n      if (!contains) superset.splice(matchIdx, 1);\n      return true;\n    }\n\n    return superset.some(function (elem2, matchIdx) {\n      if (!cmp(elem, elem2)) return false;\n\n      // Remove match from superset so not counted twice if duplicate in subset.\n      if (!contains) superset.splice(matchIdx, 1);\n      return true;\n    });\n  });\n}\n\n/**\n * ### .members(set[, msg])\n *\n * Asserts that the target array has the same members as the given array\n * `set`.\n *\n *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n *\n * By default, members are compared using strict (`===`) equality. Add `.deep`\n * earlier in the chain to use deep equality instead. See the `deep-eql`\n * project page for info on the deep equality algorithm:\n * https://github.com/chaijs/deep-eql.\n *\n *     // Target array deeply (but not strictly) has member `{a: 1}`\n *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n *\n * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n * require that members appear in the same order.\n *\n *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n *       .but.not.ordered.members([2, 1, 3]);\n *\n * By default, both arrays must be the same size. Add `.include` earlier in\n * the chain to require that the target's members be a superset of the\n * expected members. Note that duplicates are ignored in the subset when\n * `.include` is added.\n *\n *     // Target array is a superset of [1, 2] but not identical\n *     expect([1, 2, 3]).to.include.members([1, 2]);\n *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n *\n *     // Duplicates in the subset are ignored\n *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n *\n * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n * `.include` and `.ordered` are combined, the ordering begins at the start of\n * both arrays.\n *\n *     expect([{a: 1}, {b: 2}, {c: 3}])\n *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n *\n * Add `.not` earlier in the chain to negate `.members`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the target array doesn't have all of the same members as\n * the given array `set` but may or may not have some of them. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n *\n * `.members` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`.\n *\n *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n *\n * @name members\n * @param {Array} set\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('members', function (subset, msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(obj, flagMsg, ssfi, true).to.be.iterable;\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subset, flagMsg, ssfi, true).to.be.iterable;\n\n  let contains = flag(this, 'contains');\n  let ordered = flag(this, 'ordered');\n\n  let subject, failMsg, failNegateMsg;\n\n  if (contains) {\n    subject = ordered ? 'an ordered superset' : 'a superset';\n    failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n    failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n  } else {\n    subject = ordered ? 'ordered members' : 'members';\n    failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n    failNegateMsg =\n      'expected #{this} to not have the same ' + subject + ' as #{exp}';\n  }\n\n  let cmp = flag(this, 'deep') ? flag(this, 'eql') : undefined;\n\n  this.assert(\n    isSubsetOf(subset, obj, cmp, contains, ordered),\n    failMsg,\n    failNegateMsg,\n    subset,\n    obj,\n    true\n  );\n});\n\n/**\n * ### .iterable\n *\n * Asserts that the target is an iterable, which means that it has a iterator.\n *\n *     expect([1, 2]).to.be.iterable;\n *     expect(\"foobar\").to.be.iterable;\n *\n * Add `.not` earlier in the chain to negate `.iterable`.\n *\n *     expect(1).to.not.be.iterable;\n *     expect(true).to.not.be.iterable;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.iterable;\n *\n * @name iterable\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('iterable', function (msg) {\n  if (msg) flag(this, 'message', msg);\n  let obj = flag(this, 'object');\n\n  this.assert(\n    obj != undefined && obj[Symbol.iterator],\n    'expected #{this} to be an iterable',\n    'expected #{this} to not be an iterable',\n    obj\n  );\n});\n\n/**\n * ### .oneOf(list[, msg])\n *\n * Asserts that the target is a member of the given array `list`. However,\n * it's often best to assert that the target is equal to its expected value.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n *\n * Comparisons are performed using strict (`===`) equality.\n *\n * Add `.not` earlier in the chain to negate `.oneOf`.\n *\n *     expect(1).to.equal(1); // Recommended\n *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n *\n * It can also be chained with `.contain` or `.include`, which will work with\n * both arrays and strings:\n *\n *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n *\n * `.oneOf` accepts an optional `msg` argument which is a custom error message\n * to show when the assertion fails. The message can also be given as the\n * second argument to `expect`.\n *\n *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n *\n * @name oneOf\n * @param {Array<*>} list\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction oneOf(list, msg) {\n  if (msg) flag(this, 'message', msg);\n  let expected = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi'),\n    contains = flag(this, 'contains'),\n    isDeep = flag(this, 'deep'),\n    eql = flag(this, 'eql');\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n  if (contains) {\n    this.assert(\n      list.some(function (possibility) {\n        return expected.indexOf(possibility) > -1;\n      }),\n      'expected #{this} to contain one of #{exp}',\n      'expected #{this} to not contain one of #{exp}',\n      list,\n      expected\n    );\n  } else {\n    if (isDeep) {\n      this.assert(\n        list.some(function (possibility) {\n          return eql(expected, possibility);\n        }),\n        'expected #{this} to deeply equal one of #{exp}',\n        'expected #{this} to deeply equal one of #{exp}',\n        list,\n        expected\n      );\n    } else {\n      this.assert(\n        list.indexOf(expected) > -1,\n        'expected #{this} to be one of #{exp}',\n        'expected #{this} to not be one of #{exp}',\n        list,\n        expected\n      );\n    }\n  }\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('oneOf', oneOf);\n\n/**\n * ### .change(subject[, prop[, msg]])\n *\n * When one argument is provided, `.change` asserts that the given function\n * `subject` returns a different value when it's invoked before the target\n * function compared to when it's invoked afterward. However, it's often best\n * to assert that `subject` is equal to its expected value.\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     // Recommended\n *     expect(getDots()).to.equal('');\n *     addDot();\n *     expect(getDots()).to.equal('.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(getDots);\n *\n * When two arguments are provided, `.change` asserts that the value of the\n * given object `subject`'s `prop` property is different before invoking the\n * target function compared to afterward.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     // Recommended\n *     expect(myObj).to.have.property('dots', '');\n *     addDot();\n *     expect(myObj).to.have.property('dots', '.');\n *\n *     // Not recommended\n *     expect(addDot).to.change(myObj, 'dots');\n *\n * Strict (`===`) equality is used to compare before and after values.\n *\n * Add `.not` earlier in the chain to negate `.change`.\n *\n *     var dots = ''\n *     , noop = function () {}\n *     , getDots = function () { return dots; };\n *\n *     expect(noop).to.not.change(getDots);\n *\n *     var myObj = {dots: ''}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'dots');\n *\n * `.change` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {dots: ''}\n *     , addDot = function () { myObj.dots += '.'; };\n *\n *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n *\n *     var dots = ''\n *     , addDot = function () { dots += '.'; }\n *     , getDots = function () { return dots; };\n *\n *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n *\n * `.change` also causes all `.by` assertions that follow in the chain to\n * assert how much a numeric subject was increased or decreased by. However,\n * it's dangerous to use `.change.by`. The problem is that it creates\n * uncertain expectations by asserting that the subject either increases by\n * the given delta, or that it decreases by the given delta. It's often best\n * to identify the exact output that's expected, and then write an assertion\n * that only accepts that exact output.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; }\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * The alias `.changes` can be used interchangeably with `.change`.\n *\n * @name change\n * @alias changes\n * @param {string} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertChanges(subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  let fn = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  let initial;\n  if (!prop) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  fn();\n\n  let final = prop === undefined || prop === null ? subject() : subject[prop];\n  let msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  // This gets flagged because of the .by(delta) assertion\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'change');\n  flag(this, 'realDelta', final !== initial);\n\n  this.assert(\n    initial !== final,\n    'expected ' + msgObj + ' to change',\n    'expected ' + msgObj + ' to not change'\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('change', assertChanges);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('changes', assertChanges);\n\n/**\n * ### .increase(subject[, prop[, msg]])\n *\n * When one argument is provided, `.increase` asserts that the given function\n * `subject` returns a greater number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.increase` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * greater of a number is returned. It's often best to assert that the return\n * value increased by the expected amount, rather than asserting it increased\n * by any amount.\n *\n *     var val = 1\n *     , addTwo = function () { val += 2; }\n *     , getVal = function () { return val; };\n *\n *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n *     expect(addTwo).to.increase(getVal); // Not recommended\n *\n * When two arguments are provided, `.increase` asserts that the value of the\n * given object `subject`'s `prop` property is greater after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *     , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.increase`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either decreases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to decrease, it's often best to assert that it\n * decreased by the expected amount.\n *\n *     var myObj = {val: 1}\n *     , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n *\n * `.increase` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *     , noop = function () {};\n *\n *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *     , noop = function () {}\n *     , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.increase(getVal);\n *\n * The alias `.increases` can be used interchangeably with `.increase`.\n *\n * @name increase\n * @alias increases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertIncreases(subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  let fn = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  let initial;\n  if (!prop) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  // Make sure that the target is a number\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n  fn();\n\n  let final = prop === undefined || prop === null ? subject() : subject[prop];\n  let msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'increase');\n  flag(this, 'realDelta', final - initial);\n\n  this.assert(\n    final - initial > 0,\n    'expected ' + msgObj + ' to increase',\n    'expected ' + msgObj + ' to not increase'\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('increase', assertIncreases);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('increases', assertIncreases);\n\n/**\n * ### .decrease(subject[, prop[, msg]])\n *\n * When one argument is provided, `.decrease` asserts that the given function\n * `subject` returns a lesser number when it's invoked after invoking the\n * target function compared to when it's invoked beforehand. `.decrease` also\n * causes all `.by` assertions that follow in the chain to assert how much\n * lesser of a number is returned. It's often best to assert that the return\n * value decreased by the expected amount, rather than asserting it decreased\n * by any amount.\n *\n *     var val = 1\n *       , subtractTwo = function () { val -= 2; }\n *       , getVal = function () { return val; };\n *\n *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n *\n * When two arguments are provided, `.decrease` asserts that the value of the\n * given object `subject`'s `prop` property is lesser after invoking the\n * target function compared to beforehand.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either increases, or that it stays the same.\n * It's often best to identify the exact output that's expected, and then\n * write an assertion that only accepts that exact output.\n *\n * When the subject is expected to increase, it's often best to assert that it\n * increased by the expected amount.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * When the subject is expected to stay the same, it's often best to assert\n * exactly that.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n *\n * `.decrease` accepts an optional `msg` argument which is a custom error\n * message to show when the assertion fails. The message can also be given as\n * the second argument to `expect`. When not providing two arguments, always\n * use the second form.\n *\n *     var myObj = {val: 1}\n *       , noop = function () {};\n *\n *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n *\n *     var val = 1\n *       , noop = function () {}\n *       , getVal = function () { return val; };\n *\n *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n *\n * The alias `.decreases` can be used interchangeably with `.decrease`.\n *\n * @name decrease\n * @alias decreases\n * @param {string | Function} subject\n * @param {string} prop name _optional_\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertDecreases(subject, prop, msg) {\n  if (msg) flag(this, 'message', msg);\n  let fn = flag(this, 'object'),\n    flagMsg = flag(this, 'message'),\n    ssfi = flag(this, 'ssfi');\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n  let initial;\n  if (!prop) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).is.a('function');\n    initial = subject();\n  } else {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n    initial = subject[prop];\n  }\n\n  // Make sure that the target is a number\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n  fn();\n\n  let final = prop === undefined || prop === null ? subject() : subject[prop];\n  let msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n  flag(this, 'deltaMsgObj', msgObj);\n  flag(this, 'initialDeltaValue', initial);\n  flag(this, 'finalDeltaValue', final);\n  flag(this, 'deltaBehavior', 'decrease');\n  flag(this, 'realDelta', initial - final);\n\n  this.assert(\n    final - initial < 0,\n    'expected ' + msgObj + ' to decrease',\n    'expected ' + msgObj + ' to not decrease'\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('decrease', assertDecreases);\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('decreases', assertDecreases);\n\n/**\n * ### .by(delta[, msg])\n *\n * When following an `.increase` assertion in the chain, `.by` asserts that\n * the subject of the `.increase` assertion increased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n * When following a `.decrease` assertion in the chain, `.by` asserts that the\n * subject of the `.decrease` assertion decreased by the given `delta`.\n *\n *     var myObj = {val: 1}\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n *\n * When following a `.change` assertion in the chain, `.by` asserts that the\n * subject of the `.change` assertion either increased or decreased by the\n * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n * that it creates uncertain expectations. It's often best to identify the\n * exact output that's expected, and then write an assertion that only accepts\n * that exact output.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; }\n *       , subtractTwo = function () { myObj.val -= 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n *\n * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n * to assert that the subject changed by its expected delta, rather than\n * asserting that it didn't change by one of countless unexpected deltas.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     // Recommended\n *     expect(addTwo).to.increase(myObj, 'val').by(2);\n *\n *     // Not recommended\n *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n *\n * `.by` accepts an optional `msg` argument which is a custom error message to\n * show when the assertion fails. The message can also be given as the second\n * argument to `expect`.\n *\n *     var myObj = {val: 1}\n *       , addTwo = function () { myObj.val += 2; };\n *\n *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n *\n * @name by\n * @param {number} delta\n * @param {string} msg _optional_\n * @namespace BDD\n * @public\n */\nfunction assertDelta(delta, msg) {\n  if (msg) flag(this, 'message', msg);\n\n  let msgObj = flag(this, 'deltaMsgObj');\n  let initial = flag(this, 'initialDeltaValue');\n  let final = flag(this, 'finalDeltaValue');\n  let behavior = flag(this, 'deltaBehavior');\n  let realDelta = flag(this, 'realDelta');\n\n  let expression;\n  if (behavior === 'change') {\n    expression = Math.abs(final - initial) === Math.abs(delta);\n  } else {\n    expression = realDelta === Math.abs(delta);\n  }\n\n  this.assert(\n    expression,\n    'expected ' + msgObj + ' to ' + behavior + ' by ' + delta,\n    'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n  );\n}\n\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('by', assertDelta);\n\n/**\n * ### .extensible\n *\n * Asserts that the target is extensible, which means that new properties can\n * be added to it. Primitives are never extensible.\n *\n *     expect({a: 1}).to.be.extensible;\n *\n * Add `.not` earlier in the chain to negate `.extensible`.\n *\n *     var nonExtensibleObject = Object.preventExtensions({})\n *     , sealedObject = Object.seal({})\n *     , frozenObject = Object.freeze({});\n *\n *     expect(nonExtensibleObject).to.not.be.extensible;\n *     expect(sealedObject).to.not.be.extensible;\n *     expect(frozenObject).to.not.be.extensible;\n *     expect(1).to.not.be.extensible;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect(1, 'nooo why fail??').to.be.extensible;\n *\n * @name extensible\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('extensible', function () {\n  let obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n  // The following provides ES6 behavior for ES5 environments.\n\n  let isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n  this.assert(\n    isExtensible,\n    'expected #{this} to be extensible',\n    'expected #{this} to not be extensible'\n  );\n});\n\n/**\n * ### .sealed\n *\n * Asserts that the target is sealed, which means that new properties can't be\n * added to it, and its existing properties can't be reconfigured or deleted.\n * However, it's possible that its existing properties can still be reassigned\n * to different values. Primitives are always sealed.\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     expect(sealedObject).to.be.sealed;\n *     expect(frozenObject).to.be.sealed;\n *     expect(1).to.be.sealed;\n *\n * Add `.not` earlier in the chain to negate `.sealed`.\n *\n *     expect({a: 1}).to.not.be.sealed;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n *\n * @name sealed\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('sealed', function () {\n  let obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n  // The following provides ES6 behavior for ES5 environments.\n\n  let isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n  this.assert(\n    isSealed,\n    'expected #{this} to be sealed',\n    'expected #{this} to not be sealed'\n  );\n});\n\n/**\n * ### .frozen\n *\n * Asserts that the target is frozen, which means that new properties can't be\n * added to it, and its existing properties can't be reassigned to different\n * values, reconfigured, or deleted. Primitives are always frozen.\n *\n *     var frozenObject = Object.freeze({});\n *\n *     expect(frozenObject).to.be.frozen;\n *     expect(1).to.be.frozen;\n *\n * Add `.not` earlier in the chain to negate `.frozen`.\n *\n *     expect({a: 1}).to.not.be.frozen;\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n *\n * @name frozen\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('frozen', function () {\n  let obj = flag(this, 'object');\n\n  // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n  // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n  // The following provides ES6 behavior for ES5 environments.\n\n  let isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n  this.assert(\n    isFrozen,\n    'expected #{this} to be frozen',\n    'expected #{this} to not be frozen'\n  );\n});\n\n/**\n * ### .finite\n *\n * Asserts that the target is a number, and isn't `NaN` or positive/negative\n * `Infinity`.\n *\n *     expect(1).to.be.finite;\n *\n * Add `.not` earlier in the chain to negate `.finite`. However, it's\n * dangerous to do so. The problem is that it creates uncertain expectations\n * by asserting that the subject either isn't a number, or that it's `NaN`, or\n * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n * best to identify the exact output that's expected, and then write an\n * assertion that only accepts that exact output.\n *\n * When the target isn't expected to be a number, it's often best to assert\n * that it's the expected type, rather than asserting that it isn't one of\n * many unexpected types.\n *\n *     expect('foo').to.be.a('string'); // Recommended\n *     expect('foo').to.not.be.finite; // Not recommended\n *\n * When the target is expected to be `NaN`, it's often best to assert exactly\n * that.\n *\n *     expect(NaN).to.be.NaN; // Recommended\n *     expect(NaN).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be positive infinity, it's often best to\n * assert exactly that.\n *\n *     expect(Infinity).to.equal(Infinity); // Recommended\n *     expect(Infinity).to.not.be.finite; // Not recommended\n *\n * When the target is expected to be negative infinity, it's often best to\n * assert exactly that.\n *\n *     expect(-Infinity).to.equal(-Infinity); // Recommended\n *     expect(-Infinity).to.not.be.finite; // Not recommended\n *\n * A custom error message can be given as the second argument to `expect`.\n *\n *     expect('foo', 'nooo why fail??').to.be.finite;\n *\n * @name finite\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addProperty('finite', function (_msg) {\n  let obj = flag(this, 'object');\n\n  this.assert(\n    typeof obj === 'number' && isFinite(obj),\n    'expected #{this} to be a finite number',\n    'expected #{this} to not be a finite number'\n  );\n});\n\n/**\n * A subset-aware compare function\n *\n * @param {unknown} expected\n * @param {unknown} actual\n * @returns {boolean}\n */\nfunction compareSubset(expected, actual) {\n  if (expected === actual) {\n    return true;\n  }\n  if (typeof actual !== typeof expected) {\n    return false;\n  }\n  if (typeof expected !== 'object' || expected === null) {\n    return expected === actual;\n  }\n  if (!actual) {\n    return false;\n  }\n\n  if (Array.isArray(expected)) {\n    if (!Array.isArray(actual)) {\n      return false;\n    }\n    return expected.every(function (exp) {\n      return actual.some(function (act) {\n        return compareSubset(exp, act);\n      });\n    });\n  }\n\n  if (expected instanceof Date) {\n    if (actual instanceof Date) {\n      return expected.getTime() === actual.getTime();\n    } else {\n      return false;\n    }\n  }\n\n  return Object.keys(expected).every(function (key) {\n    let expectedValue = expected[key];\n    let actualValue = actual[key];\n    if (\n      typeof expectedValue === 'object' &&\n      expectedValue !== null &&\n      actualValue !== null\n    ) {\n      return compareSubset(expectedValue, actualValue);\n    }\n    if (typeof expectedValue === 'function') {\n      return expectedValue(actualValue);\n    }\n    return actualValue === expectedValue;\n  });\n}\n\n/**\n * ### .containSubset\n *\n * Asserts that the target primitive/object/array structure deeply contains all provided fields\n * at the same key/depth as the provided structure.\n *\n * When comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\n * Order does not matter.\n *\n *     expect({name: {first: \"John\", last: \"Smith\"}}).to.containSubset({name: {first: \"John\"}});\n *\n * Add `.not` earlier in the chain to negate the assertion. This will cause the assertion to fail\n * only if the target DOES contains the provided data at the expected keys/depths.\n *\n * @name containSubset\n * @namespace BDD\n * @public\n */\n_assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion.addMethod('containSubset', function (expected) {\n  const actual = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag(this, 'object');\n  const showDiff = _config_js__WEBPACK_IMPORTED_MODULE_3__.config.showDiff;\n\n  this.assert(\n    compareSubset(expected, actual),\n    'expected #{act} to contain subset #{exp}',\n    'expected #{act} to not contain subset #{exp}',\n    expected,\n    actual,\n    showDiff\n  );\n});\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/core/assertions.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/assert.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/assert.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../index.js */ \"./node_modules/chai/index.js\");\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ \"./node_modules/chai/lib/chai/utils/index.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n/**\n * ### assert(expression, message)\n *\n * Write your own test expressions.\n *\n *     assert('foo' !== 'bar', 'foo is not bar');\n *     assert(Array.isArray([]), 'empty arrays are arrays');\n *\n * @param {unknown} express - expression to test for truthiness\n * @param {string} errmsg - message to display on error\n * @name assert\n * @namespace Assert\n * @public\n */\nfunction assert(express, errmsg) {\n  let test = new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(null, null, _index_js__WEBPACK_IMPORTED_MODULE_0__.assert, true);\n  test.assert(express, errmsg, '[ negation message unavailable ]');\n}\n\n/**\n * ### .fail([message])\n * ### .fail(actual, expected, [message], [operator])\n *\n * Throw a failure. Node.js `assert` module-compatible.\n *\n *     assert.fail();\n *     assert.fail(\"custom error message\");\n *     assert.fail(1, 2);\n *     assert.fail(1, 2, \"custom error message\");\n *     assert.fail(1, 2, \"custom error message\", \">\");\n *     assert.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @namespace Assert\n * @public\n */\nassert.fail = function (actual, expected, message, operator) {\n  if (arguments.length < 2) {\n    // Comply with Node's fail([message]) interface\n\n    message = actual;\n    actual = undefined;\n  }\n\n  message = message || 'assert.fail()';\n  throw new assertion_error__WEBPACK_IMPORTED_MODULE_3__.AssertionError(\n    message,\n    {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    },\n    assert.fail\n  );\n};\n\n/**\n * ### .isOk(object, [message])\n *\n * Asserts that `object` is truthy.\n *\n *     assert.isOk('everything', 'everything is ok');\n *     assert.isOk(false, 'this will fail');\n *\n * @name isOk\n * @alias ok\n * @param {unknown} val object to test\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isOk = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isOk, true).is.ok;\n};\n\n/**\n * ### .isNotOk(object, [message])\n *\n * Asserts that `object` is falsy.\n *\n *     assert.isNotOk('everything', 'this will fail');\n *     assert.isNotOk(false, 'this will pass');\n *\n * @name isNotOk\n * @alias notOk\n * @param {unknown} val object to test\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotOk = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n};\n\n/**\n * ### .equal(actual, expected, [message])\n *\n * Asserts non-strict equality (`==`) of `actual` and `expected`.\n *\n *     assert.equal(3, '3', '== coerces values to strings');\n *\n * @name equal\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.equal = function (act, exp, msg) {\n  let test = new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.equal, true);\n\n  test.assert(\n    exp == (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag)(test, 'object'),\n    'expected #{this} to equal #{exp}',\n    'expected #{this} to not equal #{act}',\n    exp,\n    act,\n    true\n  );\n};\n\n/**\n * ### .notEqual(actual, expected, [message])\n *\n * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n *\n *     assert.notEqual(3, 4, 'these numbers are not equal');\n *\n * @name notEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notEqual = function (act, exp, msg) {\n  let test = new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.notEqual, true);\n\n  test.assert(\n    exp != (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag)(test, 'object'),\n    'expected #{this} to not equal #{exp}',\n    'expected #{this} to equal #{act}',\n    exp,\n    act,\n    true\n  );\n};\n\n/**\n * ### .strictEqual(actual, expected, [message])\n *\n * Asserts strict equality (`===`) of `actual` and `expected`.\n *\n *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n *\n * @name strictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.strictEqual = function (act, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n};\n\n/**\n * ### .notStrictEqual(actual, expected, [message])\n *\n * Asserts strict inequality (`!==`) of `actual` and `expected`.\n *\n *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n *\n * @name notStrictEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notStrictEqual = function (act, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n};\n\n/**\n * ### .deepEqual(actual, expected, [message])\n *\n * Asserts that `actual` is deeply equal to `expected`.\n *\n *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n *\n * @name deepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @alias deepStrictEqual\n * @namespace Assert\n * @public\n */\nassert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n};\n\n/**\n * ### .notDeepEqual(actual, expected, [message])\n *\n * Assert that `actual` is not deeply equal to `expected`.\n *\n *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n *\n * @name notDeepEqual\n * @param {unknown} act\n * @param {unknown} exp\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepEqual = function (act, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n};\n\n/**\n * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n *\n * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n *\n *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n *\n * @name isAbove\n * @param {unknown} val\n * @param {unknown} abv\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAbove = function (val, abv, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n};\n\n/**\n * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n *\n * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n *\n *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n *\n * @name isAtLeast\n * @param {unknown} val\n * @param {unknown} atlst\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAtLeast = function (val, atlst, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n};\n\n/**\n * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n *\n * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n *\n *     assert.isBelow(3, 6, '3 is strictly less than 6');\n *\n * @name isBelow\n * @param {unknown} val\n * @param {unknown} blw\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isBelow = function (val, blw, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n};\n\n/**\n * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n *\n * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n *\n *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n *\n * @name isAtMost\n * @param {unknown} val\n * @param {unknown} atmst\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isAtMost = function (val, atmst, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n};\n\n/**\n * ### .isTrue(value, [message])\n *\n * Asserts that `value` is true.\n *\n *     var teaServed = true;\n *     assert.isTrue(teaServed, 'the tea has been served');\n *\n * @name isTrue\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isTrue = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isTrue, true).is['true'];\n};\n\n/**\n * ### .isNotTrue(value, [message])\n *\n * Asserts that `value` is not true.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotTrue(tea, 'great, time for tea!');\n *\n * @name isNotTrue\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotTrue = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n};\n\n/**\n * ### .isFalse(value, [message])\n *\n * Asserts that `value` is false.\n *\n *     var teaServed = false;\n *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n *\n * @name isFalse\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isFalse = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isFalse, true).is['false'];\n};\n\n/**\n * ### .isNotFalse(value, [message])\n *\n * Asserts that `value` is not false.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotFalse(tea, 'great, time for tea!');\n *\n * @name isNotFalse\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotFalse = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n};\n\n/**\n * ### .isNull(value, [message])\n *\n * Asserts that `value` is null.\n *\n *     assert.isNull(err, 'there was no error');\n *\n * @name isNull\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNull = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNull, true).to.equal(null);\n};\n\n/**\n * ### .isNotNull(value, [message])\n *\n * Asserts that `value` is not null.\n *\n *     var tea = 'tasty chai';\n *     assert.isNotNull(tea, 'great, time for tea!');\n *\n * @name isNotNull\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNull = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n};\n\n/**\n * ### .isNaN\n *\n * Asserts that value is NaN.\n *\n *     assert.isNaN(NaN, 'NaN is NaN');\n *\n * @name isNaN\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNaN = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n};\n\n/**\n * ### .isNotNaN\n *\n * Asserts that value is not NaN.\n *\n *     assert.isNotNaN(4, '4 is not NaN');\n *\n * @name isNotNaN\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isNotNaN = function (value, message) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(value, message, assert.isNotNaN, true).not.to.be.NaN;\n};\n\n/**\n * ### .exists\n *\n * Asserts that the target is neither `null` nor `undefined`.\n *\n *     var foo = 'hi';\n *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n *\n * @name exists\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.exists = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.exists, true).to.exist;\n};\n\n/**\n * ### .notExists\n *\n * Asserts that the target is either `null` or `undefined`.\n *\n *     var bar = null\n *     , baz;\n *\n *     assert.notExists(bar);\n *     assert.notExists(baz, 'baz is either null or undefined');\n *\n * @name notExists\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notExists = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.notExists, true).to.not.exist;\n};\n\n/**\n * ### .isUndefined(value, [message])\n *\n * Asserts that `value` is `undefined`.\n *\n *     var tea;\n *     assert.isUndefined(tea, 'no tea defined');\n *\n * @name isUndefined\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isUndefined = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n};\n\n/**\n * ### .isDefined(value, [message])\n *\n * Asserts that `value` is not `undefined`.\n *\n *     var tea = 'cup of chai';\n *     assert.isDefined(tea, 'tea has been defined');\n *\n * @name isDefined\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isDefined = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n};\n\n/**\n * ### .isCallable(value, [message])\n *\n * Asserts that `value` is a callable function.\n *\n *     function serveTea() { return 'cup of tea'; };\n *     assert.isCallable(serveTea, 'great, we can have tea now');\n *\n * @name isCallable\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isCallable = function (value, message) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(value, message, assert.isCallable, true).is.callable;\n};\n\n/**\n * ### .isNotCallable(value, [message])\n *\n * Asserts that `value` is _not_ a callable function.\n *\n *     var serveTea = [ 'heat', 'pour', 'sip' ];\n *     assert.isNotCallable(serveTea, 'great, we have listed the steps');\n *\n * @name isNotCallable\n * @param {unknown} value\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.isNotCallable = function (value, message) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(value, message, assert.isNotCallable, true).is.not.callable;\n};\n\n/**\n * ### .isObject(value, [message])\n *\n * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n * _The assertion does not match subclassed objects._\n *\n *     var selection = { name: 'Chai', serve: 'with spices' };\n *     assert.isObject(selection, 'tea selection is an object');\n *\n * @name isObject\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isObject = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isObject, true).to.be.a('object');\n};\n\n/**\n * ### .isNotObject(value, [message])\n *\n * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n *\n *     var selection = 'chai'\n *     assert.isNotObject(selection, 'tea selection is not an object');\n *     assert.isNotObject(null, 'null is not an object');\n *\n * @name isNotObject\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotObject = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n};\n\n/**\n * ### .isArray(value, [message])\n *\n * Asserts that `value` is an array.\n *\n *     var menu = [ 'green', 'chai', 'oolong' ];\n *     assert.isArray(menu, 'what kind of tea do we want?');\n *\n * @name isArray\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isArray = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isArray, true).to.be.an('array');\n};\n\n/**\n * ### .isNotArray(value, [message])\n *\n * Asserts that `value` is _not_ an array.\n *\n *     var menu = 'green|chai|oolong';\n *     assert.isNotArray(menu, 'what kind of tea do we want?');\n *\n * @name isNotArray\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotArray = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n};\n\n/**\n * ### .isString(value, [message])\n *\n * Asserts that `value` is a string.\n *\n *     var teaOrder = 'chai';\n *     assert.isString(teaOrder, 'order placed');\n *\n * @name isString\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isString = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isString, true).to.be.a('string');\n};\n\n/**\n * ### .isNotString(value, [message])\n *\n * Asserts that `value` is _not_ a string.\n *\n *     var teaOrder = 4;\n *     assert.isNotString(teaOrder, 'order placed');\n *\n * @name isNotString\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotString = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n};\n\n/**\n * ### .isNumber(value, [message])\n *\n * Asserts that `value` is a number.\n *\n *     var cups = 2;\n *     assert.isNumber(cups, 'how many cups');\n *\n * @name isNumber\n * @param {number} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNumber = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n};\n\n/**\n * ### .isNotNumber(value, [message])\n *\n * Asserts that `value` is _not_ a number.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumber(cups, 'how many cups');\n *\n * @name isNotNumber\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNumber = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n};\n\n/**\n * ### .isNumeric(value, [message])\n *\n * Asserts that `value` is a number or BigInt.\n *\n *     var cups = 2;\n *     assert.isNumeric(cups, 'how many cups');\n *\n *     var cups = 10n;\n *     assert.isNumeric(cups, 'how many cups');\n *\n * @name isNumeric\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNumeric = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNumeric, true).is.numeric;\n};\n\n/**\n * ### .isNotNumeric(value, [message])\n *\n * Asserts that `value` is _not_ a number or BigInt.\n *\n *     var cups = '2 cups please';\n *     assert.isNotNumeric(cups, 'how many cups');\n *\n * @name isNotNumeric\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotNumeric = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotNumeric, true).is.not.numeric;\n};\n\n/**\n * ### .isFinite(value, [message])\n *\n * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n *\n *     var cups = 2;\n *     assert.isFinite(cups, 'how many cups');\n *     assert.isFinite(NaN); // throws\n *\n * @name isFinite\n * @param {number} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isFinite = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isFinite, true).to.be.finite;\n};\n\n/**\n * ### .isBoolean(value, [message])\n *\n * Asserts that `value` is a boolean.\n *\n *     var teaReady = true\n *     , teaServed = false;\n *\n *     assert.isBoolean(teaReady, 'is the tea ready');\n *     assert.isBoolean(teaServed, 'has tea been served');\n *\n * @name isBoolean\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isBoolean = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n};\n\n/**\n * ### .isNotBoolean(value, [message])\n *\n * Asserts that `value` is _not_ a boolean.\n *\n *     var teaReady = 'yep'\n *     , teaServed = 'nope';\n *\n *     assert.isNotBoolean(teaReady, 'is the tea ready');\n *     assert.isNotBoolean(teaServed, 'has tea been served');\n *\n * @name isNotBoolean\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.isNotBoolean = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n};\n\n/**\n * ### .typeOf(value, name, [message])\n *\n * Asserts that `value`'s type is `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n *     assert.typeOf('tea', 'string', 'we have a string');\n *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n *     assert.typeOf(null, 'null', 'we have a null');\n *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n *\n * @name typeOf\n * @param {unknown} val\n * @param {string} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.typeOf = function (val, type, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n};\n\n/**\n * ### .notTypeOf(value, name, [message])\n *\n * Asserts that `value`'s type is _not_ `name`, as determined by\n * `Object.prototype.toString`.\n *\n *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n *\n * @name notTypeOf\n * @param {unknown} value\n * @param {string} type\n * @param {string} message\n * @namespace Assert\n * @public\n */\nassert.notTypeOf = function (value, type, message) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(value, message, assert.notTypeOf, true).to.not.be.a(type);\n};\n\n/**\n * ### .instanceOf(object, constructor, [message])\n *\n * Asserts that `value` is an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new Tea('chai');\n *\n *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n *\n * @name instanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.instanceOf = function (val, type, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n};\n\n/**\n * ### .notInstanceOf(object, constructor, [message])\n *\n * Asserts `value` is not an instance of `constructor`.\n *\n *     var Tea = function (name) { this.name = name; }\n *     , chai = new String('chai');\n *\n *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n *\n * @name notInstanceOf\n * @param {object} val\n * @param {object} type\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notInstanceOf = function (val, type, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(\n    type\n  );\n};\n\n/**\n * ### .include(haystack, needle, [message])\n *\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.include([1,2,3], 2, 'array contains value');\n *     assert.include('foobar', 'foo', 'string contains substring');\n *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n *\n * Strict equality (===) is used. When asserting the inclusion of a value in\n * an array, the array is searched for an element that's strictly equal to the\n * given value. When asserting a subset of properties in an object, the object\n * is searched for the given property keys, checking that each one is present\n * and strictly equal to the given property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.include([obj1, obj2], obj1);\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n *\n * @name include\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.include = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.include, true).include(inc);\n};\n\n/**\n * ### .notInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array, a substring in a string, or a subset of\n * properties in an object.\n *\n *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n *\n * Strict equality (===) is used. When asserting the absence of a value in an\n * array, the array is searched to confirm the absence of an element that's\n * strictly equal to the given value. When asserting a subset of properties in\n * an object, the object is searched to confirm that at least one of the given\n * property keys is either not present or not strictly equal to the given\n * property value. For instance:\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notInclude([obj1, obj2], {a: 1});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n *\n * @name notInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n};\n\n/**\n * ### .deepInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` includes `needle`. Can be used to assert the\n * inclusion of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.deepInclude([obj1, obj2], {a: 1});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n *\n * @name deepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n};\n\n/**\n * ### .notDeepInclude(haystack, needle, [message])\n *\n * Asserts that `haystack` does not include `needle`. Can be used to assert\n * the absence of a value in an array or a subset of properties in an object.\n * Deep equality is used.\n *\n *     var obj1 = {a: 1}\n *     , obj2 = {b: 2};\n *     assert.notDeepInclude([obj1, obj2], {a: 9});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n *\n * @name notDeepInclude\n * @param {Array | string} exp\n * @param {unknown} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n};\n\n/**\n * ### .nestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n *\n * @name nestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n};\n\n/**\n * ### .notNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n *\n * @name notNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(\n    inc\n  );\n};\n\n/**\n * ### .deepNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n *\n * @name deepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepNestedInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(\n    inc\n  );\n};\n\n/**\n * ### .notDeepNestedInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while checking for deep equality.\n * Enables the use of dot- and bracket-notation for referencing nested\n * properties.\n * '[]' and '.' in property names can be escaped using double backslashes.\n *\n *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n *\n * @name notDeepNestedInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepNestedInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    exp,\n    msg,\n    assert.notDeepNestedInclude,\n    true\n  ).not.deep.nested.include(inc);\n};\n\n/**\n * ### .ownInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     assert.ownInclude({ a: 1 }, { a: 1 });\n *\n * @name ownInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.ownInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n};\n\n/**\n * ### .notOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' does not include 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties.\n *\n *     Object.prototype.b = 2;\n *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n *\n * @name notOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notOwnInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n};\n\n/**\n * ### .deepOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the inclusion of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n *\n * @name deepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepOwnInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);\n};\n\n/**\n * ### .notDeepOwnInclude(haystack, needle, [message])\n *\n * Asserts that 'haystack' includes 'needle'.\n * Can be used to assert the absence of a subset of properties in an\n * object while ignoring inherited properties and checking for deep equality.\n *\n *     assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n *\n * @name notDeepOwnInclude\n * @param {object} exp\n * @param {object} inc\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepOwnInclude = function (exp, inc, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(\n    inc\n  );\n};\n\n/**\n * ### .match(value, regexp, [message])\n *\n * Asserts that `value` matches the regular expression `regexp`.\n *\n *     assert.match('foobar', /^foo/, 'regexp matches');\n *\n * @name match\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.match = function (exp, re, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.match, true).to.match(re);\n};\n\n/**\n * ### .notMatch(value, regexp, [message])\n *\n * Asserts that `value` does not match the regular expression `regexp`.\n *\n *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n *\n * @name notMatch\n * @param {unknown} exp\n * @param {RegExp} re\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notMatch = function (exp, re, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n};\n\n/**\n * ### .property(object, property, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property`.\n *\n *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n *\n * @name property\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.property = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.property, true).to.have.property(prop);\n};\n\n/**\n * ### .notProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property`.\n *\n *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n *\n * @name notProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notProperty = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);\n};\n\n/**\n * ### .propertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n *\n * @name propertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.propertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);\n};\n\n/**\n * ### .notPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a strict equality check\n * (===).\n *\n *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n *\n * @name notPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(\n    prop,\n    val\n  );\n};\n\n/**\n * ### .deepPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property` with a value given by `value`. Uses a deep equality check.\n *\n *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(\n    prop,\n    val\n  );\n};\n\n/**\n * ### .notDeepPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct or inherited property named\n * by `property` with value given by `value`. Uses a deep equality check.\n *\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *\n * @name notDeepPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notDeepPropertyVal,\n    true\n  ).to.not.have.deep.property(prop, val);\n};\n\n/**\n * ### .ownProperty(object, property, [message])\n *\n * Asserts that `object` has a direct property named by `property`. Inherited\n * properties aren't checked.\n *\n *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n *\n * @name ownProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */\nassert.ownProperty = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);\n};\n\n/**\n * ### .notOwnProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by\n * `property`. Inherited properties aren't checked.\n *\n *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n *     assert.notOwnProperty({}, 'toString');\n *\n * @name notOwnProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @public\n */\nassert.notOwnProperty = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(\n    prop\n  );\n};\n\n/**\n * ### .ownPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a strict equality check (===).\n * Inherited properties aren't checked.\n *\n *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n *\n * @name ownPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.ownPropertyVal = function (obj, prop, value, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(\n    prop,\n    value\n  );\n};\n\n/**\n * ### .notOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a strict equality check\n * (===). Inherited properties aren't checked.\n *\n *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.notOwnPropertyVal = function (obj, prop, value, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notOwnPropertyVal,\n    true\n  ).to.not.have.own.property(prop, value);\n};\n\n/**\n * ### .deepOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a direct property named by `property` and a value\n * equal to the provided `value`. Uses a deep equality check. Inherited\n * properties aren't checked.\n *\n *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n *\n * @name deepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.deepOwnPropertyVal,\n    true\n  ).to.have.deep.own.property(prop, value);\n};\n\n/**\n * ### .notDeepOwnPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a direct property named by `property`\n * with a value equal to the provided `value`. Uses a deep equality check.\n * Inherited properties aren't checked.\n *\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n *\n * @name notDeepOwnPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} value\n * @param {string} msg\n * @public\n */\nassert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notDeepOwnPropertyVal,\n    true\n  ).to.not.have.deep.own.property(prop, value);\n};\n\n/**\n * ### .nestedProperty(object, property, [message])\n *\n * Asserts that `object` has a direct or inherited property named by\n * `property`, which can be a string using dot- and bracket-notation for\n * nested reference.\n *\n *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n *\n * @name nestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedProperty = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(\n    prop\n  );\n};\n\n/**\n * ### .notNestedProperty(object, property, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property`, which\n * can be a string using dot- and bracket-notation for nested reference. The\n * property cannot exist on the object nor anywhere in its prototype chain.\n *\n *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n *\n * @name notNestedProperty\n * @param {object} obj\n * @param {string} prop\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedProperty = function (obj, prop, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notNestedProperty,\n    true\n  ).to.not.have.nested.property(prop);\n};\n\n/**\n * ### .nestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a property named by `property` with value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a strict equality check (===).\n *\n *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n *\n * @name nestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.nestedPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.nestedPropertyVal,\n    true\n  ).to.have.nested.property(prop, val);\n};\n\n/**\n * ### .notNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a strict equality check (===).\n *\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n *\n * @name notNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notNestedPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notNestedPropertyVal,\n    true\n  ).to.not.have.nested.property(prop, val);\n};\n\n/**\n * ### .deepNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` has a property named by `property` with a value given\n * by `value`. `property` can use dot- and bracket-notation for nested\n * reference. Uses a deep equality check.\n *\n *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n *\n * @name deepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.deepNestedPropertyVal,\n    true\n  ).to.have.deep.nested.property(prop, val);\n};\n\n/**\n * ### .notDeepNestedPropertyVal(object, property, value, [message])\n *\n * Asserts that `object` does _not_ have a property named by `property` with\n * value given by `value`. `property` can use dot- and bracket-notation for\n * nested reference. Uses a deep equality check.\n *\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n *\n * @name notDeepNestedPropertyVal\n * @param {object} obj\n * @param {string} prop\n * @param {unknown} val\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.notDeepNestedPropertyVal,\n    true\n  ).to.not.have.deep.nested.property(prop, val);\n};\n\n/**\n * ### .lengthOf(object, length, [message])\n *\n * Asserts that `object` has a `length` or `size` with the expected value.\n *\n *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n *     assert.lengthOf('foobar', 6, 'string has length of 6');\n *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n *\n * @name lengthOf\n * @param {unknown} exp\n * @param {number} len\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.lengthOf = function (exp, len, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n};\n\n/**\n * ### .hasAnyKeys(object, [keys], [message])\n *\n * Asserts that `object` has at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAnyKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAnyKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n};\n\n/**\n * ### .hasAllKeys(object, [keys], [message])\n *\n * Asserts that `object` has all and only all of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name hasAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAllKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n};\n\n/**\n * ### .containsAllKeys(object, [keys], [message])\n *\n * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}]);\n *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n *\n * @name containsAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.containsAllKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(\n    keys\n  );\n};\n\n/**\n * ### .doesNotHaveAnyKeys(object, [keys], [message])\n *\n * Asserts that `object` has none of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAnyKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(\n    keys\n  );\n};\n\n/**\n * ### .doesNotHaveAllKeys(object, [keys], [message])\n *\n * Asserts that `object` does not have at least one of the `keys` provided.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{one: 'two'}, 'example']);\n *\n * @name doesNotHaveAllKeys\n * @param {unknown} obj\n * @param {string[]} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAllKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(\n    keys\n  );\n};\n\n/**\n * ### .hasAnyDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAnyDeepKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(\n    keys\n  );\n};\n\n/**\n * ### .hasAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has all and only all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name hasAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.hasAllDeepKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(\n    keys\n  );\n};\n\n/**\n * ### .containsAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` contains all of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n *\n * @name containsAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.containsAllDeepKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.containsAllDeepKeys,\n    true\n  ).to.contain.all.deep.keys(keys);\n};\n\n/**\n * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` has none of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAnyDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.doesNotHaveAnyDeepKeys,\n    true\n  ).to.not.have.any.deep.keys(keys);\n};\n\n/**\n * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n *\n * Asserts that `object` does not have at least one of the `keys` provided.\n * Since Sets and Maps can have objects as keys you can use this assertion to perform\n * a deep comparison.\n * You can also provide a single object instead of a `keys` array and its keys\n * will be used as the expected set of keys.\n *\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n *\n * @name doesNotHaveAllDeepKeys\n * @param {unknown} obj\n * @param {Array | object} keys\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    obj,\n    msg,\n    assert.doesNotHaveAllDeepKeys,\n    true\n  ).to.not.have.all.deep.keys(keys);\n};\n\n/**\n * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n *\n * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n * message matching `errMsgMatcher`.\n *\n *     assert.throws(fn, 'Error thrown must have this msg');\n *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n *     assert.throws(fn, ReferenceError);\n *     assert.throws(fn, errorInstance);\n *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n *\n * @name throws\n * @alias throw\n * @alias Throw\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} msg\n * @returns {unknown}\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @namespace Assert\n * @public\n */\nassert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n  if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  let assertErr = new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.throws, true).to.throw(\n    errorLike,\n    errMsgMatcher\n  );\n  return (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag)(assertErr, 'object');\n};\n\n/**\n * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n *\n * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n * instance of `errorLike`.\n * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n * instance as `errorLike`.\n * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n * message matching `errMsgMatcher`.\n *\n *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n *     assert.doesNotThrow(fn, Error);\n *     assert.doesNotThrow(fn, errorInstance);\n *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n *\n * @name doesNotThrow\n * @param {Function} fn\n * @param {Error} errorLike\n * @param {RegExp | string} errMsgMatcher\n * @param {string} message\n * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n * @namespace Assert\n * @public\n */\nassert.doesNotThrow = function (fn, errorLike, errMsgMatcher, message) {\n  if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n    errMsgMatcher = errorLike;\n    errorLike = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, message, assert.doesNotThrow, true).to.not.throw(\n    errorLike,\n    errMsgMatcher\n  );\n};\n\n/**\n * ### .operator(val1, operator, val2, [message])\n *\n * Compares two values using `operator`.\n *\n *     assert.operator(1, '<', 2, 'everything is ok');\n *     assert.operator(1, '>', 2, 'this will fail');\n *\n * @name operator\n * @param {unknown} val\n * @param {string} operator\n * @param {unknown} val2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.operator = function (val, operator, val2, msg) {\n  let ok;\n  switch (operator) {\n    case '==':\n      ok = val == val2;\n      break;\n    case '===':\n      ok = val === val2;\n      break;\n    case '>':\n      ok = val > val2;\n      break;\n    case '>=':\n      ok = val >= val2;\n      break;\n    case '<':\n      ok = val < val2;\n      break;\n    case '<=':\n      ok = val <= val2;\n      break;\n    case '!=':\n      ok = val != val2;\n      break;\n    case '!==':\n      ok = val !== val2;\n      break;\n    default:\n      msg = msg ? msg + ': ' : msg;\n      throw new assertion_error__WEBPACK_IMPORTED_MODULE_3__.AssertionError(\n        msg + 'Invalid operator \"' + operator + '\"',\n        undefined,\n        assert.operator\n      );\n  }\n  let test = new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(ok, msg, assert.operator, true);\n  test.assert(\n    true === (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.flag)(test, 'object'),\n    'expected ' + (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(val) + ' to be ' + operator + ' ' + (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(val2),\n    'expected ' + (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(val) + ' to not be ' + operator + ' ' + (0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(val2)\n  );\n};\n\n/**\n * ### .closeTo(actual, expected, delta, [message])\n *\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n *\n * @name closeTo\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.closeTo = function (act, exp, delta, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n};\n\n/**\n * ### .approximately(actual, expected, delta, [message])\n *\n * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n *\n *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n *\n * @name approximately\n * @param {number} act\n * @param {number} exp\n * @param {number} delta\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.approximately = function (act, exp, delta, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(act, msg, assert.approximately, true).to.be.approximately(\n    exp,\n    delta\n  );\n};\n\n/**\n * ### .sameMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * strict equality check (===).\n *\n *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n *\n * @name sameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);\n};\n\n/**\n * ### .notSameMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a strict equality check (===).\n *\n *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n *\n * @name notSameMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.notSameMembers,\n    true\n  ).to.not.have.same.members(set2);\n};\n\n/**\n * ### .sameDeepMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in any order. Uses a\n * deep equality check.\n *\n *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n *\n * @name sameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameDeepMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.sameDeepMembers,\n    true\n  ).to.have.same.deep.members(set2);\n};\n\n/**\n * ### .notSameDeepMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in any order.\n * Uses a deep equality check.\n *\n *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n *\n * @name notSameDeepMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameDeepMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.notSameDeepMembers,\n    true\n  ).to.not.have.same.deep.members(set2);\n};\n\n/**\n * ### .sameOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a strict equality check (===).\n *\n *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n *\n * @name sameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameOrderedMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.sameOrderedMembers,\n    true\n  ).to.have.same.ordered.members(set2);\n};\n\n/**\n * ### .notSameOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a strict equality check (===).\n *\n *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n *\n * @name notSameOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameOrderedMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.notSameOrderedMembers,\n    true\n  ).to.not.have.same.ordered.members(set2);\n};\n\n/**\n * ### .sameDeepOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` have the same members in the same order.\n * Uses a deep equality check.\n *\n *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n *\n * @name sameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.sameDeepOrderedMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.sameDeepOrderedMembers,\n    true\n  ).to.have.same.deep.ordered.members(set2);\n};\n\n/**\n * ### .notSameDeepOrderedMembers(set1, set2, [message])\n *\n * Asserts that `set1` and `set2` don't have the same members in the same\n * order. Uses a deep equality check.\n *\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n *\n * @name notSameDeepOrderedMembers\n * @param {Array} set1\n * @param {Array} set2\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    set1,\n    msg,\n    assert.notSameDeepOrderedMembers,\n    true\n  ).to.not.have.same.deep.ordered.members(set2);\n};\n\n/**\n * ### .includeMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n *\n * @name includeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(superset, msg, assert.includeMembers, true).to.include.members(\n    subset\n  );\n};\n\n/**\n * ### .notIncludeMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * strict equality check (===). Duplicates are ignored.\n *\n *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n *\n * @name notIncludeMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.notIncludeMembers,\n    true\n  ).to.not.include.members(subset);\n};\n\n/**\n * ### .includeDeepMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in any order. Uses a deep\n * equality check. Duplicates are ignored.\n *\n *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n *\n * @name includeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeDeepMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.includeDeepMembers,\n    true\n  ).to.include.deep.members(subset);\n};\n\n/**\n * ### .notIncludeDeepMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in any order. Uses a\n * deep equality check. Duplicates are ignored.\n *\n *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n *\n * @name notIncludeDeepMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeDeepMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.notIncludeDeepMembers,\n    true\n  ).to.not.include.deep.members(subset);\n};\n\n/**\n * ### .includeOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n *\n * @name includeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeOrderedMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.includeOrderedMembers,\n    true\n  ).to.include.ordered.members(subset);\n};\n\n/**\n * ### .notIncludeOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a strict equality\n * check (===).\n *\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n *\n * @name notIncludeOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeOrderedMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.notIncludeOrderedMembers,\n    true\n  ).to.not.include.ordered.members(subset);\n};\n\n/**\n * ### .includeDeepOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` is included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n *\n * @name includeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.includeDeepOrderedMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.includeDeepOrderedMembers,\n    true\n  ).to.include.deep.ordered.members(subset);\n};\n\n/**\n * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n *\n * Asserts that `subset` isn't included in `superset` in the same order\n * beginning with the first element in `superset`. Uses a deep equality\n * check.\n *\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n *\n * @name notIncludeDeepOrderedMembers\n * @param {Array} superset\n * @param {Array} subset\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(\n    superset,\n    msg,\n    assert.notIncludeDeepOrderedMembers,\n    true\n  ).to.not.include.deep.ordered.members(subset);\n};\n\n/**\n * ### .oneOf(inList, list, [message])\n *\n * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n *\n *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n *\n * @name oneOf\n * @param {*} inList\n * @param {Array<*>} list\n * @param {string} msg\n * @namespace Assert\n * @public\n */\nassert.oneOf = function (inList, list, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n};\n\n/**\n * ### isIterable(obj, [message])\n *\n * Asserts that the target is an iterable, which means that it has a iterator\n * with the exception of `String.`\n *\n *     assert.isIterable([1, 2]);\n *\n * @param {unknown} obj\n * @param {string} [msg]\n * @namespace Assert\n * @public\n */\nassert.isIterable = function (obj, msg) {\n  if (obj == undefined || !obj[Symbol.iterator]) {\n    msg = msg\n      ? `${msg} expected ${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(obj)} to be an iterable`\n      : `expected ${(0,_utils_index_js__WEBPACK_IMPORTED_MODULE_2__.inspect)(obj)} to be an iterable`;\n\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_3__.AssertionError(msg, undefined, assert.isIterable);\n  }\n};\n\n/**\n * ### .changes(function, object, property, [message])\n *\n * Asserts that a function changes the value of a property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 22 };\n *     assert.changes(fn, obj, 'val');\n *\n * @name changes\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.changes = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n};\n\n/**\n * ### .changesBy(function, object, property, delta, [message])\n *\n * Asserts that a function changes the value of a property by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 2 };\n *     assert.changesBy(fn, obj, 'val', 2);\n *\n * @name changesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta msg change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.changesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);\n};\n\n/**\n * ### .doesNotChange(function, object, property, [message])\n *\n * Asserts that a function does not change the value of a property.\n *\n *   var obj = { val: 10 };\n *   var fn = function() { console.log('foo'); };\n *   assert.doesNotChange(fn, obj, 'val');\n *\n * @name doesNotChange\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {string} msg _optional_\n * @returns {unknown}\n * @namespace Assert\n * @public\n */\nassert.doesNotChange = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.doesNotChange, true).to.not.change(\n    obj,\n    prop\n  );\n};\n\n/**\n * ### .changesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.changesButNotBy(fn, obj, 'val', 5);\n *\n * @name changesButNotBy\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n * @namespace Assert\n * @public\n */\nassert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.changesButNotBy, true).to\n    .change(obj, prop)\n    .but.not.by(delta);\n};\n\n/**\n * ### .increases(function, object, property, [message])\n *\n * Asserts that a function increases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 13 };\n *     assert.increases(fn, obj, 'val');\n *\n * @public\n * @namespace Assert\n * @name increases\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {string} msg - message _optional_\n * @returns {unknown}\n */\nassert.increases = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);\n};\n\n/**\n * ### .increasesBy(function, object, property, delta, [message])\n *\n * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val += 10 };\n *     assert.increasesBy(fn, obj, 'val', 10);\n *\n * @public\n * @name increasesBy\n * @namespace Assert\n * @param {Function} fn - modifier function\n * @param {object} obj - object or getter function\n * @param {string} prop - property name _optional_\n * @param {number} delta - change amount (delta)\n * @param {string} msg - message _optional_\n */\nassert.increasesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.increasesBy, true).to\n    .increase(obj, prop)\n    .by(delta);\n};\n\n/**\n * ### .doesNotIncrease(function, object, property, [message])\n *\n * Asserts that a function does not increase a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 8 };\n *     assert.doesNotIncrease(fn, obj, 'val');\n *\n * @name doesNotIncrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotIncrease = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(\n    obj,\n    prop\n  );\n};\n\n/**\n * ### .increasesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.increasesButNotBy(fn, obj, 'val', 10);\n *\n * @name increasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.increasesButNotBy, true).to\n    .increase(obj, prop)\n    .but.not.by(delta);\n};\n\n/**\n * ### .decreases(function, object, property, [message])\n *\n * Asserts that a function decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreases(fn, obj, 'val');\n *\n * @name decreases\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreases = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);\n};\n\n/**\n * ### .decreasesBy(function, object, property, delta, [message])\n *\n * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val -= 5 };\n *     assert.decreasesBy(fn, obj, 'val', 5);\n *\n * @name decreasesBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreasesBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.decreasesBy, true).to\n    .decrease(obj, prop)\n    .by(delta);\n};\n\n/**\n * ### .doesNotDecrease(function, object, property, [message])\n *\n * Asserts that a function does not decreases a numeric object property.\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 15 };\n *     assert.doesNotDecrease(fn, obj, 'val');\n *\n * @name doesNotDecrease\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotDecrease = function (fn, obj, prop, msg) {\n  if (arguments.length === 3 && typeof obj === 'function') {\n    msg = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(\n    obj,\n    prop\n  );\n};\n\n/**\n * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n *\n * @name doesNotDecreaseBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @returns {Assertion}\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not\n    .decrease(obj, prop)\n    .by(delta);\n};\n\n/**\n * ### .decreasesButNotBy(function, object, property, delta, [message])\n *\n * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n *\n *     var obj = { val: 10 };\n *     var fn = function() { obj.val = 5 };\n *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n *\n * @name decreasesButNotBy\n * @param {Function} fn modifier function\n * @param {object} obj object or getter function\n * @param {string} prop property name _optional_\n * @param {number} delta change amount (delta)\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n  if (arguments.length === 4 && typeof obj === 'function') {\n    let tmpMsg = delta;\n    delta = prop;\n    msg = tmpMsg;\n  } else if (arguments.length === 3) {\n    delta = prop;\n    prop = null;\n  }\n\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(fn, msg, assert.decreasesButNotBy, true).to\n    .decrease(obj, prop)\n    .but.not.by(delta);\n};\n\n/**\n * ### .ifError(object)\n *\n * Asserts if value is not a false value, and throws if it is a true value.\n * This is added to allow for chai to be a drop-in replacement for Node's\n * assert class.\n *\n *     var err = new Error('I am a custom error');\n *     assert.ifError(err); // Rethrows err!\n *\n * @name ifError\n * @param {object} val\n * @namespace Assert\n * @public\n */\nassert.ifError = function (val) {\n  if (val) {\n    throw val;\n  }\n};\n\n/**\n * ### .isExtensible(object)\n *\n * Asserts that `object` is extensible (can have new properties added to it).\n *\n *     assert.isExtensible({});\n *\n * @name isExtensible\n * @alias extensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isExtensible = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n};\n\n/**\n * ### .isNotExtensible(object)\n *\n * Asserts that `object` is _not_ extensible.\n *\n *     var nonExtensibleObject = Object.preventExtensions({});\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.freeze({});\n *\n *     assert.isNotExtensible(nonExtensibleObject);\n *     assert.isNotExtensible(sealedObject);\n *     assert.isNotExtensible(frozenObject);\n *\n * @name isNotExtensible\n * @alias notExtensible\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotExtensible = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n};\n\n/**\n * ### .isSealed(object)\n *\n * Asserts that `object` is sealed (cannot have new properties added to it\n * and its existing properties cannot be removed).\n *\n *     var sealedObject = Object.seal({});\n *     var frozenObject = Object.seal({});\n *\n *     assert.isSealed(sealedObject);\n *     assert.isSealed(frozenObject);\n *\n * @name isSealed\n * @alias sealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isSealed = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n};\n\n/**\n * ### .isNotSealed(object)\n *\n * Asserts that `object` is _not_ sealed.\n *\n *     assert.isNotSealed({});\n *\n * @name isNotSealed\n * @alias notSealed\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotSealed = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n};\n\n/**\n * ### .isFrozen(object)\n *\n * Asserts that `object` is frozen (cannot have new properties added to it\n * and its existing properties cannot be modified).\n *\n *     var frozenObject = Object.freeze({});\n *     assert.frozen(frozenObject);\n *\n * @name isFrozen\n * @alias frozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isFrozen = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n};\n\n/**\n * ### .isNotFrozen(object)\n *\n * Asserts that `object` is _not_ frozen.\n *\n *     assert.isNotFrozen({});\n *\n * @name isNotFrozen\n * @alias notFrozen\n * @param {object} obj\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotFrozen = function (obj, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n};\n\n/**\n * ### .isEmpty(target)\n *\n * Asserts that the target does not contain any values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isEmpty([]);\n *     assert.isEmpty('');\n *     assert.isEmpty(new Map);\n *     assert.isEmpty({});\n *\n * @name isEmpty\n * @alias empty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isEmpty = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n};\n\n/**\n * ### .isNotEmpty(target)\n *\n * Asserts that the target contains values.\n * For arrays and strings, it checks the `length` property.\n * For `Map` and `Set` instances, it checks the `size` property.\n * For non-function objects, it gets the count of own\n * enumerable string keys.\n *\n *     assert.isNotEmpty([1, 2]);\n *     assert.isNotEmpty('34');\n *     assert.isNotEmpty(new Set([5, 6]));\n *     assert.isNotEmpty({ key: 7 });\n *\n * @name isNotEmpty\n * @alias notEmpty\n * @param {object | Array | string | Map | Set} val\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.isNotEmpty = function (val, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n};\n\n/**\n * ### .containsSubset(target, subset)\n *\n * Asserts that the target primitive/object/array structure deeply contains all provided fields\n * at the same key/depth as the provided structure.\n *\n * When comparing arrays, the target must contain the subset of at least one of each object/value in the subset array.\n * Order does not matter.\n *\n *     assert.containsSubset(\n *         [{name: {first: \"John\", last: \"Smith\"}}, {name: {first: \"Jane\", last: \"Doe\"}}],\n *         [{name: {first: \"Jane\"}}]\n *     );\n *\n * @name containsSubset\n * @alias containSubset\n * @param {unknown} val\n * @param {unknown} exp\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.containsSubset = function (val, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg).to.containSubset(exp);\n};\n\n/**\n * ### .doesNotContainSubset(target, subset)\n *\n * The negation of assert.containsSubset.\n *\n * @name doesNotContainSubset\n * @param {unknown} val\n * @param {unknown} exp\n * @param {string} msg _optional_\n * @namespace Assert\n * @public\n */\nassert.doesNotContainSubset = function (val, exp, msg) {\n  new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, msg).to.not.containSubset(exp);\n};\n\n/**\n * Aliases.\n *\n * @param {unknown} name\n * @param {unknown} as\n * @returns {unknown}\n */\nconst aliases = [\n  ['isOk', 'ok'],\n  ['isNotOk', 'notOk'],\n  ['throws', 'throw'],\n  ['throws', 'Throw'],\n  ['isExtensible', 'extensible'],\n  ['isNotExtensible', 'notExtensible'],\n  ['isSealed', 'sealed'],\n  ['isNotSealed', 'notSealed'],\n  ['isFrozen', 'frozen'],\n  ['isNotFrozen', 'notFrozen'],\n  ['isEmpty', 'empty'],\n  ['isNotEmpty', 'notEmpty'],\n  ['isCallable', 'isFunction'],\n  ['isNotCallable', 'isNotFunction'],\n  ['containsSubset', 'containSubset']\n];\nfor (const [name, as] of aliases) {\n  assert[as] = assert[name];\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/interface/assert.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/expect.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/expect.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expect: () => (/* binding */ expect)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../index.js */ \"./node_modules/chai/index.js\");\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n/**\n * @param {unknown} val\n * @param {string} message\n * @returns {Assertion}\n */\nfunction expect(val, message) {\n  return new _assertion_js__WEBPACK_IMPORTED_MODULE_1__.Assertion(val, message);\n}\n\n\n\n/**\n * ### .fail([message])\n * ### .fail(actual, expected, [message], [operator])\n *\n * Throw a failure.\n *\n *     expect.fail();\n *     expect.fail(\"custom error message\");\n *     expect.fail(1, 2);\n *     expect.fail(1, 2, \"custom error message\");\n *     expect.fail(1, 2, \"custom error message\", \">\");\n *     expect.fail(1, 2, undefined, \">\");\n *\n * @name fail\n * @param {unknown} actual\n * @param {unknown} expected\n * @param {string} message\n * @param {string} operator\n * @namespace expect\n * @public\n */\nexpect.fail = function (actual, expected, message, operator) {\n  if (arguments.length < 2) {\n    message = actual;\n    actual = undefined;\n  }\n\n  message = message || 'expect.fail()';\n  throw new assertion_error__WEBPACK_IMPORTED_MODULE_2__.AssertionError(\n    message,\n    {\n      actual: actual,\n      expected: expected,\n      operator: operator\n    },\n    _index_js__WEBPACK_IMPORTED_MODULE_0__.expect.fail\n  );\n};\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/interface/expect.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/interface/should.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/interface/should.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Should: () => (/* binding */ Should),\n/* harmony export */   should: () => (/* binding */ should)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n/**\n * @returns {void}\n */\nfunction loadShould() {\n  // explicitly define this method as function as to have it's name to include as `ssfi`\n  /**\n   * @returns {Assertion}\n   */\n  function shouldGetter() {\n    if (\n      this instanceof String ||\n      this instanceof Number ||\n      this instanceof Boolean ||\n      (typeof Symbol === 'function' && this instanceof Symbol) ||\n      (typeof BigInt === 'function' && this instanceof BigInt)\n    ) {\n      return new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(this.valueOf(), null, shouldGetter);\n    }\n    return new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(this, null, shouldGetter);\n  }\n  /**\n   * @param {unknown} value\n   */\n  function shouldSetter(value) {\n    // See https://github.com/chaijs/chai/issues/86: this makes\n    // `whatever.should = someValue` actually set `someValue`, which is\n    // especially useful for `global.should = require('chai').should()`.\n    //\n    // Note that we have to use [[DefineProperty]] instead of [[Put]]\n    // since otherwise we would trigger this very setter!\n    Object.defineProperty(this, 'should', {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  }\n  // modify Object.prototype to have `should`\n  Object.defineProperty(Object.prototype, 'should', {\n    set: shouldSetter,\n    get: shouldGetter,\n    configurable: true\n  });\n\n  let should = {};\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     should.fail();\n   *     should.fail(\"custom error message\");\n   *     should.fail(1, 2);\n   *     should.fail(1, 2, \"custom error message\");\n   *     should.fail(1, 2, \"custom error message\", \">\");\n   *     should.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} message\n   * @param {string} operator\n   * @namespace BDD\n   * @public\n   */\n  should.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n      message = actual;\n      actual = undefined;\n    }\n\n    message = message || 'should.fail()';\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_1__.AssertionError(\n      message,\n      {\n        actual: actual,\n        expected: expected,\n        operator: operator\n      },\n      should.fail\n    );\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     should.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} message\n   * @namespace Should\n   * @public\n   */\n  should.equal = function (actual, expected, message) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(actual, message).to.equal(expected);\n  };\n\n  /**\n   * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n   *\n   * Asserts that `function` will throw an error that is an instance of\n   * `constructor`, or alternately that it will throw an error with message\n   * matching `regexp`.\n   *\n   *     should.throw(fn, 'function throws a reference error');\n   *     should.throw(fn, /function throws a reference error/);\n   *     should.throw(fn, ReferenceError);\n   *     should.throw(fn, ReferenceError, 'function throws a reference error');\n   *     should.throw(fn, ReferenceError, /function throws a reference error/);\n   *\n   * @name throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {Error} errt\n   * @param {RegExp} errs\n   * @param {string} msg\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Should\n   * @public\n   */\n  should.Throw = function (fn, errt, errs, msg) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(fn, msg).to.Throw(errt, errs);\n  };\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *     should.exist(foo, 'foo exists');\n   *\n   * @param {unknown} val\n   * @param {string} msg\n   * @name exist\n   * @namespace Should\n   * @public\n   */\n  should.exist = function (val, msg) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(val, msg).to.exist;\n  };\n\n  // negation\n  should.not = {};\n\n  /**\n   * ### .not.equal(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     should.not.equal(3, 4, 'these numbers are not equal');\n   *\n   * @name not.equal\n   * @param {unknown} actual\n   * @param {unknown} expected\n   * @param {string} msg\n   * @namespace Should\n   * @public\n   */\n  should.not.equal = function (actual, expected, msg) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(actual, msg).to.not.equal(expected);\n  };\n\n  /**\n   * ### .throw(function, [constructor/regexp], [message])\n   *\n   * Asserts that `function` will _not_ throw an error that is an instance of\n   * `constructor`, or alternately that it will not throw an error with message\n   * matching `regexp`.\n   *\n   *     should.not.throw(fn, Error, 'function does not throw');\n   *\n   * @name not.throw\n   * @alias not.Throw\n   * @param {Function} fn\n   * @param {Error} errt\n   * @param {RegExp} errs\n   * @param {string} msg\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Should\n   * @public\n   */\n  should.not.Throw = function (fn, errt, errs, msg) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(fn, msg).to.not.Throw(errt, errs);\n  };\n\n  /**\n   * ### .not.exist\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var bar = null;\n   *     should.not.exist(bar, 'bar does not exist');\n   *\n   * @namespace Should\n   * @name not.exist\n   * @param {unknown} val\n   * @param {string} msg\n   * @public\n   */\n  should.not.exist = function (val, msg) {\n    new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion(val, msg).to.not.exist;\n  };\n\n  should['throw'] = should['Throw'];\n  should.not['throw'] = should.not['Throw'];\n\n  return should;\n}\n\nconst should = loadShould;\nconst Should = loadShould;\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/interface/should.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addChainableMethod.js":
/*!****************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addChainableMethod.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addChainableMethod: () => (/* binding */ addChainableMethod)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _addLengthGuard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addLengthGuard.js */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _proxify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proxify.js */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n\n/**\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nlet canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nlet testFn = function () {};\nlet excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {\n  let propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object') return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nlet call = Function.prototype.call,\n  apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @public\n */\nfunction addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () {};\n  }\n\n  let chainableBehavior = {\n    method: method,\n    chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name, {\n    get: function chainableMethodGetter() {\n      chainableBehavior.chainingBehavior.call(this);\n\n      let chainableMethodWrapper = function () {\n        // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n        // function to be the starting point for removing implementation\n        // frames from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set.\n        //\n        // If the `lockSsfi` flag is set, then this assertion is being\n        // invoked from inside of another assertion. In this case, the `ssfi`\n        // flag has already been set by the outer assertion.\n        //\n        // Note that overwriting a chainable method merely replaces the saved\n        // methods in `ctx.__methods` instead of completely replacing the\n        // overwritten assertion. Therefore, an overwriting assertion won't\n        // set the `ssfi` or `lockSsfi` flags.\n        if (!(0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'lockSsfi')) {\n          (0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'ssfi', chainableMethodWrapper);\n        }\n\n        let result = chainableBehavior.method.apply(this, arguments);\n        if (result !== undefined) {\n          return result;\n        }\n\n        let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n        (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_4__.transferFlags)(this, newAssertion);\n        return newAssertion;\n      };\n\n      (0,_addLengthGuard_js__WEBPACK_IMPORTED_MODULE_1__.addLengthGuard)(chainableMethodWrapper, name, true);\n\n      // Use `Object.setPrototypeOf` if available\n      if (canSetPrototype) {\n        // Inherit all properties from the object by replacing the `Function` prototype\n        let prototype = Object.create(this);\n        // Restore the `call` and `apply` methods from `Function`\n        prototype.call = call;\n        prototype.apply = apply;\n        Object.setPrototypeOf(chainableMethodWrapper, prototype);\n      }\n      // Otherwise, redefine all properties (slow!)\n      else {\n        let asserterNames = Object.getOwnPropertyNames(ctx);\n        asserterNames.forEach(function (asserterName) {\n          if (excludeNames.indexOf(asserterName) !== -1) {\n            return;\n          }\n\n          let pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n          Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n        });\n      }\n\n      (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_4__.transferFlags)(this, chainableMethodWrapper);\n      return (0,_proxify_js__WEBPACK_IMPORTED_MODULE_3__.proxify)(chainableMethodWrapper);\n    },\n    configurable: true\n  });\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/addChainableMethod.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addLengthGuard.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addLengthGuard.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLengthGuard: () => (/* binding */ addLengthGuard)\n/* harmony export */ });\nconst fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {string} assertionName\n * @param {boolean} isChainable\n * @returns {unknown}\n * @namespace Utils\n * @name addLengthGuard\n */\nfunction addLengthGuard(fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error(\n          'Invalid Chai property: ' +\n            assertionName +\n            '.length. Due' +\n            ' to a compatibility issue, \"length\" cannot directly follow \"' +\n            assertionName +\n            '\". Use \"' +\n            assertionName +\n            '.lengthOf\" instead.'\n        );\n      }\n\n      throw Error(\n        'Invalid Chai property: ' +\n          assertionName +\n          '.length. See' +\n          ' docs for proper usage of \"' +\n          assertionName +\n          '\".'\n      );\n    }\n  });\n\n  return fn;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/addLengthGuard.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addMethod.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addMethod.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMethod: () => (/* binding */ addMethod)\n/* harmony export */ });\n/* harmony import */ var _addLengthGuard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./addLengthGuard.js */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _proxify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proxify.js */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {object} ctx object to which the method is added\n * @param {string} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @public\n */\nfunction addMethod(ctx, name, method) {\n  let methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!(0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi')) {\n      (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'ssfi', methodWrapper);\n    }\n\n    let result = method.apply(this, arguments);\n    if (result !== undefined) return result;\n\n    let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_4__.Assertion();\n    (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_3__.transferFlags)(this, newAssertion);\n    return newAssertion;\n  };\n\n  (0,_addLengthGuard_js__WEBPACK_IMPORTED_MODULE_0__.addLengthGuard)(methodWrapper, name, false);\n  ctx[name] = (0,_proxify_js__WEBPACK_IMPORTED_MODULE_2__.proxify)(methodWrapper, name);\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/addMethod.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/addProperty.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/addProperty.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addProperty: () => (/* binding */ addProperty)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isProxyEnabled.js */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *         var obj = utils.flag(this, 'object');\n *         new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {object} ctx object to which the property is added\n * @param {string} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @public\n */\nfunction addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name, {\n    get: function propertyGetter() {\n      // Setting the `ssfi` flag to `propertyGetter` causes this function to\n      // be the starting point for removing implementation frames from the\n      // stack trace of a failed assertion.\n      //\n      // However, we only want to use this function as the starting point if\n      // the `lockSsfi` flag isn't set and proxy protection is disabled.\n      //\n      // If the `lockSsfi` flag is set, then either this assertion has been\n      // overwritten by another assertion, or this assertion is being invoked\n      // from inside of another assertion. In the first case, the `ssfi` flag\n      // has already been set by the overwriting assertion. In the second\n      // case, the `ssfi` flag has already been set by the outer assertion.\n      //\n      // If proxy protection is enabled, then the `ssfi` flag has already been\n      // set by the proxy getter.\n      if (!(0,_isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_2__.isProxyEnabled)() && !(0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi')) {\n        (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'ssfi', propertyGetter);\n      }\n\n      let result = getter.call(this);\n      if (result !== undefined) return result;\n\n      let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n      (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_3__.transferFlags)(this, newAssertion);\n      return newAssertion;\n    },\n    configurable: true\n  });\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/addProperty.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/compareByInspect.js":
/*!**************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/compareByInspect.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareByInspect: () => (/* binding */ compareByInspect)\n/* harmony export */ });\n/* harmony import */ var _inspect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect.js */ \"./node_modules/chai/lib/chai/utils/inspect.js\");\n/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {unknown} a first element to compare\n * @param {unknown} b second element to compare\n * @returns {number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @public\n */\nfunction compareByInspect(a, b) {\n  return (0,_inspect_js__WEBPACK_IMPORTED_MODULE_0__.inspect)(a) < (0,_inspect_js__WEBPACK_IMPORTED_MODULE_0__.inspect)(b) ? -1 : 1;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/compareByInspect.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/expectTypes.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/expectTypes.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   expectTypes: () => (/* binding */ expectTypes)\n/* harmony export */ });\n/* harmony import */ var assertion_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assertion-error */ \"./node_modules/assertion-error/index.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _type_detect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-detect.js */ \"./node_modules/chai/lib/chai/utils/type-detect.js\");\n/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {unknown} obj constructed Assertion\n * @param {Array} types A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @public\n */\nfunction expectTypes(obj, types) {\n  let flagMsg = (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(obj, 'message');\n  let ssfi = (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(obj, 'object');\n  types = types.map(function (t) {\n    return t.toLowerCase();\n  });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  let str = types\n    .map(function (t, index) {\n      let art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';\n      let or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n      return or + art + ' ' + t;\n    })\n    .join(', ');\n\n  let objType = (0,_type_detect_js__WEBPACK_IMPORTED_MODULE_2__.type)(obj).toLowerCase();\n\n  if (\n    !types.some(function (expected) {\n      return objType === expected;\n    })\n  ) {\n    throw new assertion_error__WEBPACK_IMPORTED_MODULE_0__.AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/expectTypes.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/flag.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/flag.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flag: () => (/* binding */ flag)\n/* harmony export */ });\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @template {{__flags?: {[key: PropertyKey]: unknown}}} T\n * @param {T} obj object constructed Assertion\n * @param {string} key\n * @param {unknown} [value]\n * @namespace Utils\n * @name flag\n * @returns {unknown | undefined}\n * @private\n */\nfunction flag(obj, key, value) {\n  let flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/flag.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getActual.js":
/*!*******************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getActual.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActual: () => (/* binding */ getActual)\n/* harmony export */ });\n/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @namespace Utils\n * @name getActual\n */\nfunction getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getActual.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getMessage.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getMessage.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMessage: () => (/* binding */ getMessage)\n/* harmony export */ });\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _getActual_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getActual.js */ \"./node_modules/chai/lib/chai/utils/getActual.js\");\n/* harmony import */ var _objDisplay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./objDisplay.js */ \"./node_modules/chai/lib/chai/utils/objDisplay.js\");\n/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {object} obj object (constructed Assertion)\n * @param {IArguments} args chai.Assertion.prototype.assert arguments\n * @returns {string}\n * @namespace Utils\n * @name getMessage\n * @public\n */\nfunction getMessage(obj, args) {\n  let negate = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'negate');\n  let val = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'object');\n  let expected = args[3];\n  let actual = (0,_getActual_js__WEBPACK_IMPORTED_MODULE_1__.getActual)(obj, args);\n  let msg = negate ? args[2] : args[1];\n  let flagMsg = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'message');\n\n  if (typeof msg === 'function') msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () {\n      return (0,_objDisplay_js__WEBPACK_IMPORTED_MODULE_2__.objDisplay)(val);\n    })\n    .replace(/#\\{act\\}/g, function () {\n      return (0,_objDisplay_js__WEBPACK_IMPORTED_MODULE_2__.objDisplay)(actual);\n    })\n    .replace(/#\\{exp\\}/g, function () {\n      return (0,_objDisplay_js__WEBPACK_IMPORTED_MODULE_2__.objDisplay)(expected);\n    });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getMessage.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOperator.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOperator.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperator: () => (/* binding */ getOperator)\n/* harmony export */ });\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _type_detect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./type-detect.js */ \"./node_modules/chai/lib/chai/utils/type-detect.js\");\n\n\n\n/**\n * @param {unknown} obj\n * @returns {boolean}\n */\nfunction isObjectType(obj) {\n  let objectType = (0,_type_detect_js__WEBPACK_IMPORTED_MODULE_1__.type)(obj);\n  let objectTypes = ['Array', 'Object', 'Function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {object} obj object (constructed Assertion)\n * @param {unknown} args chai.Assertion.prototype.assert arguments\n * @returns {unknown}\n * @namespace Utils\n * @name getOperator\n * @public\n */\nfunction getOperator(obj, args) {\n  let operator = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'operator');\n  let negate = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'negate');\n  let expected = args[3];\n  let msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  let isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getOperator.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js":
/*!************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOwnEnumerableProperties: () => (/* binding */ getOwnEnumerableProperties)\n/* harmony export */ });\n/* harmony import */ var _getOwnEnumerablePropertySymbols_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols.js */ \"./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js\");\n/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @public\n */\nfunction getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat((0,_getOwnEnumerablePropertySymbols_js__WEBPACK_IMPORTED_MODULE_0__.getOwnEnumerablePropertySymbols)(obj));\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOwnEnumerablePropertySymbols: () => (/* binding */ getOwnEnumerablePropertySymbols)\n/* harmony export */ });\n/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {object} obj\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @public\n */\nfunction getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/getProperties.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/getProperties.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getProperties: () => (/* binding */ getProperties)\n/* harmony export */ });\n/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @public\n */\nfunction getProperties(object) {\n  let result = Object.getOwnPropertyNames(object);\n\n  /**\n   * @param {unknown} property\n   */\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  let proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/getProperties.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/index.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addChainableMethod: () => (/* reexport safe */ _addChainableMethod_js__WEBPACK_IMPORTED_MODULE_16__.addChainableMethod),\n/* harmony export */   addLengthGuard: () => (/* reexport safe */ _addLengthGuard_js__WEBPACK_IMPORTED_MODULE_22__.addLengthGuard),\n/* harmony export */   addMethod: () => (/* reexport safe */ _addMethod_js__WEBPACK_IMPORTED_MODULE_13__.addMethod),\n/* harmony export */   addProperty: () => (/* reexport safe */ _addProperty_js__WEBPACK_IMPORTED_MODULE_12__.addProperty),\n/* harmony export */   checkError: () => (/* reexport module object */ check_error__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   compareByInspect: () => (/* reexport safe */ _compareByInspect_js__WEBPACK_IMPORTED_MODULE_18__.compareByInspect),\n/* harmony export */   eql: () => (/* reexport safe */ deep_eql__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   expectTypes: () => (/* reexport safe */ _expectTypes_js__WEBPACK_IMPORTED_MODULE_3__.expectTypes),\n/* harmony export */   flag: () => (/* reexport safe */ _flag_js__WEBPACK_IMPORTED_MODULE_8__.flag),\n/* harmony export */   getActual: () => (/* reexport safe */ _getActual_js__WEBPACK_IMPORTED_MODULE_5__.getActual),\n/* harmony export */   getMessage: () => (/* reexport safe */ _getMessage_js__WEBPACK_IMPORTED_MODULE_4__.getMessage),\n/* harmony export */   getName: () => (/* binding */ getName),\n/* harmony export */   getOperator: () => (/* reexport safe */ _getOperator_js__WEBPACK_IMPORTED_MODULE_25__.getOperator),\n/* harmony export */   getOwnEnumerableProperties: () => (/* reexport safe */ _getOwnEnumerableProperties_js__WEBPACK_IMPORTED_MODULE_20__.getOwnEnumerableProperties),\n/* harmony export */   getOwnEnumerablePropertySymbols: () => (/* reexport safe */ _getOwnEnumerablePropertySymbols_js__WEBPACK_IMPORTED_MODULE_19__.getOwnEnumerablePropertySymbols),\n/* harmony export */   getPathInfo: () => (/* reexport safe */ pathval__WEBPACK_IMPORTED_MODULE_11__.getPathInfo),\n/* harmony export */   hasProperty: () => (/* reexport safe */ pathval__WEBPACK_IMPORTED_MODULE_11__.hasProperty),\n/* harmony export */   inspect: () => (/* reexport safe */ _inspect_js__WEBPACK_IMPORTED_MODULE_6__.inspect),\n/* harmony export */   isNaN: () => (/* reexport safe */ _isNaN_js__WEBPACK_IMPORTED_MODULE_24__.isNaN),\n/* harmony export */   isNumeric: () => (/* binding */ isNumeric),\n/* harmony export */   isProxyEnabled: () => (/* reexport safe */ _isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_23__.isProxyEnabled),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   objDisplay: () => (/* reexport safe */ _objDisplay_js__WEBPACK_IMPORTED_MODULE_7__.objDisplay),\n/* harmony export */   overwriteChainableMethod: () => (/* reexport safe */ _overwriteChainableMethod_js__WEBPACK_IMPORTED_MODULE_17__.overwriteChainableMethod),\n/* harmony export */   overwriteMethod: () => (/* reexport safe */ _overwriteMethod_js__WEBPACK_IMPORTED_MODULE_15__.overwriteMethod),\n/* harmony export */   overwriteProperty: () => (/* reexport safe */ _overwriteProperty_js__WEBPACK_IMPORTED_MODULE_14__.overwriteProperty),\n/* harmony export */   proxify: () => (/* reexport safe */ _proxify_js__WEBPACK_IMPORTED_MODULE_21__.proxify),\n/* harmony export */   test: () => (/* reexport safe */ _test_js__WEBPACK_IMPORTED_MODULE_1__.test),\n/* harmony export */   transferFlags: () => (/* reexport safe */ _transferFlags_js__WEBPACK_IMPORTED_MODULE_9__.transferFlags),\n/* harmony export */   type: () => (/* reexport safe */ _type_detect_js__WEBPACK_IMPORTED_MODULE_2__.type)\n/* harmony export */ });\n/* harmony import */ var check_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! check-error */ \"./node_modules/check-error/index.js\");\n/* harmony import */ var _test_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./test.js */ \"./node_modules/chai/lib/chai/utils/test.js\");\n/* harmony import */ var _type_detect_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type-detect.js */ \"./node_modules/chai/lib/chai/utils/type-detect.js\");\n/* harmony import */ var _expectTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./expectTypes.js */ \"./node_modules/chai/lib/chai/utils/expectTypes.js\");\n/* harmony import */ var _getMessage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getMessage.js */ \"./node_modules/chai/lib/chai/utils/getMessage.js\");\n/* harmony import */ var _getActual_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getActual.js */ \"./node_modules/chai/lib/chai/utils/getActual.js\");\n/* harmony import */ var _inspect_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./inspect.js */ \"./node_modules/chai/lib/chai/utils/inspect.js\");\n/* harmony import */ var _objDisplay_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./objDisplay.js */ \"./node_modules/chai/lib/chai/utils/objDisplay.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/* harmony import */ var deep_eql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! deep-eql */ \"./node_modules/deep-eql/index.js\");\n/* harmony import */ var pathval__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! pathval */ \"./node_modules/pathval/index.js\");\n/* harmony import */ var _addProperty_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./addProperty.js */ \"./node_modules/chai/lib/chai/utils/addProperty.js\");\n/* harmony import */ var _addMethod_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./addMethod.js */ \"./node_modules/chai/lib/chai/utils/addMethod.js\");\n/* harmony import */ var _overwriteProperty_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./overwriteProperty.js */ \"./node_modules/chai/lib/chai/utils/overwriteProperty.js\");\n/* harmony import */ var _overwriteMethod_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./overwriteMethod.js */ \"./node_modules/chai/lib/chai/utils/overwriteMethod.js\");\n/* harmony import */ var _addChainableMethod_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./addChainableMethod.js */ \"./node_modules/chai/lib/chai/utils/addChainableMethod.js\");\n/* harmony import */ var _overwriteChainableMethod_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./overwriteChainableMethod.js */ \"./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js\");\n/* harmony import */ var _compareByInspect_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./compareByInspect.js */ \"./node_modules/chai/lib/chai/utils/compareByInspect.js\");\n/* harmony import */ var _getOwnEnumerablePropertySymbols_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./getOwnEnumerablePropertySymbols.js */ \"./node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js\");\n/* harmony import */ var _getOwnEnumerableProperties_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./getOwnEnumerableProperties.js */ \"./node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js\");\n/* harmony import */ var _proxify_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./proxify.js */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\n/* harmony import */ var _addLengthGuard_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./addLengthGuard.js */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\n/* harmony import */ var _isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./isProxyEnabled.js */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\n/* harmony import */ var _isNaN_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./isNaN.js */ \"./node_modules/chai/lib/chai/utils/isNaN.js\");\n/* harmony import */ var _getOperator_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./getOperator.js */ \"./node_modules/chai/lib/chai/utils/getOperator.js\");\n/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n// Dependencies that are used for multiple exports are required here only once\n\n\n// test utility\n\n\n// type utility\n\n\n\n// expectTypes utility\n\n\n// message utility\n\n\n// actual utility\n\n\n// Inspect util\n\n\n// Object Display util\n\n\n// Flag utility\n\n\n// Flag transferring utility\n\n\n// Deep equal utility\n\n\n// Deep path info\n\n\n/**\n * Function name\n *\n * @param {Function} fn\n * @returns {string}\n */\nfunction getName(fn) {\n  return fn.name;\n}\n\n// add Property\n\n\n// add Method\n\n\n// overwrite Property\n\n\n// overwrite Method\n\n\n// Add a chainable method\n\n\n// Overwrite chainable method\n\n\n// Compare by inspect method\n\n\n// Get own enumerable property symbols method\n\n\n// Get own enumerable properties method\n\n\n// Checks error against a given set of criteria\n\n\n// Proxify util\n\n\n// addLengthGuard util\n\n\n// isProxyEnabled helper\n\n\n// isNaN method\n\n\n// getOperator method\n\n\n/**\n * Determines if an object is a `RegExp`\n * This is used since `instanceof` will not work in virtual contexts\n *\n * @param {*} obj Object to test\n * @returns {boolean}\n */\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\n/**\n * Determines if an object is numeric or not\n *\n * @param {unknown} obj Object to test\n * @returns {boolean}\n */\nfunction isNumeric(obj) {\n  return ['Number', 'BigInt'].includes((0,_type_detect_js__WEBPACK_IMPORTED_MODULE_2__.type)(obj));\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/index.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/inspect.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/inspect.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inspect: () => (/* binding */ inspect)\n/* harmony export */ });\n/* harmony import */ var loupe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! loupe */ \"./node_modules/loupe/lib/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ \"./node_modules/chai/lib/chai/config.js\");\n// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\n\n\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {object} obj The object to print out.\n * @param {boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {number} depth Depth in which to descend in object. Default is 2.\n * @param {boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @returns {string}\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  let options = {\n    colors: colors,\n    depth: typeof depth === 'undefined' ? 2 : depth,\n    showHidden: showHidden,\n    truncate: _config_js__WEBPACK_IMPORTED_MODULE_1__.config.truncateThreshold ? _config_js__WEBPACK_IMPORTED_MODULE_1__.config.truncateThreshold : Infinity\n  };\n  return (0,loupe__WEBPACK_IMPORTED_MODULE_0__.inspect)(obj, options);\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/inspect.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isNaN.js":
/*!***************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isNaN.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNaN: () => (/* binding */ isNaN)\n/* harmony export */ });\n/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\nconst isNaN = Number.isNaN;\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/isNaN.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/isProxyEnabled.js":
/*!************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/isProxyEnabled.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isProxyEnabled: () => (/* binding */ isProxyEnabled)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"./node_modules/chai/lib/chai/config.js\");\n\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n * @returns {boolean}\n */\nfunction isProxyEnabled() {\n  return (\n    _config_js__WEBPACK_IMPORTED_MODULE_0__.config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined'\n  );\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/isProxyEnabled.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/objDisplay.js":
/*!********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/objDisplay.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   objDisplay: () => (/* binding */ objDisplay)\n/* harmony export */ });\n/* harmony import */ var _inspect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect.js */ \"./node_modules/chai/lib/chai/utils/inspect.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ \"./node_modules/chai/lib/chai/config.js\");\n/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {unknown} obj javascript object to inspect\n * @returns {string} stringified object\n * @name objDisplay\n * @namespace Utils\n * @public\n */\nfunction objDisplay(obj) {\n  let str = (0,_inspect_js__WEBPACK_IMPORTED_MODULE_0__.inspect)(obj),\n    type = Object.prototype.toString.call(obj);\n\n  if (_config_js__WEBPACK_IMPORTED_MODULE_1__.config.truncateThreshold && str.length >= _config_js__WEBPACK_IMPORTED_MODULE_1__.config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      let keys = Object.keys(obj),\n        kstr =\n          keys.length > 2\n            ? keys.splice(0, 2).join(', ') + ', ...'\n            : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/objDisplay.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   overwriteChainableMethod: () => (/* binding */ overwriteChainableMethod)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *         function (_super) {\n *         }\n *         , function (_super) {\n *         }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {object} ctx object whose method / property is to be overwritten\n * @param {string} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @public\n */\nfunction overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  let chainableBehavior = ctx.__methods[name];\n\n  let _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior =\n    function overwritingChainableMethodGetter() {\n      let result = chainingBehavior(_chainingBehavior).call(this);\n      if (result !== undefined) {\n        return result;\n      }\n\n      let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n      (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_1__.transferFlags)(this, newAssertion);\n      return newAssertion;\n    };\n\n  let _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    let result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n    (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_1__.transferFlags)(this, newAssertion);\n    return newAssertion;\n  };\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/overwriteChainableMethod.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteMethod.js":
/*!*************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteMethod.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   overwriteMethod: () => (/* binding */ overwriteMethod)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _addLengthGuard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./addLengthGuard.js */ \"./node_modules/chai/lib/chai/utils/addLengthGuard.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _proxify_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proxify.js */ \"./node_modules/chai/lib/chai/utils/proxify.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *         return function (str) {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.value).to.equal(str);\n *             } else {\n *                 _super.apply(this, arguments);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {object} ctx object whose method is to be overwritten\n * @param {string} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @public\n */\nfunction overwriteMethod(ctx, name, method) {\n  let _method = ctx[name],\n    _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method) _super = _method;\n\n  let overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!(0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'lockSsfi')) {\n      (0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    let origLockSsfi = (0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'lockSsfi');\n    (0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'lockSsfi', true);\n    let result = method(_super).apply(this, arguments);\n    (0,_flag_js__WEBPACK_IMPORTED_MODULE_2__.flag)(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n    (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_4__.transferFlags)(this, newAssertion);\n    return newAssertion;\n  };\n\n  (0,_addLengthGuard_js__WEBPACK_IMPORTED_MODULE_1__.addLengthGuard)(overwritingMethodWrapper, name, false);\n  ctx[name] = (0,_proxify_js__WEBPACK_IMPORTED_MODULE_3__.proxify)(overwritingMethodWrapper, name);\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/overwriteMethod.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/overwriteProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/overwriteProperty.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   overwriteProperty: () => (/* binding */ overwriteProperty)\n/* harmony export */ });\n/* harmony import */ var _assertion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../assertion.js */ \"./node_modules/chai/lib/chai/assertion.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isProxyEnabled.js */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\n/* harmony import */ var _transferFlags_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transferFlags.js */ \"./node_modules/chai/lib/chai/utils/transferFlags.js\");\n/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *         return function () {\n *             var obj = utils.flag(this, 'object');\n *             if (obj instanceof Foo) {\n *                 new chai.Assertion(obj.name).to.equal('bar');\n *             } else {\n *                 _super.call(this);\n *             }\n *         }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {object} ctx object whose property is to be overwritten\n * @param {string} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @public\n */\nfunction overwriteProperty(ctx, name, getter) {\n  let _get = Object.getOwnPropertyDescriptor(ctx, name),\n    _super = function () {};\n\n  if (_get && 'function' === typeof _get.get) _super = _get.get;\n\n  Object.defineProperty(ctx, name, {\n    get: function overwritingPropertyGetter() {\n      // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n      // function to be the starting point for removing implementation frames\n      // from the stack trace of a failed assertion.\n      //\n      // However, we only want to use this function as the starting point if\n      // the `lockSsfi` flag isn't set and proxy protection is disabled.\n      //\n      // If the `lockSsfi` flag is set, then either this assertion has been\n      // overwritten by another assertion, or this assertion is being invoked\n      // from inside of another assertion. In the first case, the `ssfi` flag\n      // has already been set by the overwriting assertion. In the second\n      // case, the `ssfi` flag has already been set by the outer assertion.\n      //\n      // If proxy protection is enabled, then the `ssfi` flag has already been\n      // set by the proxy getter.\n      if (!(0,_isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_2__.isProxyEnabled)() && !(0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi')) {\n        (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'ssfi', overwritingPropertyGetter);\n      }\n\n      // Setting the `lockSsfi` flag to `true` prevents the overwritten\n      // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n      // flag is already set to the correct starting point for this assertion.\n      let origLockSsfi = (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi');\n      (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi', true);\n      let result = getter(_super).call(this);\n      (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(this, 'lockSsfi', origLockSsfi);\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      let newAssertion = new _assertion_js__WEBPACK_IMPORTED_MODULE_0__.Assertion();\n      (0,_transferFlags_js__WEBPACK_IMPORTED_MODULE_3__.transferFlags)(this, newAssertion);\n      return newAssertion;\n    },\n    configurable: true\n  });\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/overwriteProperty.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/proxify.js":
/*!*****************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/proxify.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   proxify: () => (/* binding */ proxify)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config.js */ \"./node_modules/chai/lib/chai/config.js\");\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/* harmony import */ var _getProperties_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getProperties.js */ \"./node_modules/chai/lib/chai/utils/getProperties.js\");\n/* harmony import */ var _isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isProxyEnabled.js */ \"./node_modules/chai/lib/chai/utils/isProxyEnabled.js\");\n\n\n\n\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/** @type {PropertyKey[]} */\nconst builtins = ['__flags', '__methods', '_obj', 'assert'];\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @namespace Utils\n * @template {object} T\n * @param {T} obj\n * @param {string} [nonChainableMethodName]\n * @returns {T}\n */\nfunction proxify(obj, nonChainableMethodName) {\n  if (!(0,_isProxyEnabled_js__WEBPACK_IMPORTED_MODULE_3__.isProxyEnabled)()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (\n        typeof property === 'string' &&\n        _config_js__WEBPACK_IMPORTED_MODULE_0__.config.proxyExcludedKeys.indexOf(property) === -1 &&\n        !Reflect.has(target, property)\n      ) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error(\n            'Invalid Chai property: ' +\n              nonChainableMethodName +\n              '.' +\n              property +\n              '. See docs for proper usage of \"' +\n              nonChainableMethodName +\n              '\".'\n          );\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        let suggestion = null;\n        let suggestionDistance = 4;\n        (0,_getProperties_js__WEBPACK_IMPORTED_MODULE_2__.getProperties)(target).forEach(function (prop) {\n          if (\n            // we actually mean to check `Object.prototype` here\n            // eslint-disable-next-line no-prototype-builtins\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            let dist = stringDistanceCapped(property, prop, suggestionDistance);\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error(\n            'Invalid Chai property: ' +\n              property +\n              '. Did you mean \"' +\n              suggestion +\n              '\"?'\n          );\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !(0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(target, 'lockSsfi')) {\n        (0,_flag_js__WEBPACK_IMPORTED_MODULE_1__.flag)(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n}\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n *\n * @param {string} strA\n * @param {string} strB\n * @param {number} cap\n * @returns {number} min(string distance between strA and strB, cap)\n * @private\n */\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  let memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (let i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (let j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (let i = 1; i <= strA.length; i++) {\n    let ch = strA.charCodeAt(i - 1);\n    for (let j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] + (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/proxify.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/test.js":
/*!**************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/test.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   test: () => (/* binding */ test)\n/* harmony export */ });\n/* harmony import */ var _flag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flag.js */ \"./node_modules/chai/lib/chai/utils/flag.js\");\n/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n/**\n * ### .test(object, expression)\n *\n * Test an object for expression.\n *\n * @param {object} obj (constructed Assertion)\n * @param {unknown} args\n * @returns {unknown}\n * @namespace Utils\n * @name test\n */\nfunction test(obj, args) {\n  let negate = (0,_flag_js__WEBPACK_IMPORTED_MODULE_0__.flag)(obj, 'negate'),\n    expr = args[0];\n  return negate ? !expr : expr;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/test.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/transferFlags.js":
/*!***********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/transferFlags.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   transferFlags: () => (/* binding */ transferFlags)\n/* harmony export */ });\n/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {import('../assertion.js').Assertion} assertion the assertion to transfer the flags from\n * @param {object} object the object to transfer the flags to; usually a new assertion\n * @param {boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @private\n */\nfunction transferFlags(assertion, object, includeAll) {\n  let flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (let flag in flags) {\n    if (\n      includeAll ||\n      (flag !== 'object' &&\n        flag !== 'ssfi' &&\n        flag !== 'lockSsfi' &&\n        flag != 'message')\n    ) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/transferFlags.js?\n}");

/***/ }),

/***/ "./node_modules/chai/lib/chai/utils/type-detect.js":
/*!*********************************************************!*\
  !*** ./node_modules/chai/lib/chai/utils/type-detect.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/**\n * @param {unknown} obj\n * @returns {string}\n */\nfunction type(obj) {\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n\n  if (obj === null) {\n    return 'null';\n  }\n\n  const stringTag = obj[Symbol.toStringTag];\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n  const type = Object.prototype.toString.call(obj).slice(8, -1);\n  return type;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/chai/lib/chai/utils/type-detect.js?\n}");

/***/ }),

/***/ "./node_modules/check-error/index.js":
/*!*******************************************!*\
  !*** ./node_modules/check-error/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compatibleConstructor: () => (/* binding */ compatibleConstructor),\n/* harmony export */   compatibleInstance: () => (/* binding */ compatibleInstance),\n/* harmony export */   compatibleMessage: () => (/* binding */ compatibleMessage),\n/* harmony export */   getConstructorName: () => (/* binding */ getConstructorName),\n/* harmony export */   getMessage: () => (/* binding */ getMessage)\n/* harmony export */ });\nfunction isErrorInstance(obj) {\n  // eslint-disable-next-line prefer-reflect\n  return obj instanceof Error || Object.prototype.toString.call(obj) === '[object Error]';\n}\n\nfunction isRegExp(obj) {\n  // eslint-disable-next-line prefer-reflect\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return isErrorInstance(errorLike) && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (isErrorInstance(errorLike)) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if ((typeof errorLike === 'object' || typeof errorLike === 'function') && errorLike.prototype) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  const comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (isRegExp(errMatcher)) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  let constructorName = errorLike;\n  if (isErrorInstance(errorLike)) {\n    constructorName = errorLike.constructor.name;\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = errorLike.name;\n    if (constructorName === '') {\n      const newConstructorName = (new errorLike().name); // eslint-disable-line new-cap\n      constructorName = newConstructorName || constructorName;\n    }\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  let msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\n\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/check-error/index.js?\n}");

/***/ }),

/***/ "./node_modules/deep-eql/index.js":
/*!****************************************!*\
  !*** ./node_modules/deep-eql/index.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MemoizeMap: () => (/* binding */ MemoizeMap),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nfunction type(obj) {\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n\n  if (obj === null) {\n    return 'null';\n  }\n\n  const stringTag = obj[Symbol.toStringTag];\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n  const sliceStart = 8;\n  const sliceEnd = -1;\n  return Object.prototype.toString.call(obj).slice(sliceStart, sliceEnd);\n}\n\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function get(key) {\n    return key[this._key];\n  },\n  set: function set(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (deepEqual);\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n      return leftHandOperand === rightHandOperand;\n    case 'Error':\n      return keysEqual(leftHandOperand, rightHandOperand, [ 'name', 'message', 'code' ], options);\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Temporal.PlainDate':\n    case 'Temporal.PlainTime':\n    case 'Temporal.PlainDateTime':\n    case 'Temporal.Instant':\n    case 'Temporal.ZonedDateTime':\n    case 'Temporal.PlainYearMonth':\n    case 'Temporal.PlainMonthDay':\n      return leftHandOperand.equals(rightHandOperand);\n    case 'Temporal.Duration':\n      return leftHandOperand.total('nanoseconds') === rightHandOperand.total('nanoseconds');\n    case 'Temporal.TimeZone':\n    case 'Temporal.Calendar':\n      return leftHandOperand.toString() === rightHandOperand.toString();\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  try {\n    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n    if (leftHandOperand.size !== rightHandOperand.size) {\n      return false;\n    }\n    if (leftHandOperand.size === 0) {\n      return true;\n    }\n  } catch (sizeError) {\n    // things that aren't actual Maps or Sets will throw here\n    return false;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\nfunction getEnumerableSymbols(target) {\n  var keys = [];\n  var allKeys = Object.getOwnPropertySymbols(target);\n  for (var i = 0; i < allKeys.length; i += 1) {\n    var key = allKeys[i];\n    if (Object.getOwnPropertyDescriptor(target, key).enumerable) {\n      keys.push(key);\n    }\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  var leftHandSymbols = getEnumerableSymbols(leftHandOperand);\n  var rightHandSymbols = getEnumerableSymbols(rightHandOperand);\n  leftHandKeys = leftHandKeys.concat(leftHandSymbols);\n  rightHandKeys = rightHandKeys.concat(rightHandSymbols);\n\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n\nfunction mapSymbols(arr) {\n  return arr.map(function mapSymbol(entry) {\n    if (typeof entry === 'symbol') {\n      return entry.toString();\n    }\n\n    return entry;\n  });\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/deep-eql/index.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/arguments.js":
/*!*********************************************!*\
  !*** ./node_modules/loupe/lib/arguments.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectArguments)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectArguments(args, options) {\n    if (args.length === 0)\n        return 'Arguments[]';\n    options.truncate -= 13;\n    return `Arguments[ ${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(args, options)} ]`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/arguments.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/array.js":
/*!*****************************************!*\
  !*** ./node_modules/loupe/lib/array.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectArray)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectArray(array, options) {\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    const nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length)\n        return '[]';\n    options.truncate -= 4;\n    const listContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(array, options);\n    options.truncate -= listContents.length;\n    let propertyContents = '';\n    if (nonIndexProperties.length) {\n        propertyContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(nonIndexProperties.map(key => [key, array[key]]), options, _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectProperty);\n    }\n    return `[ ${listContents}${propertyContents ? `, ${propertyContents}` : ''} ]`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/array.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/bigint.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/bigint.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectBigInt)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectBigInt(number, options) {\n    let nums = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(number.toString(), options.truncate - 1);\n    if (nums !== _helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncator)\n        nums += 'n';\n    return options.stylize(nums, 'bigint');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/bigint.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/class.js":
/*!*****************************************!*\
  !*** ./node_modules/loupe/lib/class.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectClass)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"./node_modules/loupe/lib/object.js\");\n\nconst toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag ? Symbol.toStringTag : false;\nfunction inspectClass(value, options) {\n    let name = '';\n    if (toStringTag && toStringTag in value) {\n        name = value[toStringTag];\n    }\n    name = name || value.constructor.name;\n    // Babel transforms anonymous classes to the name `_class`\n    if (!name || name === '_class') {\n        name = '<Anonymous Class>';\n    }\n    options.truncate -= name.length;\n    return `${name}${(0,_object_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value, options)}`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/class.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/date.js":
/*!****************************************!*\
  !*** ./node_modules/loupe/lib/date.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectDate)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectDate(dateObject, options) {\n    const stringRepresentation = dateObject.toJSON();\n    if (stringRepresentation === null) {\n        return 'Invalid Date';\n    }\n    const split = stringRepresentation.split('T');\n    const date = split[0];\n    // If we need to - truncate the time portion, but never the date\n    return options.stylize(`${date}T${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(split[1], options.truncate - date.length - 1)}`, 'date');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/date.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/error.js":
/*!*****************************************!*\
  !*** ./node_modules/loupe/lib/error.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectObject)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nconst errorKeys = [\n    'stack',\n    'line',\n    'column',\n    'name',\n    'message',\n    'fileName',\n    'lineNumber',\n    'columnNumber',\n    'number',\n    'description',\n    'cause',\n];\nfunction inspectObject(error, options) {\n    const properties = Object.getOwnPropertyNames(error).filter(key => errorKeys.indexOf(key) === -1);\n    const name = error.name;\n    options.truncate -= name.length;\n    let message = '';\n    if (typeof error.message === 'string') {\n        message = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(error.message, options.truncate);\n    }\n    else {\n        properties.unshift('message');\n    }\n    message = message ? `: ${message}` : '';\n    options.truncate -= message.length + 5;\n    options.seen = options.seen || [];\n    if (options.seen.includes(error)) {\n        return '[Circular]';\n    }\n    options.seen.push(error);\n    const propertyContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(properties.map(key => [key, error[key]]), options, _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectProperty);\n    return `${name}${message}${propertyContents ? ` { ${propertyContents} }` : ''}`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/error.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/function.js":
/*!********************************************!*\
  !*** ./node_modules/loupe/lib/function.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectFunction)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectFunction(func, options) {\n    const functionType = func[Symbol.toStringTag] || 'Function';\n    const name = func.name;\n    if (!name) {\n        return options.stylize(`[${functionType}]`, 'special');\n    }\n    return options.stylize(`[${functionType} ${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(name, options.truncate - 11)}]`, 'special');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/function.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/helpers.js":
/*!*******************************************!*\
  !*** ./node_modules/loupe/lib/helpers.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inspectList: () => (/* binding */ inspectList),\n/* harmony export */   inspectProperty: () => (/* binding */ inspectProperty),\n/* harmony export */   normaliseOptions: () => (/* binding */ normaliseOptions),\n/* harmony export */   truncate: () => (/* binding */ truncate),\n/* harmony export */   truncator: () => (/* binding */ truncator)\n/* harmony export */ });\nconst ansiColors = {\n    bold: ['1', '22'],\n    dim: ['2', '22'],\n    italic: ['3', '23'],\n    underline: ['4', '24'],\n    // 5 & 6 are blinking\n    inverse: ['7', '27'],\n    hidden: ['8', '28'],\n    strike: ['9', '29'],\n    // 10-20 are fonts\n    // 21-29 are resets for 1-9\n    black: ['30', '39'],\n    red: ['31', '39'],\n    green: ['32', '39'],\n    yellow: ['33', '39'],\n    blue: ['34', '39'],\n    magenta: ['35', '39'],\n    cyan: ['36', '39'],\n    white: ['37', '39'],\n    brightblack: ['30;1', '39'],\n    brightred: ['31;1', '39'],\n    brightgreen: ['32;1', '39'],\n    brightyellow: ['33;1', '39'],\n    brightblue: ['34;1', '39'],\n    brightmagenta: ['35;1', '39'],\n    brightcyan: ['36;1', '39'],\n    brightwhite: ['37;1', '39'],\n    grey: ['90', '39'],\n};\nconst styles = {\n    special: 'cyan',\n    number: 'yellow',\n    bigint: 'yellow',\n    boolean: 'yellow',\n    undefined: 'grey',\n    null: 'bold',\n    string: 'green',\n    symbol: 'green',\n    date: 'magenta',\n    regexp: 'red',\n};\nconst truncator = '…';\nfunction colorise(value, styleType) {\n    const color = ansiColors[styles[styleType]] || ansiColors[styleType] || '';\n    if (!color) {\n        return String(value);\n    }\n    return `\\u001b[${color[0]}m${String(value)}\\u001b[${color[1]}m`;\n}\nfunction normaliseOptions({ showHidden = false, depth = 2, colors = false, customInspect = true, showProxy = false, maxArrayLength = Infinity, breakLength = Infinity, seen = [], \n// eslint-disable-next-line no-shadow\ntruncate = Infinity, stylize = String, } = {}, inspect) {\n    const options = {\n        showHidden: Boolean(showHidden),\n        depth: Number(depth),\n        colors: Boolean(colors),\n        customInspect: Boolean(customInspect),\n        showProxy: Boolean(showProxy),\n        maxArrayLength: Number(maxArrayLength),\n        breakLength: Number(breakLength),\n        truncate: Number(truncate),\n        seen,\n        inspect,\n        stylize,\n    };\n    if (options.colors) {\n        options.stylize = colorise;\n    }\n    return options;\n}\nfunction isHighSurrogate(char) {\n    return char >= '\\ud800' && char <= '\\udbff';\n}\nfunction truncate(string, length, tail = truncator) {\n    string = String(string);\n    const tailLength = tail.length;\n    const stringLength = string.length;\n    if (tailLength > length && stringLength > tailLength) {\n        return tail;\n    }\n    if (stringLength > length && stringLength > tailLength) {\n        let end = length - tailLength;\n        if (end > 0 && isHighSurrogate(string[end - 1])) {\n            end = end - 1;\n        }\n        return `${string.slice(0, end)}${tail}`;\n    }\n    return string;\n}\n// eslint-disable-next-line complexity\nfunction inspectList(list, options, inspectItem, separator = ', ') {\n    inspectItem = inspectItem || options.inspect;\n    const size = list.length;\n    if (size === 0)\n        return '';\n    const originalLength = options.truncate;\n    let output = '';\n    let peek = '';\n    let truncated = '';\n    for (let i = 0; i < size; i += 1) {\n        const last = i + 1 === list.length;\n        const secondToLast = i + 2 === list.length;\n        truncated = `${truncator}(${list.length - i})`;\n        const value = list[i];\n        // If there is more than one remaining we need to account for a separator of `, `\n        options.truncate = originalLength - output.length - (last ? 0 : separator.length);\n        const string = peek || inspectItem(value, options) + (last ? '' : separator);\n        const nextLength = output.length + string.length;\n        const truncatedLength = nextLength + truncated.length;\n        // If this is the last element, and adding it would\n        // take us over length, but adding the truncator wouldn't - then break now\n        if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) {\n            break;\n        }\n        // If this isn't the last or second to last element to scan,\n        // but the string is already over length then break here\n        if (!last && !secondToLast && truncatedLength > originalLength) {\n            break;\n        }\n        // Peek at the next string to determine if we should\n        // break early before adding this item to the output\n        peek = last ? '' : inspectItem(list[i + 1], options) + (secondToLast ? '' : separator);\n        // If we have one element left, but this element and\n        // the next takes over length, the break early\n        if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) {\n            break;\n        }\n        output += string;\n        // If the next element takes us to length -\n        // but there are more after that, then we should truncate now\n        if (!last && !secondToLast && nextLength + peek.length >= originalLength) {\n            truncated = `${truncator}(${list.length - i - 1})`;\n            break;\n        }\n        truncated = '';\n    }\n    return `${output}${truncated}`;\n}\nfunction quoteComplexKey(key) {\n    if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {\n        return key;\n    }\n    return JSON.stringify(key)\n        .replace(/'/g, \"\\\\'\")\n        .replace(/\\\\\"/g, '\"')\n        .replace(/(^\"|\"$)/g, \"'\");\n}\nfunction inspectProperty([key, value], options) {\n    options.truncate -= 2;\n    if (typeof key === 'string') {\n        key = quoteComplexKey(key);\n    }\n    else if (typeof key !== 'number') {\n        key = `[${options.inspect(key, options)}]`;\n    }\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return `${key}: ${value}`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/helpers.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/html.js":
/*!****************************************!*\
  !*** ./node_modules/loupe/lib/html.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectHTML),\n/* harmony export */   inspectAttribute: () => (/* binding */ inspectAttribute),\n/* harmony export */   inspectNode: () => (/* binding */ inspectNode),\n/* harmony export */   inspectNodeCollection: () => (/* binding */ inspectNodeCollection)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectAttribute([key, value], options) {\n    options.truncate -= 3;\n    if (!value) {\n        return `${options.stylize(String(key), 'yellow')}`;\n    }\n    return `${options.stylize(String(key), 'yellow')}=${options.stylize(`\"${value}\"`, 'string')}`;\n}\nfunction inspectNodeCollection(collection, options) {\n    return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(collection, options, inspectNode, '\\n');\n}\nfunction inspectNode(node, options) {\n    switch (node.nodeType) {\n        case 1:\n            return inspectHTML(node, options);\n        case 3:\n            return options.inspect(node.data, options);\n        default:\n            return options.inspect(node, options);\n    }\n}\n// @ts-ignore (Deno doesn't have Element)\nfunction inspectHTML(element, options) {\n    const properties = element.getAttributeNames();\n    const name = element.tagName.toLowerCase();\n    const head = options.stylize(`<${name}`, 'special');\n    const headClose = options.stylize(`>`, 'special');\n    const tail = options.stylize(`</${name}>`, 'special');\n    options.truncate -= name.length * 2 + 5;\n    let propertyContents = '';\n    if (properties.length > 0) {\n        propertyContents += ' ';\n        propertyContents += (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(properties.map((key) => [key, element.getAttribute(key)]), options, inspectAttribute, ' ');\n    }\n    options.truncate -= propertyContents.length;\n    const truncate = options.truncate;\n    let children = inspectNodeCollection(element.children, options);\n    if (children && children.length > truncate) {\n        children = `${_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncator}(${element.children.length})`;\n    }\n    return `${head}${propertyContents}${headClose}${children}${tail}`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/html.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/index.js":
/*!*****************************************!*\
  !*** ./node_modules/loupe/lib/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   inspect: () => (/* binding */ inspect),\n/* harmony export */   registerConstructor: () => (/* binding */ registerConstructor),\n/* harmony export */   registerStringTag: () => (/* binding */ registerStringTag)\n/* harmony export */ });\n/* harmony import */ var _array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./array.js */ \"./node_modules/loupe/lib/array.js\");\n/* harmony import */ var _typedarray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typedarray.js */ \"./node_modules/loupe/lib/typedarray.js\");\n/* harmony import */ var _date_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./date.js */ \"./node_modules/loupe/lib/date.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"./node_modules/loupe/lib/function.js\");\n/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./map.js */ \"./node_modules/loupe/lib/map.js\");\n/* harmony import */ var _number_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./number.js */ \"./node_modules/loupe/lib/number.js\");\n/* harmony import */ var _bigint_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./bigint.js */ \"./node_modules/loupe/lib/bigint.js\");\n/* harmony import */ var _regexp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./regexp.js */ \"./node_modules/loupe/lib/regexp.js\");\n/* harmony import */ var _set_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./set.js */ \"./node_modules/loupe/lib/set.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./string.js */ \"./node_modules/loupe/lib/string.js\");\n/* harmony import */ var _symbol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./symbol.js */ \"./node_modules/loupe/lib/symbol.js\");\n/* harmony import */ var _promise_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./promise.js */ \"./node_modules/loupe/lib/promise.js\");\n/* harmony import */ var _class_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./class.js */ \"./node_modules/loupe/lib/class.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./object.js */ \"./node_modules/loupe/lib/object.js\");\n/* harmony import */ var _arguments_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./arguments.js */ \"./node_modules/loupe/lib/arguments.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./error.js */ \"./node_modules/loupe/lib/error.js\");\n/* harmony import */ var _html_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./html.js */ \"./node_modules/loupe/lib/html.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n/* !\n * loupe\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst symbolsSupported = typeof Symbol === 'function' && typeof Symbol.for === 'function';\nconst chaiInspect = symbolsSupported ? Symbol.for('chai/inspect') : '@@chai/inspect';\nconst nodeInspect = Symbol.for('nodejs.util.inspect.custom');\nconst constructorMap = new WeakMap();\nconst stringTagMap = {};\nconst baseTypesMap = {\n    undefined: (value, options) => options.stylize('undefined', 'undefined'),\n    null: (value, options) => options.stylize('null', 'null'),\n    boolean: (value, options) => options.stylize(String(value), 'boolean'),\n    Boolean: (value, options) => options.stylize(String(value), 'boolean'),\n    number: _number_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    Number: _number_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    bigint: _bigint_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    BigInt: _bigint_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    string: _string_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    String: _string_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    function: _function_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    Function: _function_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    symbol: _symbol_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    // A Symbol polyfill will return `Symbol` not `symbol` from typedetect\n    Symbol: _symbol_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    Array: _array_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    Date: _date_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    Map: _map_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    Set: _set_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    RegExp: _regexp_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    Promise: _promise_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n    // WeakSet, WeakMap are totally opaque to us\n    WeakSet: (value, options) => options.stylize('WeakSet{…}', 'special'),\n    WeakMap: (value, options) => options.stylize('WeakMap{…}', 'special'),\n    Arguments: _arguments_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    Int8Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Uint8Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Uint8ClampedArray: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Int16Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Uint16Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Int32Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Uint32Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Float32Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Float64Array: _typedarray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    Generator: () => '',\n    DataView: () => '',\n    ArrayBuffer: () => '',\n    Error: _error_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    HTMLCollection: _html_js__WEBPACK_IMPORTED_MODULE_16__.inspectNodeCollection,\n    NodeList: _html_js__WEBPACK_IMPORTED_MODULE_16__.inspectNodeCollection,\n};\n// eslint-disable-next-line complexity\nconst inspectCustom = (value, options, type) => {\n    if (chaiInspect in value && typeof value[chaiInspect] === 'function') {\n        return value[chaiInspect](options);\n    }\n    if (nodeInspect in value && typeof value[nodeInspect] === 'function') {\n        return value[nodeInspect](options.depth, options);\n    }\n    if ('inspect' in value && typeof value.inspect === 'function') {\n        return value.inspect(options.depth, options);\n    }\n    if ('constructor' in value && constructorMap.has(value.constructor)) {\n        return constructorMap.get(value.constructor)(value, options);\n    }\n    if (stringTagMap[type]) {\n        return stringTagMap[type](value, options);\n    }\n    return '';\n};\nconst toString = Object.prototype.toString;\n// eslint-disable-next-line complexity\nfunction inspect(value, opts = {}) {\n    const options = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_17__.normaliseOptions)(opts, inspect);\n    const { customInspect } = options;\n    let type = value === null ? 'null' : typeof value;\n    if (type === 'object') {\n        type = toString.call(value).slice(8, -1);\n    }\n    // If it is a base value that we already support, then use Loupe's inspector\n    if (type in baseTypesMap) {\n        return baseTypesMap[type](value, options);\n    }\n    // If `options.customInspect` is set to true then try to use the custom inspector\n    if (customInspect && value) {\n        const output = inspectCustom(value, options, type);\n        if (output) {\n            if (typeof output === 'string')\n                return output;\n            return inspect(output, options);\n        }\n    }\n    const proto = value ? Object.getPrototypeOf(value) : false;\n    // If it's a plain Object then use Loupe's inspector\n    if (proto === Object.prototype || proto === null) {\n        return (0,_object_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(value, options);\n    }\n    // Specifically account for HTMLElements\n    // @ts-ignore\n    if (value && typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n        return (0,_html_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(value, options);\n    }\n    if ('constructor' in value) {\n        // If it is a class, inspect it like an object but add the constructor name\n        if (value.constructor !== Object) {\n            return (0,_class_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(value, options);\n        }\n        // If it is an object with an anonymous prototype, display it as an object.\n        return (0,_object_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(value, options);\n    }\n    // last chance to check if it's an object\n    if (value === Object(value)) {\n        return (0,_object_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(value, options);\n    }\n    // We have run out of options! Just stringify the value\n    return options.stylize(String(value), type);\n}\nfunction registerConstructor(constructor, inspector) {\n    if (constructorMap.has(constructor)) {\n        return false;\n    }\n    constructorMap.set(constructor, inspector);\n    return true;\n}\nfunction registerStringTag(stringTag, inspector) {\n    if (stringTag in stringTagMap) {\n        return false;\n    }\n    stringTagMap[stringTag] = inspector;\n    return true;\n}\nconst custom = chaiInspect;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (inspect);\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/index.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/map.js":
/*!***************************************!*\
  !*** ./node_modules/loupe/lib/map.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectMap)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectMapEntry([key, value], options) {\n    options.truncate -= 4;\n    key = options.inspect(key, options);\n    options.truncate -= key.length;\n    value = options.inspect(value, options);\n    return `${key} => ${value}`;\n}\n// IE11 doesn't support `map.entries()`\nfunction mapToEntries(map) {\n    const entries = [];\n    map.forEach((value, key) => {\n        entries.push([key, value]);\n    });\n    return entries;\n}\nfunction inspectMap(map, options) {\n    if (map.size === 0)\n        return 'Map{}';\n    options.truncate -= 7;\n    return `Map{ ${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(mapToEntries(map), options, inspectMapEntry)} }`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/map.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/number.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/number.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectNumber)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nconst isNaN = Number.isNaN || (i => i !== i); // eslint-disable-line no-self-compare\nfunction inspectNumber(number, options) {\n    if (isNaN(number)) {\n        return options.stylize('NaN', 'number');\n    }\n    if (number === Infinity) {\n        return options.stylize('Infinity', 'number');\n    }\n    if (number === -Infinity) {\n        return options.stylize('-Infinity', 'number');\n    }\n    if (number === 0) {\n        return options.stylize(1 / number === Infinity ? '+0' : '-0', 'number');\n    }\n    return options.stylize((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(String(number), options.truncate), 'number');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/number.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/object.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/object.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectObject)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectObject(object, options) {\n    const properties = Object.getOwnPropertyNames(object);\n    const symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];\n    if (properties.length === 0 && symbols.length === 0) {\n        return '{}';\n    }\n    options.truncate -= 4;\n    options.seen = options.seen || [];\n    if (options.seen.includes(object)) {\n        return '[Circular]';\n    }\n    options.seen.push(object);\n    const propertyContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(properties.map(key => [key, object[key]]), options, _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectProperty);\n    const symbolContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(symbols.map(key => [key, object[key]]), options, _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectProperty);\n    options.seen.pop();\n    let sep = '';\n    if (propertyContents && symbolContents) {\n        sep = ', ';\n    }\n    return `{ ${propertyContents}${sep}${symbolContents} }`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/object.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/promise.js":
/*!*******************************************!*\
  !*** ./node_modules/loupe/lib/promise.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst getPromiseValue = () => 'Promise{…}';\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getPromiseValue);\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/promise.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/regexp.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/regexp.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectRegExp)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nfunction inspectRegExp(value, options) {\n    const flags = value.toString().split('/')[2];\n    const sourceLength = options.truncate - (2 + flags.length);\n    const source = value.source;\n    return options.stylize(`/${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(source, sourceLength)}/${flags}`, 'regexp');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/regexp.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/set.js":
/*!***************************************!*\
  !*** ./node_modules/loupe/lib/set.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectSet)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\n// IE11 doesn't support `Array.from(set)`\nfunction arrayFromSet(set) {\n    const values = [];\n    set.forEach(value => {\n        values.push(value);\n    });\n    return values;\n}\nfunction inspectSet(set, options) {\n    if (set.size === 0)\n        return 'Set{}';\n    options.truncate -= 7;\n    return `Set{ ${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(arrayFromSet(set), options)} }`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/set.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/string.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/string.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectString)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nconst stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" +\n    '\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]', 'g');\nconst escapeCharacters = {\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\f': '\\\\f',\n    '\\r': '\\\\r',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\',\n};\nconst hex = 16;\nconst unicodeLength = 4;\nfunction escape(char) {\n    return (escapeCharacters[char] ||\n        `\\\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`);\n}\nfunction inspectString(string, options) {\n    if (stringEscapeChars.test(string)) {\n        string = string.replace(stringEscapeChars, escape);\n    }\n    return options.stylize(`'${(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(string, options.truncate - 2)}'`, 'string');\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/string.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/symbol.js":
/*!******************************************!*\
  !*** ./node_modules/loupe/lib/symbol.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectSymbol)\n/* harmony export */ });\nfunction inspectSymbol(value) {\n    if ('description' in Symbol.prototype) {\n        return value.description ? `Symbol(${value.description})` : 'Symbol()';\n    }\n    return value.toString();\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/symbol.js?\n}");

/***/ }),

/***/ "./node_modules/loupe/lib/typedarray.js":
/*!**********************************************!*\
  !*** ./node_modules/loupe/lib/typedarray.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ inspectTypedArray)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/loupe/lib/helpers.js\");\n\nconst getArrayName = (array) => {\n    // We need to special case Node.js' Buffers, which report to be Uint8Array\n    // @ts-ignore\n    if (typeof Buffer === 'function' && array instanceof Buffer) {\n        return 'Buffer';\n    }\n    if (array[Symbol.toStringTag]) {\n        return array[Symbol.toStringTag];\n    }\n    return array.constructor.name;\n};\nfunction inspectTypedArray(array, options) {\n    const name = getArrayName(array);\n    options.truncate -= name.length + 4;\n    // Object.keys will always output the Array indices first, so we can slice by\n    // `array.length` to get non-index properties\n    const nonIndexProperties = Object.keys(array).slice(array.length);\n    if (!array.length && !nonIndexProperties.length)\n        return `${name}[]`;\n    // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n    // stylise the toString() value of them\n    let output = '';\n    for (let i = 0; i < array.length; i++) {\n        const string = `${options.stylize((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncate)(array[i], options.truncate), 'number')}${i === array.length - 1 ? '' : ', '}`;\n        options.truncate -= string.length;\n        if (array[i] !== array.length && options.truncate <= 3) {\n            output += `${_helpers_js__WEBPACK_IMPORTED_MODULE_0__.truncator}(${array.length - array[i] + 1})`;\n            break;\n        }\n        output += string;\n    }\n    let propertyContents = '';\n    if (nonIndexProperties.length) {\n        propertyContents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectList)(nonIndexProperties.map(key => [key, array[key]]), options, _helpers_js__WEBPACK_IMPORTED_MODULE_0__.inspectProperty);\n    }\n    return `${name}[ ${output}${propertyContents ? `, ${propertyContents}` : ''} ]`;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/loupe/lib/typedarray.js?\n}");

/***/ }),

/***/ "./node_modules/pathval/index.js":
/*!***************************************!*\
  !*** ./node_modules/pathval/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathInfo: () => (/* binding */ getPathInfo),\n/* harmony export */   getPathValue: () => (/* binding */ getPathValue),\n/* harmony export */   hasProperty: () => (/* binding */ hasProperty),\n/* harmony export */   setPathValue: () => (/* binding */ setPathValue)\n/* harmony export */ });\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  const str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  const parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map((value) => {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    const regexp = /^\\[(\\d+)\\]$/;\n    const mArr = regexp.exec(value);\n    let parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  let temporaryValue = obj;\n  let res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (let i = 0; i < pathDepth; i++) {\n    const part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  let tempObj = obj;\n  const pathDepth = parsed.length;\n  let part = null;\n  // Here we iterate through every part of the path\n  for (let i = 0; i < pathDepth; i++) {\n    let propName = null;\n    let propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      const next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  const parsed = parsePath(path);\n  const last = parsed[parsed.length - 1];\n  const info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  const info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  const parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./node_modules/pathval/index.js?\n}");

/***/ }),

/***/ "./src/chai.mjs":
/*!**********************!*\
  !*** ./src/chai.mjs ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   runTest: () => (/* binding */ runTest)\n/* harmony export */ });\n/* harmony import */ var chai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chai */ \"./node_modules/chai/lib/chai.js\");\n// Copyright 2017 the V8 project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n\n\n\nconst assert = chai__WEBPACK_IMPORTED_MODULE_0__.assert;\nconst expect = chai__WEBPACK_IMPORTED_MODULE_0__.expect;\nconst AssertionError = chai__WEBPACK_IMPORTED_MODULE_0__.AssertionError;\n\nconst tests = [];\n\nconst describe = (name, func) => func();\nconst it = (name, func) => tests.push({ name, func });\n\ndescribe(\"assert\", () => {\n  it(\"assert\", () => {\n    const foo = \"bar\";\n    assert(foo == \"bar\", \"expected foo to equal `bar`\");\n\n    expect(() => {\n      assert(foo == \"baz\", \"expected foo to equal `baz`\");\n    }).to.throw(AssertionError, \"expected foo to equal `baz`\");\n\n    expect(() => {\n      assert(foo == \"baz\", () => \"expected foo to equal `baz`\");\n    }).to.throw(AssertionError, \"expected foo to equal `baz`\");\n  });\n\n  it(\"fail\", () => {\n    expect(() => {\n      assert.fail(0, 1, \"this has failed\");\n    }).to.throw(AssertionError, \"this has failed\");\n  });\n\n  it(\"isTrue\", () => {\n    assert.isTrue(true);\n\n    expect(() => {\n      assert.isTrue(false, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected false to be true\");\n\n    expect(() => {\n      assert.isTrue(1);\n    }).to.throw(AssertionError, \"expected 1 to be true\");\n\n    expect(() => {\n      assert.isTrue(\"test\");\n    }).to.throw(AssertionError, \"expected 'test' to be true\");\n  });\n\n  it(\"isNotTrue\", () => {\n    assert.isNotTrue(false);\n\n    expect(() => {\n      assert.isNotTrue(true, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected true to not equal true\");\n  });\n\n  it(\"isOk / ok\", () => {\n    [\"isOk\", \"ok\"].forEach((isOk) => {\n      assert[isOk](true);\n      assert[isOk](1);\n      assert[isOk](\"test\");\n\n      expect(() => {\n        assert[isOk](false, \"blah\");\n      }).to.throw(AssertionError, \"blah: expected false to be truthy\");\n\n      expect(() => {\n        assert[isOk](0);\n      }).to.throw(AssertionError, \"expected +0 to be truthy\");\n\n      expect(() => {\n        assert[isOk](\"\");\n      }).to.throw(AssertionError, \"expected '' to be truthy\");\n    });\n  });\n\n  it(\"isNotOk / notOk\", () => {\n    [\"isNotOk\", \"notOk\"].forEach((isNotOk) => {\n      assert[isNotOk](false);\n      assert[isNotOk](0);\n      assert[isNotOk](\"\");\n\n      expect(() => {\n        assert[isNotOk](true, \"blah\");\n      }).to.throw(AssertionError, \"blah: expected true to be falsy\");\n\n      expect(() => {\n        assert[isNotOk](1);\n      }).to.throw(AssertionError, \"expected 1 to be falsy\");\n\n      expect(() => {\n        assert[isNotOk](\"test\");\n      }).to.throw(AssertionError, \"expected 'test' to be falsy\");\n    });\n  });\n\n  it(\"isFalse\", () => {\n    assert.isFalse(false);\n\n    expect(() => {\n      assert.isFalse(true, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected true to be false\");\n\n    expect(() => {\n      assert.isFalse(0);\n    }).to.throw(AssertionError, \"expected +0 to be false\");\n  });\n\n  it(\"isNotFalse\", () => {\n    assert.isNotFalse(true);\n\n    expect(() => {\n      assert.isNotFalse(false, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected false to not equal false\");\n  });\n\n  const sym = Symbol();\n\n  it(\"isEqual\", () => {\n    assert.equal(0, 0);\n    assert.equal(sym, sym);\n    assert.equal(\"test\", \"test\");\n    assert.equal(void 0, null);\n    assert.equal(void 0, undefined);\n\n    expect(() => {\n      assert.equal(NaN, NaN);\n    }).to.throw(AssertionError, \"expected NaN to equal NaN\");\n\n    expect(() => {\n      assert.equal(1, 2, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to equal 2\");\n  });\n\n  it(\"notEqual\", () => {\n    assert.notEqual(1, 2);\n    assert.notEqual(NaN, NaN);\n    assert.notEqual(1, \"test\");\n\n    expect(() => {\n      assert.notEqual(\"test\", \"test\");\n    }).to.throw(AssertionError, \"expected 'test' to not equal 'test'\");\n    expect(() => {\n      assert.notEqual(sym, sym);\n    }).to.throw(AssertionError, \"expected Symbol() to not equal Symbol()\");\n  });\n\n  it(\"strictEqual\", () => {\n    assert.strictEqual(0, 0);\n    assert.strictEqual(0, -0);\n    assert.strictEqual(\"foo\", \"foo\");\n    assert.strictEqual(sym, sym);\n\n    expect(() => {\n      assert.strictEqual(\"5\", 5, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected '5' to equal 5\");\n  });\n\n  it(\"notStrictEqual\", () => {\n    assert.notStrictEqual(5, \"5\");\n    assert.notStrictEqual(NaN, NaN);\n    assert.notStrictEqual(Symbol(), Symbol());\n\n    expect(() => {\n      assert.notStrictEqual(5, 5, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 to not equal 5\");\n  });\n\n  it(\"deepEqual\", () => {\n    const obja = Object.create({ tea: \"chai\" });\n    const objb = Object.create({ tea: \"chai\" });\n\n    assert.deepEqual(/a/, /a/);\n    assert.deepEqual(/a/g, /a/g);\n    assert.deepEqual(/a/i, /a/i);\n    assert.deepEqual(/a/m, /a/m);\n    assert.deepEqual(obja, objb);\n    assert.deepEqual([NaN], [NaN]);\n    assert.deepEqual({ tea: NaN }, { tea: NaN });\n    assert.deepEqual({ tea: \"chai\" }, { tea: \"chai\" });\n    assert.deepEqual({ a: \"a\", b: \"b\" }, { b: \"b\", a: \"a\" });\n    assert.deepEqual(new Date(1, 2, 3), new Date(1, 2, 3));\n\n    expect(() => {\n      assert.deepEqual({ tea: \"chai\" }, { tea: \"black\" });\n    }).to.throw(AssertionError);\n\n    const obj1 = Object.create({ tea: \"chai\" });\n    const obj2 = Object.create({ tea: \"black\" });\n\n    expect(() => {\n      assert.deepEqual(obj1, obj2);\n    }).to.throw(AssertionError);\n\n    const circularObject = {};\n    const secondCircularObject = {};\n    circularObject.field = circularObject;\n    secondCircularObject.field = secondCircularObject;\n\n    assert.deepEqual(circularObject, secondCircularObject);\n\n    expect(() => {\n      secondCircularObject.field2 = secondCircularObject;\n      assert.deepEqual(circularObject, secondCircularObject);\n    }).to.throw(AssertionError);\n  });\n\n  it(\"notDeepEqual\", () => {\n    assert.notDeepEqual({ tea: \"jasmine\" }, { tea: \"chai\" });\n    assert.notDeepEqual(/a/, /b/);\n    assert.notDeepEqual(/a/, {});\n    assert.notDeepEqual(/a/g, /b/g);\n    assert.notDeepEqual(/a/i, /b/i);\n    assert.notDeepEqual(/a/m, /b/m);\n    assert.notDeepEqual(new Date(1, 2, 3), new Date(4, 5, 6));\n    assert.notDeepEqual(new Date(1, 2, 3), {});\n\n    expect(() => {\n      assert.notDeepEqual({ tea: \"chai\" }, { tea: \"chai\" });\n    }).to.throw(AssertionError);\n\n    const circularObject = {};\n    const secondCircularObject = { tea: \"jasmine\" };\n    circularObject.field = circularObject;\n    secondCircularObject.field = secondCircularObject;\n\n    assert.notDeepEqual(circularObject, secondCircularObject);\n\n    expect(() => {\n      delete secondCircularObject.tea;\n      assert.notDeepEqual(circularObject, secondCircularObject);\n    }).to.throw(AssertionError);\n  });\n\n  it(\"typeOf\", () => {\n    assert.typeOf(\"test\", \"string\");\n    assert.typeOf(true, \"boolean\");\n    assert.typeOf(NaN, \"number\");\n    assert.typeOf(sym, \"symbol\");\n\n    expect(() => {\n      assert.typeOf(5, \"string\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 to be a string\");\n  });\n\n  it(\"notTypeOf\", () => {\n    assert.notTypeOf(5, \"string\");\n    assert.notTypeOf(sym, \"string\");\n    assert.notTypeOf(null, \"object\");\n    assert.notTypeOf(\"test\", \"number\");\n\n    expect(() => {\n      assert.notTypeOf(5, \"number\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 not to be a number\");\n  });\n\n  function Foo() {}\n\n  const FakeConstructor = {\n    [Symbol.hasInstance](x) {\n      return x === 3;\n    },\n  };\n\n  it(\"instanceOf\", () => {\n    assert.instanceOf({}, Object);\n    assert.instanceOf(/a/, RegExp);\n    assert.instanceOf(new Foo(), Foo);\n    assert.instanceOf(3, FakeConstructor);\n\n    expect(() => {\n      assert.instanceOf(new Foo(), 1);\n    }).to.throw(\n      \"The instanceof assertion needs a constructor but Number was given.\"\n    );\n\n    expect(() => {\n      assert.instanceOf(new Foo(), \"Foo\");\n    }).to.throw(\n      \"The instanceof assertion needs a constructor but String was given.\"\n    );\n\n    expect(() => {\n      assert.instanceOf(4, FakeConstructor);\n    }).to.throw(\"expected 4 to be an instance of an unnamed constructor\");\n  });\n\n  it(\"notInstanceOf\", () => {\n    assert.notInstanceOf({}, Foo);\n    assert.notInstanceOf({}, Array);\n    assert.notInstanceOf(new Foo(), Array);\n\n    expect(() => {\n      assert.notInstanceOf(new Foo(), Foo);\n    }).to.throw(\"expected Foo{} to not be an instance of Foo\");\n\n    expect(() => {\n      assert.notInstanceOf(3, FakeConstructor);\n    }).to.throw(\"expected 3 to not be an instance of an unnamed constructor\");\n  });\n\n  it(\"isObject\", () => {\n    assert.isObject({});\n    assert.isObject(new Foo());\n\n    expect(() => {\n      assert.isObject(true);\n    }).to.throw(AssertionError, \"expected true to be an object\");\n\n    expect(() => {\n      assert.isObject(Foo);\n    }).to.throw(AssertionError, \"expected [Function Foo] to be an object\");\n\n    expect(() => {\n      assert.isObject(\"foo\");\n    }).to.throw(AssertionError, \"expected 'foo' to be an object\");\n  });\n\n  it(\"isNotObject\", () => {\n    assert.isNotObject(1);\n    assert.isNotObject([]);\n    assert.isNotObject(/a/);\n    assert.isNotObject(Foo);\n    assert.isNotObject(\"foo\");\n\n    expect(() => {\n      assert.isNotObject({}, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} not to be an object\");\n  });\n\n  it(\"include\", () => {\n    assert.include(\"foobar\", \"bar\");\n    assert.include(\"\", \"\");\n    assert.include([1, 2, 3], 3);\n\n    // .include should work with Error objects and objects with a custom\n    // `@@toStringTag`.\n    assert.include(new Error(\"foo\"), { message: \"foo\" });\n    assert.include({ a: 1, [Symbol.toStringTag]: \"foo\" }, { a: 1 });\n\n    var obj1 = { a: 1 },\n      obj2 = { b: 2 };\n    assert.include([obj1, obj2], obj1);\n    assert.include({ foo: obj1, bar: obj2 }, { foo: obj1 });\n    assert.include({ foo: obj1, bar: obj2 }, { foo: obj1, bar: obj2 });\n\n    var map = new Map();\n    var val = [{ a: 1 }];\n    map.set(\"a\", val);\n    map.set(\"b\", 2);\n    map.set(\"c\", -0);\n    map.set(\"d\", NaN);\n\n    assert.include(map, val);\n    assert.include(map, 2);\n    assert.include(map, 0);\n    assert.include(map, NaN);\n\n    var set = new Set();\n    var val = [{ a: 1 }];\n    set.add(val);\n    set.add(2);\n    set.add(-0);\n    set.add(NaN);\n\n    assert.include(set, val);\n    assert.include(set, 2);\n    assert.include(set, NaN);\n\n    var ws = new WeakSet();\n    var val = [{ a: 1 }];\n    ws.add(val);\n\n    assert.include(ws, val);\n\n    var sym1 = Symbol(),\n      sym2 = Symbol();\n    assert.include([sym1, sym2], sym1);\n\n    expect(() => {\n      assert.include(\"foobar\", \"baz\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to include 'baz'\");\n\n    expect(() => {\n      assert.include([{ a: 1 }, { b: 2 }], { a: 1 });\n    }).to.throw(\n      AssertionError,\n      \"expected [ { a: 1 }, { b: 2 } ] to include { a: 1 }\"\n    );\n\n    expect(() => {\n      assert.include(\n        { foo: { a: 1 }, bar: { b: 2 } },\n        { foo: { a: 1 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { foo: { a: 1 }, bar: { b: 2 } } to have property 'foo' of { a: 1 }, but got { a: 1 }\"\n    );\n\n    expect(() => {\n      assert.include(true, true, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the given combination of arguments (boolean and boolean) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a boolean\"\n    );\n\n    expect(() => {\n      assert.include(42, \"bar\");\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (number and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\"\n    );\n\n    expect(() => {\n      assert.include(null, 42);\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (null and number) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a number\"\n    );\n\n    expect(() => {\n      assert.include(undefined, \"bar\");\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\"\n    );\n  });\n\n  it(\"notInclude\", () => {\n    assert.notInclude(\"foobar\", \"baz\");\n    assert.notInclude([1, 2, 3], 4);\n\n    var obj1 = { a: 1 },\n      obj2 = { b: 2 };\n    assert.notInclude([obj1, obj2], { a: 1 });\n    assert.notInclude({ foo: obj1, bar: obj2 }, { foo: { a: 1 } });\n    assert.notInclude({ foo: obj1, bar: obj2 }, { foo: obj1, bar: { b: 2 } });\n\n    var map = new Map();\n    var val = [{ a: 1 }];\n    map.set(\"a\", val);\n    map.set(\"b\", 2);\n\n    assert.notInclude(map, [{ a: 1 }]);\n    assert.notInclude(map, 3);\n\n    var set = new Set();\n    var val = [{ a: 1 }];\n    set.add(val);\n    set.add(2);\n\n    assert.include(set, val);\n    assert.include(set, 2);\n\n    assert.notInclude(set, [{ a: 1 }]);\n    assert.notInclude(set, 3);\n\n    var ws = new WeakSet();\n    var val = [{ a: 1 }];\n    ws.add(val);\n\n    assert.notInclude(ws, [{ a: 1 }]);\n    assert.notInclude(ws, {});\n\n    var sym1 = Symbol(),\n      sym2 = Symbol(),\n      sym3 = Symbol();\n    assert.notInclude([sym1, sym2], sym3);\n\n    expect(() => {\n      var obj1 = { a: 1 },\n        obj2 = { b: 2 };\n      assert.notInclude([obj1, obj2], obj1, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 } ] to not include { a: 1 }\"\n    );\n\n    expect(() => {\n      var obj1 = { a: 1 },\n        obj2 = { b: 2 };\n      assert.notInclude(\n        { foo: obj1, bar: obj2 },\n        { foo: obj1, bar: obj2 },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { foo: { a: 1 }, bar: { b: 2 } } to not have property 'foo' of { a: 1 }\"\n    );\n\n    expect(() => {\n      assert.notInclude(true, true, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the given combination of arguments (boolean and boolean) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a boolean\"\n    );\n\n    expect(() => {\n      assert.notInclude(42, \"bar\");\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (number and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\"\n    );\n\n    expect(() => {\n      assert.notInclude(null, 42);\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (null and number) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a number\"\n    );\n\n    expect(() => {\n      assert.notInclude(undefined, \"bar\");\n    }).to.throw(\n      AssertionError,\n      \"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\"\n    );\n\n    expect(() => {\n      assert.notInclude(\"foobar\", \"bar\");\n    }).to.throw(AssertionError, \"expected 'foobar' to not include 'bar'\");\n  });\n\n  it(\"deepInclude and notDeepInclude\", () => {\n    var obj1 = { a: 1 },\n      obj2 = { b: 2 };\n    assert.deepInclude([obj1, obj2], { a: 1 });\n    assert.notDeepInclude([obj1, obj2], { a: 9 });\n    assert.notDeepInclude([obj1, obj2], { z: 1 });\n    assert.deepInclude({ foo: obj1, bar: obj2 }, { foo: { a: 1 } });\n    assert.deepInclude(\n      { foo: obj1, bar: obj2 },\n      { foo: { a: 1 }, bar: { b: 2 } }\n    );\n    assert.notDeepInclude({ foo: obj1, bar: obj2 }, { foo: { a: 9 } });\n    assert.notDeepInclude({ foo: obj1, bar: obj2 }, { foo: { z: 1 } });\n    assert.notDeepInclude({ foo: obj1, bar: obj2 }, { baz: { a: 1 } });\n    assert.notDeepInclude(\n      { foo: obj1, bar: obj2 },\n      { foo: { a: 1 }, bar: { b: 9 } }\n    );\n\n    var map = new Map();\n    map.set(1, [{ a: 1 }]);\n\n    assert.deepInclude(map, [{ a: 1 }]);\n\n    var set = new Set();\n    set.add([{ a: 1 }]);\n\n    assert.deepInclude(set, [{ a: 1 }]);\n\n    expect(() => {\n      assert.deepInclude(new WeakSet(), {}, \"foo\");\n    }).to.throw(\n      AssertionError,\n      \"foo: unable to use .deep.include with WeakSet\"\n    );\n\n    expect(() => {\n      assert.deepInclude([obj1, obj2], { a: 9 }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 } ] to deep include { a: 9 }\"\n    );\n\n    expect(() => {\n      assert.notDeepInclude([obj1, obj2], { a: 1 });\n    }).to.throw(\n      AssertionError,\n      \"expected [ { a: 1 }, { b: 2 } ] to not deep include { a: 1 }\"\n    );\n\n    expect(() => {\n      assert.deepInclude(\n        { foo: obj1, bar: obj2 },\n        { foo: { a: 1 }, bar: { b: 9 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { foo: { a: 1 }, bar: { b: 2 } } to have deep property 'bar' of { b: 9 }, but got { b: 2 }\"\n    );\n\n    expect(() => {\n      assert.notDeepInclude(\n        { foo: obj1, bar: obj2 },\n        { foo: { a: 1 }, bar: { b: 2 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { foo: { a: 1 }, bar: { b: 2 } } to not have deep property 'foo' of { a: 1 }\"\n    );\n  });\n\n  it(\"nestedInclude and notNestedInclude\", () => {\n    assert.nestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.b[1]\": \"y\" });\n    assert.notNestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.b[1]\": \"x\" });\n    assert.notNestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.c\": \"y\" });\n\n    assert.notNestedInclude({ a: { b: [{ x: 1 }] } }, { \"a.b[0]\": { x: 1 } });\n\n    assert.nestedInclude({ \".a\": { \"[b]\": \"x\" } }, { \"\\\\.a.\\\\[b\\\\]\": \"x\" });\n    assert.notNestedInclude({ \".a\": { \"[b]\": \"x\" } }, { \"\\\\.a.\\\\[b\\\\]\": \"y\" });\n\n    expect(() => {\n      assert.nestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.b[1]\": \"x\" }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ 'x', 'y' ] } } to have nested property 'a.b[1]' of 'x', but got 'y'\"\n    );\n\n    expect(() => {\n      assert.nestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.b[1]\": \"x\" }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ 'x', 'y' ] } } to have nested property 'a.b[1]' of 'x', but got 'y'\"\n    );\n\n    expect(() => {\n      assert.nestedInclude({ a: { b: [\"x\", \"y\"] } }, { \"a.c\": \"y\" });\n    }).to.throw(\n      AssertionError,\n      \"expected { a: { b: [ 'x', 'y' ] } } to have nested property 'a.c'\"\n    );\n\n    expect(() => {\n      assert.notNestedInclude(\n        { a: { b: [\"x\", \"y\"] } },\n        { \"a.b[1]\": \"y\" },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ 'x', 'y' ] } } to not have nested property 'a.b[1]' of 'y'\"\n    );\n  });\n\n  it(\"deepNestedInclude and notDeepNestedInclude\", () => {\n    assert.deepNestedInclude({ a: { b: [{ x: 1 }] } }, { \"a.b[0]\": { x: 1 } });\n    assert.notDeepNestedInclude(\n      { a: { b: [{ x: 1 }] } },\n      { \"a.b[0]\": { y: 2 } }\n    );\n    assert.notDeepNestedInclude({ a: { b: [{ x: 1 }] } }, { \"a.c\": { x: 1 } });\n\n    assert.deepNestedInclude(\n      { \".a\": { \"[b]\": { x: 1 } } },\n      { \"\\\\.a.\\\\[b\\\\]\": { x: 1 } }\n    );\n    assert.notDeepNestedInclude(\n      { \".a\": { \"[b]\": { x: 1 } } },\n      { \"\\\\.a.\\\\[b\\\\]\": { y: 2 } }\n    );\n\n    expect(() => {\n      assert.deepNestedInclude(\n        { a: { b: [{ x: 1 }] } },\n        { \"a.b[0]\": { y: 2 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ { x: 1 } ] } } to have deep nested property 'a.b[0]' of { y: 2 }, but got { x: 1 }\"\n    );\n\n    expect(() => {\n      assert.deepNestedInclude(\n        { a: { b: [{ x: 1 }] } },\n        { \"a.b[0]\": { y: 2 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ { x: 1 } ] } } to have deep nested property 'a.b[0]' of { y: 2 }, but got { x: 1 }\"\n    );\n\n    expect(() => {\n      assert.deepNestedInclude({ a: { b: [{ x: 1 }] } }, { \"a.c\": { x: 1 } });\n    }).to.throw(\n      AssertionError,\n      \"expected { a: { b: [ { x: 1 } ] } } to have deep nested property 'a.c'\"\n    );\n\n    expect(() => {\n      assert.notDeepNestedInclude(\n        { a: { b: [{ x: 1 }] } },\n        { \"a.b[0]\": { x: 1 } },\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: [ { x: 1 } ] } } to not have deep nested property 'a.b[0]' of { x: 1 }\"\n    );\n  });\n\n  it(\"ownInclude and notOwnInclude\", () => {\n    assert.ownInclude({ a: 1 }, { a: 1 });\n    assert.notOwnInclude({ a: 1 }, { a: 3 });\n    assert.notOwnInclude({ a: 1 }, { toString: Object.prototype.toString });\n\n    assert.notOwnInclude({ a: { b: 2 } }, { a: { b: 2 } });\n\n    expect(() => {\n      assert.ownInclude({ a: 1 }, { a: 3 }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: 1 } to have own property 'a' of 3, but got 1\"\n    );\n\n    expect(() => {\n      assert.ownInclude({ a: 1 }, { a: 3 }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: 1 } to have own property 'a' of 3, but got 1\"\n    );\n\n    expect(() => {\n      assert.ownInclude({ a: 1 }, { toString: Object.prototype.toString });\n    }).to.throw(\n      AssertionError,\n      \"expected { a: 1 } to have own property 'toString'\"\n    );\n\n    expect(() => {\n      assert.notOwnInclude({ a: 1 }, { a: 1 }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: 1 } to not have own property 'a' of 1\"\n    );\n  });\n\n  it(\"deepOwnInclude and notDeepOwnInclude\", () => {\n    assert.deepOwnInclude({ a: { b: 2 } }, { a: { b: 2 } });\n    assert.notDeepOwnInclude({ a: { b: 2 } }, { a: { c: 3 } });\n    assert.notDeepOwnInclude(\n      { a: { b: 2 } },\n      { toString: Object.prototype.toString }\n    );\n\n    expect(() => {\n      assert.deepOwnInclude({ a: { b: 2 } }, { a: { c: 3 } }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: 2 } } to have deep own property 'a' of { c: 3 }, but got { b: 2 }\"\n    );\n\n    expect(() => {\n      assert.deepOwnInclude({ a: { b: 2 } }, { a: { c: 3 } }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: 2 } } to have deep own property 'a' of { c: 3 }, but got { b: 2 }\"\n    );\n\n    expect(() => {\n      assert.deepOwnInclude(\n        { a: { b: 2 } },\n        { toString: Object.prototype.toString }\n      );\n    }).to.throw(\n      AssertionError,\n      \"expected { a: { b: 2 } } to have deep own property 'toString'\"\n    );\n\n    expect(() => {\n      assert.notDeepOwnInclude({ a: { b: 2 } }, { a: { b: 2 } }, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected { a: { b: 2 } } to not have deep own property 'a' of { b: 2 }\"\n    );\n  });\n\n  it(\"lengthOf\", () => {\n    assert.lengthOf([1, 2, 3], 3);\n    assert.lengthOf(\"foobar\", 6);\n\n    expect(() => {\n      assert.lengthOf(\"foobar\", 5, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foobar' to have a length of 5 but got 6\"\n    );\n\n    expect(() => {\n      assert.lengthOf(1, 5);\n    }).to.throw(AssertionError, \"expected 1 to have property 'length'\");\n  });\n\n  it(\"match\", () => {\n    assert.match(\"foobar\", /^foo/);\n    assert.notMatch(\"foobar\", /^bar/);\n\n    expect(() => {\n      assert.match(\"foobar\", /^bar/i, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to match /^bar/i\");\n\n    expect(() => {\n      assert.notMatch(\"foobar\", /^foo/i, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' not to match /^foo/i\");\n  });\n});\n\ndescribe(\"expect\", () => {\n  const sym = Symbol();\n\n  describe(\"proxify\", () => {\n    it(\"throws when invalid property follows expect\", function () {\n      expect(() => {\n        expect(42).pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"throws when invalid property follows language chain\", function () {\n      expect(() => {\n        expect(42).to.pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"throws when invalid property follows property assertion\", function () {\n      expect(() => {\n        expect(42).ok.pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"throws when invalid property follows uncalled method assertion\", function () {\n      expect(() => {\n        expect(42).equal.pizza;\n      }).to.throw(\n        Error,\n        'Invalid Chai property: equal.pizza. See docs for proper usage of \"equal\".'\n      );\n    });\n\n    it(\"throws when invalid property follows called method assertion\", function () {\n      expect(() => {\n        expect(42).equal(42).pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"throws when invalid property follows uncalled chainable method assertion\", function () {\n      expect(() => {\n        expect(42).a.pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"throws when invalid property follows called chainable method assertion\", function () {\n      expect(() => {\n        expect(42).a(\"number\").pizza;\n      }).to.throw(Error, \"Invalid Chai property: pizza\");\n    });\n\n    it(\"doesn't throw if invalid property is excluded via config\", function () {\n      expect(() => {\n        expect(42).then;\n      }).to.not.throw();\n    });\n  });\n\n  it(\"no-op chains\", () => {\n    [\n      \"to\",\n      \"be\",\n      \"been\",\n      \"is\",\n      \"and\",\n      \"has\",\n      \"have\",\n      \"with\",\n      \"that\",\n      \"which\",\n      \"at\",\n      \"of\",\n      \"same\",\n      \"but\",\n      \"does\",\n    ].forEach((chain) => {\n      // tests that chain exists\n      expect(expect(1)[chain]).not.undefined;\n\n      // tests methods\n      expect(1)[chain].equal(1);\n\n      // tests properties that assert\n      expect(false)[chain].false;\n\n      // tests not\n      expect(false)[chain].not.true;\n\n      // tests chainable methods\n      expect([1, 2, 3])[chain].contains(1);\n    });\n  });\n\n  it(\"fail\", () => {\n    expect(() => {\n      expect.fail(0, 1, \"this has failed\");\n    }).to.throw(AssertionError, \"this has failed\");\n  });\n\n  it(\"true\", () => {\n    expect(true).to.be.true;\n    expect(false).to.not.be.true;\n    expect(1).to.not.be.true;\n\n    expect(() => {\n      expect(\"test\", \"blah\").to.be.true;\n    }).to.throw(AssertionError, \"blah: expected 'test' to be true\");\n  });\n\n  it(\"ok\", () => {\n    expect(true).to.be.ok;\n    expect(false).to.not.be.ok;\n    expect(1).to.be.ok;\n    expect(0).to.not.be.ok;\n\n    expect(() => {\n      expect(\"\", \"blah\").to.be.ok;\n    }).to.throw(AssertionError, \"blah: expected '' to be truthy\");\n\n    expect(() => {\n      expect(\"test\").to.not.be.ok;\n    }).to.throw(AssertionError, \"expected 'test' to be falsy\");\n  });\n\n  it(\"false\", () => {\n    expect(false).to.be.false;\n    expect(true).to.not.be.false;\n    expect(0).to.not.be.false;\n\n    expect(() => {\n      expect(\"\", \"blah\").to.be.false;\n    }).to.throw(AssertionError, \"blah: expected '' to be false\");\n  });\n\n  it(\"null\", () => {\n    expect(null).to.be.null;\n    expect(false).to.not.be.null;\n\n    expect(() => {\n      expect(\"\", \"blah\").to.be.null;\n    }).to.throw(AssertionError, \"blah: expected '' to be null\");\n  });\n\n  it(\"undefined\", () => {\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;\n\n    expect(() => {\n      expect(\"\", \"blah\").to.be.undefined;\n    }).to.throw(AssertionError, \"blah: expected '' to be undefined\");\n  });\n\n  it(\"exist\", () => {\n    const foo = \"bar\";\n    var bar;\n\n    expect(foo).to.exist;\n    expect(bar).to.not.exist;\n    expect(0).to.exist;\n    expect(false).to.exist;\n    expect(\"\").to.exist;\n\n    expect(() => {\n      expect(bar, \"blah\").to.exist;\n    }).to.throw(AssertionError, \"blah: expected undefined to exist\");\n\n    expect(() => {\n      expect(foo).to.not.exist(foo);\n    }).to.throw(AssertionError, \"expected 'bar' to not exist\");\n  });\n\n  it(\"arguments\", () => {\n    var args = (function () {\n      return arguments;\n    })(1, 2, 3);\n    expect(args).to.be.arguments;\n    expect([]).to.not.be.arguments;\n    expect(args).to.be.an(\"arguments\").and.be.arguments;\n    expect([]).to.be.an(\"array\").and.not.be.Arguments;\n\n    expect(() => {\n      expect([]).to.be.arguments;\n    }).to.throw(AssertionError, \"expected [] to be arguments but got Array\");\n  });\n\n  it(\"instanceof\", () => {\n    function Foo() {}\n    expect(new Foo()).to.be.an.instanceof(Foo);\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(1, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: The instanceof assertion needs a constructor but Number was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo(), \"blah\").to.an.instanceof(1);\n    }).to.throw(\n      AssertionError,\n      \"blah: The instanceof assertion needs a constructor but Number was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(\"batman\");\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but String was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof({});\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but Object was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(true);\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but Boolean was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(null);\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but null was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(undefined);\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but undefined was given.\"\n    );\n\n    expect(() => {\n      function Thing() {}\n      var t = new Thing();\n      Thing.prototype = 1337;\n      expect(t).to.an.instanceof(Thing);\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but Function was given.\"\n    );\n\n    expect(() => {\n      expect(new Foo()).to.an.instanceof(Symbol());\n    }).to.throw(\n      AssertionError,\n      \"The instanceof assertion needs a constructor but Symbol was given.\"\n    );\n\n    expect(() => {\n      var FakeConstructor = {};\n      var fakeInstanceB = 4;\n      FakeConstructor[Symbol.hasInstance] = function (val) {\n        return val === 3;\n      };\n      expect(fakeInstanceB).to.be.an.instanceof(FakeConstructor);\n    }).to.throw(\n      AssertionError,\n      \"expected 4 to be an instance of an unnamed constructor\"\n    );\n\n    expect(() => {\n      var FakeConstructor = {};\n      var fakeInstanceB = 4;\n      FakeConstructor[Symbol.hasInstance] = function (val) {\n        return val === 4;\n      };\n      expect(fakeInstanceB).to.not.be.an.instanceof(FakeConstructor);\n    }).to.throw(\n      AssertionError,\n      \"expected 4 to not be an instance of an unnamed constructor\"\n    );\n\n    expect(() => {\n      expect(3).to.an.instanceof(Foo, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 3 to be an instance of Foo\");\n\n    expect(() => {\n      expect(3, \"blah\").to.an.instanceof(Foo);\n    }).to.throw(AssertionError, \"blah: expected 3 to be an instance of Foo\");\n  });\n\n  it(\"within(start, finish)\", () => {\n    expect(5).to.be.within(5, 10);\n    expect(5).to.be.within(3, 6);\n    expect(5).to.be.within(3, 5);\n    expect(5).to.not.be.within(1, 3);\n    expect(\"foo\").to.have.length.within(2, 4);\n    expect(\"foo\").to.have.lengthOf.within(2, 4);\n    expect([1, 2, 3]).to.have.length.within(2, 4);\n    expect([1, 2, 3]).to.have.lengthOf.within(2, 4);\n\n    expect(() => {\n      expect(5).to.not.be.within(4, 6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 to not be within 4..6\");\n\n    expect(() => {\n      expect(5, \"blah\").to.not.be.within(4, 6);\n    }).to.throw(AssertionError, \"blah: expected 5 to not be within 4..6\");\n\n    expect(() => {\n      expect(10).to.be.within(50, 100, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 10 to be within 50..100\");\n\n    expect(() => {\n      expect(\"foo\").to.have.length.within(5, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length within 5..7\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.within(5, 7);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length within 5..7\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.within(5, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length within 5..7\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.within(5, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length within 5..7\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.lengthOf.within(5, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length within 5..7\"\n    );\n\n    expect(() => {\n      expect(null).to.be.within(0, 1, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.within(0, 1);\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.within(null, 1, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(1, \"blah\").to.be.within(null, 1);\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(1).to.be.within(0, null, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(1, \"blah\").to.be.within(0, null);\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(null).to.not.be.within(0, 1, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.not.be.within(null, 1, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(1).to.not.be.within(0, null, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(1).to.have.length.within(5, 7, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1, \"blah\").to.have.length.within(5, 7);\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1).to.have.lengthOf.within(5, 7, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n  });\n\n  it(\"within(start, finish) (dates)\", () => {\n    const now = new Date();\n    const oneSecondAgo = new Date(now.getTime() - 1000);\n    const oneSecondAfter = new Date(now.getTime() + 1000);\n    const nowISO = now.toISOString();\n    const beforeISO = oneSecondAgo.toISOString();\n    const afterISO = oneSecondAfter.toISOString();\n\n    expect(now).to.be.within(oneSecondAgo, oneSecondAfter);\n    expect(now).to.be.within(now, oneSecondAfter);\n    expect(now).to.be.within(now, now);\n    expect(oneSecondAgo).to.not.be.within(now, oneSecondAfter);\n\n    expect(() => {\n      expect(now).to.not.be.within(now, oneSecondAfter, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" +\n        nowISO +\n        \" to not be within \" +\n        nowISO +\n        \"..\" +\n        afterISO\n    );\n\n    expect(() => {\n      expect(now, \"blah\").to.not.be.within(oneSecondAgo, oneSecondAfter);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" +\n        nowISO +\n        \" to not be within \" +\n        beforeISO +\n        \"..\" +\n        afterISO\n    );\n\n    expect(() => {\n      expect(now).to.have.length.within(5, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + nowISO + \" to have property 'length'\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.within(now, 7, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: the arguments to within must be numbers\"\n    );\n\n    expect(() => {\n      expect(now).to.be.within(now, 1, \"blah\");\n    }).to.throw(AssertionError, \"blah: the arguments to within must be dates\");\n\n    expect(() => {\n      expect(now).to.be.within(null, now, \"blah\");\n    }).to.throw(AssertionError, \"blah: the arguments to within must be dates\");\n\n    expect(() => {\n      expect(now).to.be.within(now, undefined, \"blah\");\n    }).to.throw(AssertionError, \"blah: the arguments to within must be dates\");\n\n    expect(() => {\n      expect(now, \"blah\").to.be.within(1, now);\n    }).to.throw(AssertionError, \"blah: the arguments to within must be dates\");\n\n    expect(() => {\n      expect(now, \"blah\").to.be.within(now, 1);\n    }).to.throw(AssertionError, \"blah: the arguments to within must be dates\");\n\n    expect(() => {\n      expect(null).to.not.be.within(now, oneSecondAfter, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n  });\n\n  it(\"above(n)\", () => {\n    expect(5).to.be.above(2);\n    expect(5).to.be.greaterThan(2);\n    expect(5).to.not.be.above(5);\n    expect(5).to.not.be.above(6);\n    expect(\"foo\").to.have.length.above(2);\n    expect(\"foo\").to.have.lengthOf.above(2);\n    expect([1, 2, 3]).to.have.length.above(2);\n    expect([1, 2, 3]).to.have.lengthOf.above(2);\n\n    expect(() => {\n      expect(5).to.be.above(6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 to be above 6\");\n\n    expect(() => {\n      expect(5, \"blah\").to.be.above(6);\n    }).to.throw(AssertionError, \"blah: expected 5 to be above 6\");\n\n    expect(() => {\n      expect(10).to.not.be.above(6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 10 to be at most 6\");\n\n    expect(() => {\n      expect(\"foo\").to.have.length.above(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length above 4 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.above(4);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length above 4 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.above(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length above 4 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.above(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length above 4 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.lengthOf.above(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length above 4 but got 3\"\n    );\n\n    expect(() => {\n      expect(null).to.be.above(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.above(0);\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.above(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to above must be a number\");\n\n    expect(() => {\n      expect(1, \"blah\").to.be.above(null);\n    }).to.throw(AssertionError, \"blah: the argument to above must be a number\");\n\n    expect(() => {\n      expect(null).to.not.be.above(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.not.be.above(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to above must be a number\");\n\n    expect(() => {\n      expect(1).to.have.length.above(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1, \"blah\").to.have.length.above(0);\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1).to.have.lengthOf.above(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n  });\n\n  it(\"above(n) (dates)\", () => {\n    const now = new Date();\n    const oneSecondAgo = new Date(now.getTime() - 1000);\n    const oneSecondAfter = new Date(now.getTime() + 1000);\n\n    expect(now).to.be.above(oneSecondAgo);\n    expect(now).to.be.greaterThan(oneSecondAgo);\n    expect(now).to.not.be.above(now);\n    expect(now).to.not.be.above(oneSecondAfter);\n\n    expect(() => {\n      expect(now).to.be.above(oneSecondAfter, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" +\n        now.toISOString() +\n        \" to be above \" +\n        oneSecondAfter.toISOString()\n    );\n\n    expect(() => {\n      expect(10).to.not.be.above(6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 10 to be at most 6\");\n\n    expect(() => {\n      expect(now).to.have.length.above(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + now.toISOString() + \" to have property 'length'\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.above(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to above must be a number\");\n\n    expect(() => {\n      expect(null).to.be.above(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(now).to.be.above(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to above must be a date\");\n\n    expect(() => {\n      expect(null).to.have.length.above(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: Target cannot be null or undefined.\");\n  });\n\n  it(\"least(n)\", () => {\n    expect(5).to.be.at.least(2);\n    expect(5).to.be.at.least(5);\n    expect(5).to.not.be.at.least(6);\n    expect(\"foo\").to.have.length.of.at.least(2);\n    expect(\"foo\").to.have.lengthOf.at.least(2);\n    expect([1, 2, 3]).to.have.length.of.at.least(2);\n    expect([1, 2, 3]).to.have.lengthOf.at.least(2);\n\n    expect(() => {\n      expect(5).to.be.at.least(6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 5 to be at least 6\");\n\n    expect(() => {\n      expect(5, \"blah\").to.be.at.least(6);\n    }).to.throw(AssertionError, \"blah: expected 5 to be at least 6\");\n\n    expect(() => {\n      expect(10).to.not.be.at.least(6, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 10 to be below 6\");\n\n    expect(() => {\n      expect(\"foo\").to.have.length.of.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at least 4 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.of.at.least(4);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at least 4 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at least 4 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.of.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length at least 4 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.lengthOf.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length at least 4 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3, 4]).to.not.have.length.of.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3, 4 ] to have a length below 4\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3, 4]).to.not.have.lengthOf.at.least(4, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3, 4 ] to have a length below 4\"\n    );\n\n    expect(() => {\n      expect(null).to.be.at.least(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.at.least(0);\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.at.least(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to least must be a number\");\n\n    expect(() => {\n      expect(1, \"blah\").to.be.at.least(null);\n    }).to.throw(AssertionError, \"blah: the argument to least must be a number\");\n\n    expect(() => {\n      expect(null).to.not.be.at.least(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.not.be.at.least(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to least must be a number\");\n\n    expect(() => {\n      expect(1).to.have.length.at.least(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1, \"blah\").to.have.length.at.least(0);\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1).to.have.lengthOf.at.least(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n  });\n\n  it(\"below(n)\", () => {\n    expect(2).to.be.below(5);\n    expect(2).to.be.lessThan(5);\n    expect(2).to.not.be.below(2);\n    expect(2).to.not.be.below(1);\n    expect(\"foo\").to.have.length.below(4);\n    expect(\"foo\").to.have.lengthOf.below(4);\n    expect([1, 2, 3]).to.have.length.below(4);\n    expect([1, 2, 3]).to.have.lengthOf.below(4);\n\n    expect(() => {\n      expect(6).to.be.below(5, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 6 to be below 5\");\n\n    expect(() => {\n      expect(6, \"blah\").to.be.below(5);\n    }).to.throw(AssertionError, \"blah: expected 6 to be below 5\");\n\n    expect(() => {\n      expect(6).to.not.be.below(10, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 6 to be at least 10\");\n\n    expect(() => {\n      expect(\"foo\").to.have.length.below(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.below(2);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.below(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.below(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.lengthOf.below(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(null).to.be.below(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.below(0);\n    }, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.below(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to below must be a number\");\n\n    expect(() => {\n      expect(1, \"blah\").to.be.below(null);\n    }).to.throw(AssertionError, \"blah: the argument to below must be a number\");\n\n    expect(() => {\n      expect(null).to.not.be.below(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.not.be.below(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to below must be a number\");\n\n    expect(() => {\n      expect(1).to.have.length.below(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1, \"blah\").to.have.length.below(0);\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1).to.have.lengthOf.below(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n  });\n\n  it(\"below(n) (dates)\", () => {\n    const now = new Date();\n    const oneSecondAgo = new Date(now.getTime() - 1000);\n    const oneSecondAfter = new Date(now.getTime() + 1000);\n\n    expect(now).to.be.below(oneSecondAfter);\n    expect(oneSecondAgo).to.be.lessThan(now);\n    expect(now).to.not.be.below(oneSecondAgo);\n    expect(oneSecondAfter).to.not.be.below(oneSecondAgo);\n\n    expect(() => {\n      expect(now).to.be.below(oneSecondAgo, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" +\n        now.toISOString() +\n        \" to be below \" +\n        oneSecondAgo.toISOString()\n    );\n\n    expect(() => {\n      expect(now).to.not.be.below(oneSecondAfter, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" +\n        now.toISOString() +\n        \" to be at least \" +\n        oneSecondAfter.toISOString()\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.length.below(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length below 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(null).to.be.below(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.below(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to below must be a number\");\n\n    expect(() => {\n      expect(now).to.not.be.below(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to below must be a date\");\n\n    expect(() => {\n      expect(now).to.have.length.below(0, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + now.toISOString() + \" to have property 'length'\"\n    );\n\n    expect(() => {\n      expect(\"asdasd\").to.have.length.below(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to below must be a number\");\n  });\n\n  it(\"most(n)\", () => {\n    expect(2).to.be.at.most(5);\n    expect(2).to.be.at.most(2);\n    expect(2).to.not.be.at.most(1);\n    expect(\"foo\").to.have.length.of.at.most(4);\n    expect(\"foo\").to.have.lengthOf.at.most(4);\n    expect([1, 2, 3]).to.have.length.of.at.most(4);\n    expect([1, 2, 3]).to.have.lengthOf.at.most(4);\n\n    expect(() => {\n      expect(6).to.be.at.most(5, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 6 to be at most 5\");\n\n    expect(() => {\n      expect(6, \"blah\").to.be.at.most(5);\n    }).to.throw(AssertionError, \"blah: expected 6 to be at most 5\");\n\n    expect(() => {\n      expect(6).to.not.be.at.most(10, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 6 to be above 10\");\n\n    expect(() => {\n      expect(\"foo\").to.have.length.of.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at most 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.of.at.most(2);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at most 2 but got 3\"\n    );\n\n    expect(() => {\n      expect(\"foo\").to.have.lengthOf.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'foo' to have a length at most 2 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.length.of.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length at most 2 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.have.lengthOf.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have a length at most 2 but got 3\"\n    );\n\n    expect(() => {\n      expect([1, 2]).to.not.have.length.of.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2 ] to have a length above 2\"\n    );\n\n    expect(() => {\n      expect([1, 2]).to.not.have.lengthOf.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2 ] to have a length above 2\"\n    );\n\n    expect(() => {\n      expect(null).to.be.at.most(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.at.most(0);\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.be.at.most(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect(1, \"blah\").to.be.at.most(null);\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect(null).to.not.be.at.most(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(1).to.not.be.at.most(null, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect(1).to.have.length.of.at.most(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1, \"blah\").to.have.length.of.at.most(0);\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n\n    expect(() => {\n      expect(1).to.have.lengthOf.at.most(0, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 1 to have property 'length'\");\n  });\n\n  it(\"most(n) (dates)\", () => {\n    const now = new Date();\n    const oneSecondBefore = new Date(now.getTime() - 1000);\n    const oneSecondAfter = new Date(now.getTime() + 1000);\n    const nowISO = now.toISOString();\n    const beforeISO = oneSecondBefore.toISOString();\n\n    expect(now).to.be.at.most(oneSecondAfter);\n    expect(now).to.be.at.most(now);\n    expect(now).to.not.be.at.most(oneSecondBefore);\n\n    expect(() => {\n      expect(now).to.be.at.most(oneSecondBefore, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + nowISO + \" to be at most \" + beforeISO\n    );\n\n    expect(() => {\n      expect(now).to.not.be.at.most(now, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + nowISO + \" to be above \" + nowISO\n    );\n\n    expect(() => {\n      expect(now).to.have.length.of.at.most(2, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected \" + nowISO + \" to have property 'length'\"\n    );\n\n    expect(() => {\n      expect(\"foo\", \"blah\").to.have.length.of.at.most(now);\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect([1, 2, 3]).to.not.have.length.of.at.most(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect(null).to.be.at.most(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected null to be a number or a date\");\n\n    expect(() => {\n      expect(now, \"blah\").to.be.at.most(null);\n    }).to.throw(AssertionError, \"blah: the argument to most must be a date\");\n\n    expect(() => {\n      expect(1).to.be.at.most(now, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to most must be a number\");\n\n    expect(() => {\n      expect(now, \"blah\").to.be.at.most(1);\n    }).to.throw(AssertionError, \"blah: the argument to most must be a date\");\n\n    expect(() => {\n      expect(now).to.not.be.at.most(undefined, \"blah\");\n    }).to.throw(AssertionError, \"blah: the argument to most must be a date\");\n  });\n\n  it(\"match(regexp)\", () => {\n    expect(\"foobar\").to.match(/^foo/);\n    expect(\"foobar\").to.matches(/^foo/);\n    expect(\"foobar\").to.not.match(/^bar/);\n\n    expect(() => {\n      expect(\"foobar\").to.match(/^bar/i, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to match /^bar/i\");\n\n    expect(() => {\n      expect(\"foobar\", \"blah\").to.match(/^bar/i);\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to match /^bar/i\");\n\n    expect(() => {\n      expect(\"foobar\").to.matches(/^bar/i, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to match /^bar/i\");\n\n    expect(() => {\n      expect(\"foobar\").to.not.match(/^foo/i, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' not to match /^foo/i\");\n  });\n\n  it(\"lengthOf(n)\", () => {\n    expect(\"test\").to.have.length(4);\n    expect(\"test\").to.have.lengthOf(4);\n    expect(\"test\").to.not.have.length(3);\n    expect(\"test\").to.not.have.lengthOf(3);\n    expect([1, 2, 3]).to.have.length(3);\n    expect([1, 2, 3]).to.have.lengthOf(3);\n\n    expect(() => {\n      expect(4).to.have.length(3, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 4 to have property 'length'\");\n\n    expect(() => {\n      expect(4, \"blah\").to.have.length(3);\n    }).to.throw(AssertionError, \"blah: expected 4 to have property 'length'\");\n\n    expect(() => {\n      expect(4).to.have.lengthOf(3, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 4 to have property 'length'\");\n\n    expect(() => {\n      expect(\"asd\").to.not.have.length(3, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'asd' to not have a length of 3\"\n    );\n    expect(() => {\n      expect(\"asd\").to.not.have.lengthOf(3, \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected 'asd' to not have a length of 3\"\n    );\n  });\n\n  it(\"eql(val)\", () => {\n    expect(\"test\").to.eql(\"test\");\n    expect({ foo: \"bar\" }).to.eql({ foo: \"bar\" });\n    expect(1).to.eql(1);\n    expect(\"4\").to.not.eql(4);\n    expect(sym).to.eql(sym);\n\n    expect(() => {\n      expect(4).to.eql(3, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 4 to deeply equal 3\");\n  });\n\n  it(\"equal(val)\", () => {\n    expect(\"test\").to.equal(\"test\");\n    expect(1).to.equal(1);\n    expect(sym).to.equal(sym);\n\n    expect(() => {\n      expect(4).to.equal(3, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 4 to equal 3\");\n\n    expect(() => {\n      expect(4, \"blah\").to.equal(3);\n    }).to.throw(AssertionError, \"blah: expected 4 to equal 3\");\n\n    expect(() => {\n      expect(\"4\").to.equal(4, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected '4' to equal 4\");\n  });\n\n  it(\"deep.equal(val)\", () => {\n    expect({ foo: \"bar\" }).to.deep.equal({ foo: \"bar\" });\n    expect({ foo: \"bar\" }).not.to.deep.equal({ foo: \"baz\" });\n  });\n\n  it(\"deep.equal(/regexp/)\", () => {\n    expect(/a/).to.deep.equal(/a/);\n    expect(/a/).not.to.deep.equal(/b/);\n    expect(/a/).not.to.deep.equal({});\n    expect(/a/g).to.deep.equal(/a/g);\n    expect(/a/g).not.to.deep.equal(/b/g);\n    expect(/a/i).to.deep.equal(/a/i);\n    expect(/a/i).not.to.deep.equal(/b/i);\n    expect(/a/m).to.deep.equal(/a/m);\n    expect(/a/m).not.to.deep.equal(/b/m);\n  });\n\n  it(\"deep.equal(Date)\", () => {\n    var a = new Date(1, 2, 3),\n      b = new Date(4, 5, 6);\n    expect(a).to.deep.equal(a);\n    expect(a).not.to.deep.equal(b);\n    expect(a).not.to.deep.equal({});\n  });\n\n  it(\"empty\", () => {\n    function FakeArgs() {}\n    FakeArgs.prototype.length = 0;\n\n    expect(\"\").to.be.empty;\n    expect(\"foo\").not.to.be.empty;\n    expect([]).to.be.empty;\n    expect([\"foo\"]).not.to.be.empty;\n    expect(new FakeArgs()).to.be.empty;\n    expect({ arguments: 0 }).not.to.be.empty;\n    expect({}).to.be.empty;\n    expect({ foo: \"bar\" }).not.to.be.empty;\n\n    expect(() => {\n      expect(new WeakMap(), \"blah\").not.to.be.empty;\n    }).to.throw(AssertionError, \"blah: .empty was passed a weak collection\");\n\n    expect(() => {\n      expect(new WeakSet(), \"blah\").not.to.be.empty;\n    }).to.throw(AssertionError, \"blah: .empty was passed a weak collection\");\n\n    expect(new Map()).to.be.empty;\n\n    // Not using Map constructor args because not supported in IE 11.\n    var map = new Map();\n    map.set(\"a\", 1);\n    expect(map).not.to.be.empty;\n\n    expect(() => {\n      expect(new Map()).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected Map{} not to be empty\");\n\n    map = new Map();\n    map.key = \"val\";\n    expect(map).to.be.empty;\n\n    expect(() => {\n      expect(map).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected Map{} not to be empty\");\n\n    expect(new Set()).to.be.empty;\n\n    // Not using Set constructor args because not supported in IE 11.\n    var set = new Set();\n    set.add(1);\n    expect(set).not.to.be.empty;\n\n    expect(() => {\n      expect(new Set()).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected Set{} not to be empty\");\n\n    set = new Set();\n    set.key = \"val\";\n    expect(set).to.be.empty;\n\n    expect(() => {\n      expect(set).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected Set{} not to be empty\");\n\n    expect(() => {\n      expect(\"\", \"blah\").not.to.be.empty;\n    }).to.throw(AssertionError, \"blah: expected '' not to be empty\");\n\n    expect(() => {\n      expect(\"foo\").to.be.empty;\n    }).to.throw(AssertionError, \"expected 'foo' to be empty\");\n\n    expect(() => {\n      expect([]).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected [] not to be empty\");\n\n    expect(() => {\n      expect([\"foo\"]).to.be.empty;\n    }).to.throw(AssertionError, \"expected [ 'foo' ] to be empty\");\n\n    expect(() => {\n      expect(new FakeArgs()).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected FakeArgs{} not to be empty\");\n\n    expect(() => {\n      expect({ arguments: 0 }).to.be.empty;\n    }).to.throw(AssertionError, \"expected { arguments: +0 } to be empty\");\n\n    expect(() => {\n      expect({}).not.to.be.empty;\n    }).to.throw(AssertionError, \"expected {} not to be empty\");\n\n    expect(() => {\n      expect({ foo: \"bar\" }).to.be.empty;\n    }).to.throw(AssertionError, \"expected { foo: 'bar' } to be empty\");\n\n    expect(() => {\n      expect(null, \"blah\").to.be.empty;\n    }).to.throw(\n      AssertionError,\n      \"blah: .empty was passed non-string primitive null\"\n    );\n\n    expect(() => {\n      expect(undefined).to.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive undefined\"\n    );\n\n    expect(() => {\n      expect().to.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive undefined\"\n    );\n\n    expect(() => {\n      expect(null).to.not.be.empty;\n    }).to.throw(AssertionError, \".empty was passed non-string primitive null\");\n\n    expect(() => {\n      expect(undefined).to.not.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive undefined\"\n    );\n\n    expect(() => {\n      expect().to.not.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive undefined\"\n    );\n\n    expect(() => {\n      expect(0).to.be.empty;\n    }).to.throw(AssertionError, \".empty was passed non-string primitive +0\");\n\n    expect(() => {\n      expect(1).to.be.empty;\n    }).to.throw(AssertionError, \".empty was passed non-string primitive 1\");\n\n    expect(() => {\n      expect(true).to.be.empty;\n    }).to.throw(AssertionError, \".empty was passed non-string primitive true\");\n\n    expect(() => {\n      expect(false).to.be.empty;\n    }).to.throw(AssertionError, \".empty was passed non-string primitive false\");\n\n    expect(() => {\n      expect(Symbol()).to.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive Symbol()\"\n    );\n\n    expect(() => {\n      expect(Symbol.iterator).to.be.empty;\n    }).to.throw(\n      AssertionError,\n      \".empty was passed non-string primitive Symbol(Symbol.iterator)\"\n    );\n\n    expect(() => {\n      expect(function () {}, \"blah\").to.be.empty;\n    }).to.throw(AssertionError, \"blah: .empty was passed a function\");\n\n    expect(() => {\n      expect(FakeArgs).to.be.empty;\n    }).to.throw(AssertionError, \".empty was passed a function FakeArgs\");\n  });\n\n  it(\"string()\", () => {\n    expect(\"foobar\").to.have.string(\"bar\");\n    expect(\"foobar\").to.have.string(\"foo\");\n    expect(\"foobar\").to.not.have.string(\"baz\");\n\n    expect(() => {\n      expect(3).to.have.string(\"baz\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 3 to be a string\");\n\n    expect(() => {\n      expect(3, \"blah\").to.have.string(\"baz\");\n    }).to.throw(AssertionError, \"blah: expected 3 to be a string\");\n\n    expect(() => {\n      expect(\"foobar\").to.have.string(\"baz\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to contain 'baz'\");\n\n    expect(() => {\n      expect(\"foobar\", \"blah\").to.have.string(\"baz\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to contain 'baz'\");\n\n    expect(() => {\n      expect(\"foobar\").to.not.have.string(\"bar\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected 'foobar' to not contain 'bar'\");\n  });\n\n  it(\"NaN\", () => {\n    expect(NaN).to.be.NaN;\n    expect(undefined).not.to.be.NaN;\n    expect(Infinity).not.to.be.NaN;\n    expect(\"foo\").not.to.be.NaN;\n    expect({}).not.to.be.NaN;\n    expect(4).not.to.be.NaN;\n    expect([]).not.to.be.NaN;\n\n    expect(() => {\n      expect(NaN, \"blah\").not.to.be.NaN;\n    }).to.throw(AssertionError, \"blah: expected NaN not to be NaN\");\n\n    expect(() => {\n      expect(undefined).to.be.NaN;\n    }).to.throw(AssertionError, \"expected undefined to be NaN\");\n\n    expect(() => {\n      expect(Infinity).to.be.NaN;\n    }).to.throw(AssertionError, \"expected Infinity to be NaN\");\n\n    expect(() => {\n      expect(\"foo\").to.be.NaN;\n    }).to.throw(AssertionError, \"expected 'foo' to be NaN\");\n\n    expect(() => {\n      expect({}).to.be.NaN;\n    }).to.throw(AssertionError, \"expected {} to be NaN\");\n\n    expect(() => {\n      expect(4).to.be.NaN;\n    }).to.throw(AssertionError, \"expected 4 to be NaN\");\n\n    expect(() => {\n      expect([]).to.be.NaN;\n    }).to.throw(AssertionError, \"expected [] to be NaN\");\n  });\n\n  it(\"finite\", function () {\n    expect(4).to.be.finite;\n    expect(-10).to.be.finite;\n\n    expect(() => {\n      expect(NaN, \"blah\").to.be.finite;\n    }).to.throw(AssertionError, \"blah: expected NaN to be a finite number\");\n\n    expect(() => {\n      expect(Infinity).to.be.finite;\n    }).to.throw(AssertionError, \"expected Infinity to be a finite number\");\n\n    expect(() => {\n      expect(\"foo\").to.be.finite;\n    }).to.throw(AssertionError, \"expected 'foo' to be a finite number\");\n\n    expect(() => {\n      expect([]).to.be.finite;\n    }).to.throw(AssertionError, \"expected [] to be a finite number\");\n\n    expect(() => {\n      expect({}).to.be.finite;\n    }).to.throw(AssertionError, \"expected {} to be a finite number\");\n  });\n\n  it(\"property(name)\", function () {\n    expect(\"test\").to.have.property(\"length\");\n    expect({ a: 1 }).to.have.property(\"toString\");\n    expect(4).to.not.have.property(\"length\");\n\n    expect({ \"foo.bar\": \"baz\" }).to.have.property(\"foo.bar\");\n    expect({ foo: { bar: \"baz\" } }).to.not.have.property(\"foo.bar\");\n\n    // Properties with the value 'undefined' are still properties\n    var obj = { foo: undefined };\n    Object.defineProperty(obj, \"bar\", {\n      get: function () {},\n    });\n    expect(obj).to.have.property(\"foo\");\n    expect(obj).to.have.property(\"bar\");\n\n    expect({ \"foo.bar[]\": \"baz\" }).to.have.property(\"foo.bar[]\");\n\n    expect(() => {\n      expect(\"asd\").to.have.property(\"foo\");\n    }).to.throw(AssertionError, \"expected 'asd' to have property 'foo'\");\n\n    expect(() => {\n      expect(\"asd\", \"blah\").to.have.property(\"foo\");\n    }).to.throw(AssertionError, \"blah: expected 'asd' to have property 'foo'\");\n\n    expect(() => {\n      expect({ foo: { bar: \"baz\" } }).to.have.property(\"foo.bar\");\n    }).to.throw(\n      AssertionError,\n      \"expected { foo: { bar: 'baz' } } to have property 'foo.bar'\"\n    );\n\n    expect(() => {\n      expect({ a: { b: 1 } }).to.have.own.nested.property(\"a.b\");\n    }).to.throw(\n      AssertionError,\n      'The \"nested\" and \"own\" flags cannot be combined.'\n    );\n\n    expect(() => {\n      expect({ a: { b: 1 } }, \"blah\").to.have.own.nested.property(\"a.b\");\n    }).to.throw(\n      AssertionError,\n      'blah: The \"nested\" and \"own\" flags cannot be combined.'\n    );\n\n    expect(() => {\n      expect(null, \"blah\").to.have.property(\"a\");\n    }).to.throw(AssertionError, \"blah: Target cannot be null or undefined.\");\n\n    expect(() => {\n      expect(undefined, \"blah\").to.have.property(\"a\");\n    }).to.throw(AssertionError, \"blah: Target cannot be null or undefined.\");\n  });\n\n  it(\"include()\", () => {\n    expect([\"foo\", \"bar\"]).to.include(\"foo\");\n    expect([\"foo\", \"bar\"]).to.include(\"foo\");\n    expect([\"foo\", \"bar\"]).to.include(\"bar\");\n    expect([1, 2]).to.include(1);\n    expect([\"foo\", \"bar\"]).to.not.include(\"baz\");\n    expect([\"foo\", \"bar\"]).to.not.include(1);\n\n    expect({ a: 1 }).to.include({ toString: Object.prototype.toString });\n\n    // .include should work with Error objects and objects with a custom\n    // `@@toStringTag`.\n    expect(new Error(\"foo\")).to.include({ message: \"foo\" });\n    var customObj = { a: 1 };\n    customObj[Symbol.toStringTag] = \"foo\";\n\n    expect(customObj).to.include({ a: 1 });\n\n    var obj1 = { a: 1 },\n      obj2 = { b: 2 };\n    expect([obj1, obj2]).to.include(obj1);\n    expect([obj1, obj2]).to.not.include({ a: 1 });\n    expect({ foo: obj1, bar: obj2 }).to.include({ foo: obj1 });\n    expect({ foo: obj1, bar: obj2 }).to.include({ foo: obj1, bar: obj2 });\n    expect({ foo: obj1, bar: obj2 }).to.not.include({ foo: { a: 1 } });\n    expect({ foo: obj1, bar: obj2 }).to.not.include({\n      foo: obj1,\n      bar: { b: 2 },\n    });\n\n    var map = new Map();\n    var val = [{ a: 1 }];\n    map.set(\"a\", val);\n    map.set(\"b\", 2);\n    map.set(\"c\", -0);\n    map.set(\"d\", NaN);\n\n    expect(map).to.include(val);\n    expect(map).to.not.include([{ a: 1 }]);\n    expect(map).to.include(2);\n    expect(map).to.not.include(3);\n    expect(map).to.include(0);\n    expect(map).to.include(NaN);\n\n    var set = new Set();\n    var val = [{ a: 1 }];\n    set.add(val);\n    set.add(2);\n    set.add(-0);\n    set.add(NaN);\n\n    expect(set).to.include(val);\n    expect(set).to.not.include([{ a: 1 }]);\n    expect(set).to.include(2);\n    expect(set).to.not.include(3);\n    expect(set).to.include(NaN);\n\n    var ws = new WeakSet();\n    var val = [{ a: 1 }];\n    ws.add(val);\n\n    expect(ws).to.include(val);\n    expect(ws).to.not.include([{ a: 1 }]);\n    expect(ws).to.not.include({});\n\n    var sym1 = Symbol(),\n      sym2 = Symbol(),\n      sym3 = Symbol();\n    expect([sym1, sym2]).to.include(sym1);\n    expect([sym1, sym2]).to.not.include(sym3);\n  });\n\n  it(\"deep.include()\", () => {\n    var obj1 = { a: 1 },\n      obj2 = { b: 2 };\n    expect([obj1, obj2]).to.deep.include({ a: 1 });\n    expect([obj1, obj2]).to.not.deep.include({ a: 9 });\n    expect([obj1, obj2]).to.not.deep.include({ z: 1 });\n    expect({ foo: obj1, bar: obj2 }).to.deep.include({ foo: { a: 1 } });\n    expect({ foo: obj1, bar: obj2 }).to.deep.include({\n      foo: { a: 1 },\n      bar: { b: 2 },\n    });\n    expect({ foo: obj1, bar: obj2 }).to.not.deep.include({ foo: { a: 9 } });\n    expect({ foo: obj1, bar: obj2 }).to.not.deep.include({ foo: { z: 1 } });\n    expect({ foo: obj1, bar: obj2 }).to.not.deep.include({ baz: { a: 1 } });\n    expect({ foo: obj1, bar: obj2 }).to.not.deep.include({\n      foo: { a: 1 },\n      bar: { b: 9 },\n    });\n\n    var map = new Map();\n    map.set(1, [{ a: 1 }]);\n\n    expect(map).to.deep.include([{ a: 1 }]);\n\n    var set = new Set();\n    set.add([{ a: 1 }]);\n\n    expect(set).to.deep.include([{ a: 1 }]);\n  });\n\n  it(\"nested.include()\", () => {\n    expect({ a: { b: [\"x\", \"y\"] } }).to.nested.include({ \"a.b[1]\": \"y\" });\n    expect({ a: { b: [\"x\", \"y\"] } }).to.not.nested.include({ \"a.b[1]\": \"x\" });\n    expect({ a: { b: [\"x\", \"y\"] } }).to.not.nested.include({ \"a.c\": \"y\" });\n\n    expect({ a: { b: [{ x: 1 }] } }).to.not.nested.include({\n      \"a.b[0]\": { x: 1 },\n    });\n\n    expect({ \".a\": { \"[b]\": \"x\" } }).to.nested.include({ \"\\\\.a.\\\\[b\\\\]\": \"x\" });\n    expect({ \".a\": { \"[b]\": \"x\" } }).to.not.nested.include({\n      \"\\\\.a.\\\\[b\\\\]\": \"y\",\n    });\n  });\n\n  it(\"deep.nested.include()\", () => {\n    expect({ a: { b: [{ x: 1 }] } }).to.deep.nested.include({\n      \"a.b[0]\": { x: 1 },\n    });\n    expect({ a: { b: [{ x: 1 }] } }).to.not.deep.nested.include({\n      \"a.b[0]\": { y: 2 },\n    });\n    expect({ a: { b: [{ x: 1 }] } }).to.not.deep.nested.include({\n      \"a.c\": { x: 1 },\n    });\n\n    expect({ \".a\": { \"[b]\": { x: 1 } } }).to.deep.nested.include({\n      \"\\\\.a.\\\\[b\\\\]\": { x: 1 },\n    });\n    expect({ \".a\": { \"[b]\": { x: 1 } } }).to.not.deep.nested.include({\n      \"\\\\.a.\\\\[b\\\\]\": { y: 2 },\n    });\n  });\n\n  it(\"own.include()\", () => {\n    expect({ a: 1 }).to.own.include({ a: 1 });\n    expect({ a: 1 }).to.not.own.include({ a: 3 });\n    expect({ a: 1 }).to.not.own.include({\n      toString: Object.prototype.toString,\n    });\n\n    expect({ a: { b: 2 } }).to.not.own.include({ a: { b: 2 } });\n  });\n\n  it(\"deep.own.include()\", () => {\n    expect({ a: { b: 2 } }).to.deep.own.include({ a: { b: 2 } });\n    expect({ a: { b: 2 } }).to.not.deep.own.include({ a: { c: 3 } });\n    expect({ a: { b: 2 } }).to.not.deep.own.include({\n      toString: Object.prototype.toString,\n    });\n  });\n\n  it(\"keys(array|Object|arguments)\", () => {\n    expect({ foo: 1 }).to.have.keys([\"foo\"]);\n    expect({ foo: 1 }).have.keys({ foo: 6 });\n    expect({ foo: 1, bar: 2 }).to.have.keys([\"foo\", \"bar\"]);\n    expect({ foo: 1, bar: 2 }).to.have.keys(\"foo\", \"bar\");\n    expect({ foo: 1, bar: 2 }).have.keys({ foo: 6, bar: 7 });\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys(\"foo\", \"bar\");\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys(\"bar\", \"foo\");\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys(\"baz\");\n    expect({ foo: 1, bar: 2 }).contain.keys({ foo: 6 });\n    expect({ foo: 1, bar: 2 }).contain.keys({ bar: 7 });\n    expect({ foo: 1, bar: 2 }).contain.keys({ foo: 6 });\n\n    expect({ foo: 1, bar: 2 }).to.contain.keys(\"foo\");\n    expect({ foo: 1, bar: 2 }).to.contain.keys(\"bar\", \"foo\");\n    expect({ foo: 1, bar: 2 }).to.contain.keys([\"foo\"]);\n    expect({ foo: 1, bar: 2 }).to.contain.keys([\"bar\"]);\n    expect({ foo: 1, bar: 2 }).to.contain.keys([\"bar\", \"foo\"]);\n    expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys([\"bar\", \"foo\"]);\n\n    expect({ foo: 1, bar: 2 }).to.not.have.keys(\"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.have.keys(\"foo\");\n    expect({ foo: 1, bar: 2 }).to.not.have.keys(\"foo\", \"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.contain.keys(\"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.contain.keys(\"foo\", \"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.contain.keys(\"baz\", \"foo\");\n\n    expect({ foo: 1, bar: 2 }).to.have.any.keys(\"foo\", \"baz\");\n    expect({ foo: 1, bar: 2 }).to.have.any.keys(\"foo\");\n    expect({ foo: 1, bar: 2 }).to.contain.any.keys(\"bar\", \"baz\");\n    expect({ foo: 1, bar: 2 }).to.contain.any.keys([\"foo\"]);\n    expect({ foo: 1, bar: 2 }).to.have.all.keys([\"bar\", \"foo\"]);\n    expect({ foo: 1, bar: 2 }).to.contain.all.keys([\"bar\", \"foo\"]);\n    expect({ foo: 1, bar: 2 }).contain.any.keys({ foo: 6 });\n    expect({ foo: 1, bar: 2 }).have.all.keys({ foo: 6, bar: 7 });\n    expect({ foo: 1, bar: 2 }).contain.all.keys({ bar: 7, foo: 6 });\n\n    expect({ foo: 1, bar: 2 }).to.not.have.any.keys(\"baz\", \"abc\", \"def\");\n    expect({ foo: 1, bar: 2 }).to.not.have.any.keys(\"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.contain.any.keys(\"baz\");\n    expect({ foo: 1, bar: 2 }).to.not.have.all.keys([\"baz\", \"foo\"]);\n    expect({ foo: 1, bar: 2 }).to.not.contain.all.keys([\"baz\", \"foo\"]);\n    expect({ foo: 1, bar: 2 }).not.have.all.keys({ baz: 8, foo: 7 });\n    expect({ foo: 1, bar: 2 }).not.contain.all.keys({ baz: 8, foo: 7 });\n\n    var enumProp1 = \"enumProp1\",\n      enumProp2 = \"enumProp2\",\n      nonEnumProp = \"nonEnumProp\",\n      obj = {};\n\n    obj[enumProp1] = \"enumProp1\";\n    obj[enumProp2] = \"enumProp2\";\n\n    Object.defineProperty(obj, nonEnumProp, {\n      enumerable: false,\n      value: \"nonEnumProp\",\n    });\n\n    expect(obj).to.have.all.keys([enumProp1, enumProp2]);\n    expect(obj).to.not.have.all.keys([enumProp1, enumProp2, nonEnumProp]);\n\n    var sym1 = Symbol(\"sym1\"),\n      sym2 = Symbol(\"sym2\"),\n      sym3 = Symbol(\"sym3\"),\n      str = \"str\",\n      obj = {};\n\n    obj[sym1] = \"sym1\";\n    obj[sym2] = \"sym2\";\n    obj[str] = \"str\";\n\n    Object.defineProperty(obj, sym3, {\n      enumerable: false,\n      value: \"sym3\",\n    });\n\n    expect(obj).to.have.all.keys([sym1, sym2, str]);\n    expect(obj).to.not.have.all.keys([sym1, sym2, sym3, str]);\n\n    // Not using Map constructor args because not supported in IE 11.\n    var aKey = { thisIs: \"anExampleObject\" },\n      anotherKey = { doingThisBecauseOf: \"referential equality\" },\n      testMap = new Map();\n\n    testMap.set(aKey, \"aValue\");\n    testMap.set(anotherKey, \"anotherValue\");\n\n    expect(testMap).to.have.any.keys(aKey);\n    expect(testMap).to.have.any.keys(\"thisDoesNotExist\", \"thisToo\", aKey);\n    expect(testMap).to.have.all.keys(aKey, anotherKey);\n\n    expect(testMap).to.contain.all.keys(aKey);\n    expect(testMap).to.not.contain.all.keys(aKey, \"thisDoesNotExist\");\n\n    expect(testMap).to.not.have.any.keys({ iDoNot: \"exist\" });\n    expect(testMap).to.not.have.any.keys(\n      \"thisIsNotAkey\",\n      { iDoNot: \"exist\" },\n      { 33: 20 }\n    );\n    expect(testMap).to.not.have.all.keys(\n      \"thisDoesNotExist\",\n      \"thisToo\",\n      anotherKey\n    );\n\n    expect(testMap).to.have.any.keys([aKey]);\n    expect(testMap).to.have.any.keys([20, 1, aKey]);\n    expect(testMap).to.have.all.keys([aKey, anotherKey]);\n\n    expect(testMap).to.not.have.any.keys([\n      { 13: 37 },\n      \"thisDoesNotExist\",\n      \"thisToo\",\n    ]);\n    expect(testMap).to.not.have.any.keys([20, 1, { 13: 37 }]);\n    expect(testMap).to.not.have.all.keys([aKey, { iDoNot: \"exist\" }]);\n\n    // Using the same assertions as above but with `.deep` flag instead of using referential equality\n    expect(testMap).to.have.any.deep.keys({ thisIs: \"anExampleObject\" });\n    expect(testMap).to.have.any.deep.keys(\"thisDoesNotExist\", \"thisToo\", {\n      thisIs: \"anExampleObject\",\n    });\n\n    expect(testMap).to.contain.all.deep.keys({ thisIs: \"anExampleObject\" });\n    expect(testMap).to.not.contain.all.deep.keys(\n      { thisIs: \"anExampleObject\" },\n      \"thisDoesNotExist\"\n    );\n\n    expect(testMap).to.not.have.any.deep.keys({ iDoNot: \"exist\" });\n    expect(testMap).to.not.have.any.deep.keys(\n      \"thisIsNotAkey\",\n      { iDoNot: \"exist\" },\n      { 33: 20 }\n    );\n    expect(testMap).to.not.have.all.deep.keys(\"thisDoesNotExist\", \"thisToo\", {\n      doingThisBecauseOf: \"referential equality\",\n    });\n\n    expect(testMap).to.have.any.deep.keys([{ thisIs: \"anExampleObject\" }]);\n    expect(testMap).to.have.any.deep.keys([\n      20,\n      1,\n      { thisIs: \"anExampleObject\" },\n    ]);\n\n    expect(testMap).to.have.all.deep.keys(\n      { thisIs: \"anExampleObject\" },\n      { doingThisBecauseOf: \"referential equality\" }\n    );\n\n    expect(testMap).to.not.have.any.deep.keys([\n      { 13: 37 },\n      \"thisDoesNotExist\",\n      \"thisToo\",\n    ]);\n    expect(testMap).to.not.have.any.deep.keys([20, 1, { 13: 37 }]);\n    expect(testMap).to.not.have.all.deep.keys([\n      { thisIs: \"anExampleObject\" },\n      { iDoNot: \"exist\" },\n    ]);\n\n    var weirdMapKey1 = Object.create(null),\n      weirdMapKey2 = { toString: NaN },\n      weirdMapKey3 = [],\n      weirdMap = new Map();\n\n    weirdMap.set(weirdMapKey1, \"val1\");\n    weirdMap.set(weirdMapKey2, \"val2\");\n\n    expect(weirdMap).to.have.all.keys([weirdMapKey1, weirdMapKey2]);\n    expect(weirdMap).to.not.have.all.keys([weirdMapKey1, weirdMapKey3]);\n\n    var symMapKey1 = Symbol(),\n      symMapKey2 = Symbol(),\n      symMapKey3 = Symbol(),\n      symMap = new Map();\n\n    symMap.set(symMapKey1, \"val1\");\n    symMap.set(symMapKey2, \"val2\");\n\n    expect(symMap).to.have.all.keys(symMapKey1, symMapKey2);\n    expect(symMap).to.have.any.keys(symMapKey1, symMapKey3);\n    expect(symMap).to.contain.all.keys(symMapKey2, symMapKey1);\n    expect(symMap).to.contain.any.keys(symMapKey3, symMapKey1);\n\n    expect(symMap).to.not.have.all.keys(symMapKey1, symMapKey3);\n    expect(symMap).to.not.have.any.keys(symMapKey3);\n    expect(symMap).to.not.contain.all.keys(symMapKey3, symMapKey1);\n    expect(symMap).to.not.contain.any.keys(symMapKey3);\n\n    var aKey = { thisIs: \"anExampleObject\" },\n      anotherKey = { doingThisBecauseOf: \"referential equality\" },\n      testSet = new Set();\n\n    testSet.add(aKey);\n    testSet.add(anotherKey);\n\n    expect(testSet).to.have.any.keys(aKey);\n    expect(testSet).to.have.any.keys(\"thisDoesNotExist\", \"thisToo\", aKey);\n    expect(testSet).to.have.all.keys(aKey, anotherKey);\n\n    expect(testSet).to.contain.all.keys(aKey);\n    expect(testSet).to.not.contain.all.keys(aKey, \"thisDoesNotExist\");\n\n    expect(testSet).to.not.have.any.keys({ iDoNot: \"exist\" });\n    expect(testSet).to.not.have.any.keys(\n      \"thisIsNotAkey\",\n      { iDoNot: \"exist\" },\n      { 33: 20 }\n    );\n    expect(testSet).to.not.have.all.keys(\n      \"thisDoesNotExist\",\n      \"thisToo\",\n      anotherKey\n    );\n\n    expect(testSet).to.have.any.keys([aKey]);\n    expect(testSet).to.have.any.keys([20, 1, aKey]);\n    expect(testSet).to.have.all.keys([aKey, anotherKey]);\n\n    expect(testSet).to.not.have.any.keys([\n      { 13: 37 },\n      \"thisDoesNotExist\",\n      \"thisToo\",\n    ]);\n    expect(testSet).to.not.have.any.keys([20, 1, { 13: 37 }]);\n    expect(testSet).to.not.have.all.keys([aKey, { iDoNot: \"exist\" }]);\n\n    // Using the same assertions as above but with `.deep` flag instead of using referential equality\n    expect(testSet).to.have.any.deep.keys({ thisIs: \"anExampleObject\" });\n    expect(testSet).to.have.any.deep.keys(\"thisDoesNotExist\", \"thisToo\", {\n      thisIs: \"anExampleObject\",\n    });\n\n    expect(testSet).to.contain.all.deep.keys({ thisIs: \"anExampleObject\" });\n    expect(testSet).to.not.contain.all.deep.keys(\n      { thisIs: \"anExampleObject\" },\n      \"thisDoesNotExist\"\n    );\n\n    expect(testSet).to.not.have.any.deep.keys({ iDoNot: \"exist\" });\n    expect(testSet).to.not.have.any.deep.keys(\n      \"thisIsNotAkey\",\n      { iDoNot: \"exist\" },\n      { 33: 20 }\n    );\n    expect(testSet).to.not.have.all.deep.keys(\"thisDoesNotExist\", \"thisToo\", {\n      doingThisBecauseOf: \"referential equality\",\n    });\n\n    expect(testSet).to.have.any.deep.keys([{ thisIs: \"anExampleObject\" }]);\n    expect(testSet).to.have.any.deep.keys([\n      20,\n      1,\n      { thisIs: \"anExampleObject\" },\n    ]);\n\n    expect(testSet).to.have.all.deep.keys([\n      { thisIs: \"anExampleObject\" },\n      { doingThisBecauseOf: \"referential equality\" },\n    ]);\n\n    expect(testSet).to.not.have.any.deep.keys([\n      { 13: 37 },\n      \"thisDoesNotExist\",\n      \"thisToo\",\n    ]);\n    expect(testSet).to.not.have.any.deep.keys([20, 1, { 13: 37 }]);\n    expect(testSet).to.not.have.all.deep.keys([\n      { thisIs: \"anExampleObject\" },\n      { iDoNot: \"exist\" },\n    ]);\n\n    var weirdSetKey1 = Object.create(null),\n      weirdSetKey2 = { toString: NaN },\n      weirdSetKey3 = [],\n      weirdSet = new Set();\n\n    weirdSet.add(weirdSetKey1);\n    weirdSet.add(weirdSetKey2);\n\n    expect(weirdSet).to.have.all.keys([weirdSetKey1, weirdSetKey2]);\n    expect(weirdSet).to.not.have.all.keys([weirdSetKey1, weirdSetKey3]);\n\n    var symSetKey1 = Symbol(),\n      symSetKey2 = Symbol(),\n      symSetKey3 = Symbol(),\n      symSet = new Set();\n\n    symSet.add(symSetKey1);\n    symSet.add(symSetKey2);\n\n    expect(symSet).to.have.all.keys(symSetKey1, symSetKey2);\n    expect(symSet).to.have.any.keys(symSetKey1, symSetKey3);\n    expect(symSet).to.contain.all.keys(symSetKey2, symSetKey1);\n    expect(symSet).to.contain.any.keys(symSetKey3, symSetKey1);\n\n    expect(symSet).to.not.have.all.keys(symSetKey1, symSetKey3);\n    expect(symSet).to.not.have.any.keys(symSetKey3);\n    expect(symSet).to.not.contain.all.keys(symSetKey3, symSetKey1);\n    expect(symSet).to.not.contain.any.keys(symSetKey3);\n  });\n\n  it(\"keys(array) will not mutate array (#359)\", () => {\n    var expected = [\"b\", \"a\"];\n    var original_order = [\"b\", \"a\"];\n    var obj = { b: 1, a: 1 };\n    expect(expected).deep.equal(original_order);\n    expect(obj).keys(original_order);\n    expect(expected).deep.equal(original_order);\n  });\n\n  it(\"chaining\", () => {\n    var tea = { name: \"chai\", extras: [\"milk\", \"sugar\", \"smile\"] };\n    expect(tea).to.have.property(\"extras\").with.lengthOf(3);\n\n    expect(tea).to.have.property(\"extras\").which.contains(\"smile\");\n\n    expect(() => {\n      expect(tea).to.have.property(\"extras\").with.lengthOf(4);\n    }).to.throw(\n      AssertionError,\n      \"expected [ 'milk', 'sugar', 'smile' ] to have a length of 4 but got 3\"\n    );\n\n    expect(tea).to.be.a(\"object\").and.have.property(\"name\", \"chai\");\n\n    var badFn = function () {\n      throw new Error(\"testing\");\n    };\n\n    expect(badFn).to.throw(Error).with.property(\"message\", \"testing\");\n  });\n\n  it(\"throw\", function () {\n    // See GH-45: some poorly-constructed custom errors don't have useful names\n    // on either their constructor or their constructor prototype, but instead\n    // only set the name inside the constructor itself.\n    var PoorlyConstructedError = function () {\n      this.name = \"PoorlyConstructedError\";\n    };\n    PoorlyConstructedError.prototype = Object.create(Error.prototype);\n\n    function CustomError(message) {\n      this.name = \"CustomError\";\n      this.message = message;\n    }\n    CustomError.prototype = Error.prototype;\n\n    var specificError = new RangeError(\"boo\");\n\n    var goodFn = function () {\n        1 == 1;\n      },\n      badFn = function () {\n        throw new Error(\"testing\");\n      },\n      refErrFn = function () {\n        throw new ReferenceError(\"hello\");\n      },\n      ickyErrFn = function () {\n        throw new PoorlyConstructedError();\n      },\n      specificErrFn = function () {\n        throw specificError;\n      },\n      customErrFn = function () {\n        throw new CustomError(\"foo\");\n      },\n      emptyErrFn = function () {\n        throw new Error();\n      },\n      emptyStringErrFn = function () {\n        throw new Error(\"\");\n      };\n\n    expect(goodFn).to.not.throw();\n    expect(goodFn).to.not.throw(Error);\n    expect(goodFn).to.not.throw(specificError);\n    expect(badFn).to.throw();\n    expect(badFn).to.throw(Error);\n    expect(badFn).to.not.throw(ReferenceError);\n    expect(badFn).to.not.throw(specificError);\n    expect(refErrFn).to.throw();\n    expect(refErrFn).to.throw(ReferenceError);\n    expect(refErrFn).to.throw(Error);\n    expect(refErrFn).to.not.throw(TypeError);\n    expect(refErrFn).to.not.throw(specificError);\n    expect(ickyErrFn).to.throw();\n    expect(ickyErrFn).to.throw(PoorlyConstructedError);\n    expect(ickyErrFn).to.throw(Error);\n    expect(ickyErrFn).to.not.throw(specificError);\n    expect(specificErrFn).to.throw(specificError);\n\n    expect(goodFn).to.not.throw(\"testing\");\n    expect(goodFn).to.not.throw(/testing/);\n    expect(badFn).to.throw(/testing/);\n    expect(badFn).to.not.throw(/hello/);\n    expect(badFn).to.throw(\"testing\");\n    expect(badFn).to.not.throw(\"hello\");\n    expect(emptyStringErrFn).to.throw(\"\");\n    expect(emptyStringErrFn).to.not.throw(\"testing\");\n    expect(badFn).to.throw(\"\");\n\n    expect(badFn).to.throw(Error, /testing/);\n    expect(badFn).to.throw(Error, \"testing\");\n    expect(emptyErrFn).to.not.throw(Error, \"testing\");\n\n    expect(badFn).to.not.throw(Error, \"I am the wrong error message\");\n    expect(badFn).to.not.throw(TypeError, \"testing\");\n\n    expect(() => {\n      expect(goodFn, \"blah\").to.throw();\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( goodFn)*\\] to throw an error$/\n    );\n\n    expect(() => {\n      expect(goodFn, \"blah\").to.throw(ReferenceError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( goodFn)*\\] to throw ReferenceError$/\n    );\n\n    expect(() => {\n      expect(goodFn, \"blah\").to.throw(specificError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( goodFn)*\\] to throw 'RangeError: boo'$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.not.throw();\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to not throw an error but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(ReferenceError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw 'ReferenceError' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(specificError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw 'RangeError: boo' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.not.throw(Error);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to not throw 'Error' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(refErrFn, \"blah\").to.not.throw(ReferenceError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( refErrFn)*\\] to not throw 'ReferenceError' but 'ReferenceError: hello' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(PoorlyConstructedError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw 'PoorlyConstructedError' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(ickyErrFn, \"blah\").to.not.throw(PoorlyConstructedError);\n    }).to.throw(\n      AssertionError,\n      /^blah: (expected \\[Function( ickyErrFn)*\\] to not throw 'PoorlyConstructedError' but)(.*)(PoorlyConstructedError|\\{ Object \\()(.*)(was thrown)$/\n    );\n\n    expect(() => {\n      expect(ickyErrFn, \"blah\").to.throw(ReferenceError);\n    }).to.throw(\n      AssertionError,\n      /^blah: (expected \\[Function( ickyErrFn)*\\] to throw 'ReferenceError' but)(.*)(PoorlyConstructedError|\\{ Object \\()(.*)(was thrown)$/\n    );\n\n    expect(() => {\n      expect(specificErrFn, \"blah\").to.throw(new ReferenceError(\"eek\"));\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( specificErrFn)*\\] to throw 'ReferenceError: eek' but 'RangeError: boo' was thrown$/\n    );\n\n    expect(() => {\n      expect(specificErrFn, \"blah\").to.not.throw(specificError);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( specificErrFn)*\\] to not throw 'RangeError: boo'$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.not.throw(/testing/);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error not matching \\/testing\\/$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(/hello/);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error matching \\/hello\\/ but got 'testing'$/\n    );\n\n    expect(() => {\n      expect(badFn).to.throw(Error, /hello/, \"blah\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error matching \\/hello\\/ but got 'testing'$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(Error, /hello/);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error matching \\/hello\\/ but got 'testing'$/\n    );\n\n    expect(() => {\n      expect(badFn).to.throw(Error, \"hello\", \"blah\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error including 'hello' but got 'testing'$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.throw(Error, \"hello\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to throw error including 'hello' but got 'testing'$/\n    );\n\n    expect(() => {\n      expect(customErrFn, \"blah\").to.not.throw();\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( customErrFn)*\\] to not throw an error but 'CustomError: foo' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn).to.not.throw(Error, \"testing\", \"blah\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to not throw 'Error' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(badFn, \"blah\").to.not.throw(Error, \"testing\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( badFn)*\\] to not throw 'Error' but 'Error: testing' was thrown$/\n    );\n\n    expect(() => {\n      expect(emptyStringErrFn).to.not.throw(Error, \"\", \"blah\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( emptyStringErrFn)*\\] to not throw 'Error' but 'Error' was thrown$/\n    );\n\n    expect(() => {\n      expect(emptyStringErrFn, \"blah\").to.not.throw(Error, \"\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( emptyStringErrFn)*\\] to not throw 'Error' but 'Error' was thrown$/\n    );\n\n    expect(() => {\n      expect(emptyStringErrFn, \"blah\").to.not.throw(\"\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected \\[Function( emptyStringErrFn)*\\] to throw error not including ''$/\n    );\n\n    expect(() => {\n      expect({}, \"blah\").to.throw();\n    }).to.throw(AssertionError, \"blah: expected {} to be a function\");\n\n    expect(() => {\n      expect({}).to.throw(Error, \"testing\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} to be a function\");\n  });\n\n  it(\"respondTo\", () => {\n    function Foo() {}\n    Foo.prototype.bar = function () {};\n    Foo.func = function () {};\n\n    var bar = {};\n    bar.foo = function () {};\n\n    expect(Foo).to.respondTo(\"bar\");\n    expect(Foo).to.not.respondTo(\"foo\");\n    expect(Foo).itself.to.respondTo(\"func\");\n    expect(Foo).itself.not.to.respondTo(\"bar\");\n\n    expect(bar).to.respondTo(\"foo\");\n\n    expect(() => {\n      expect(Foo).to.respondTo(\"baz\", \"constructor\");\n    }).to.throw(\n      AssertionError,\n      /^(constructor: expected)(.*)(\\[Function Foo\\])(.*)(to respond to \\'baz\\')$/\n    );\n\n    expect(() => {\n      expect(Foo, \"constructor\").to.respondTo(\"baz\");\n    }).to.throw(\n      AssertionError,\n      /^(constructor: expected)(.*)(\\[Function Foo\\])(.*)(to respond to \\'baz\\')$/\n    );\n\n    expect(() => {\n      expect(bar).to.respondTo(\"baz\", \"object\");\n    }).to.throw(\n      AssertionError,\n      /^(object: expected)(.*)(\\{ foo: \\[Function\\] \\}|\\{ Object \\()(.*)(to respond to \\'baz\\')$/\n    );\n\n    expect(() => {\n      expect(bar, \"object\").to.respondTo(\"baz\");\n    }).to.throw(\n      AssertionError,\n      /^(object: expected)(.*)(\\{ foo: \\[Function\\] \\}|\\{ Object \\()(.*)(to respond to \\'baz\\')$/\n    );\n  });\n\n  it(\"satisfy\", () => {\n    var matcher = function (num) {\n      return num === 1;\n    };\n\n    expect(1).to.satisfy(matcher);\n\n    expect(() => {\n      expect(2).to.satisfy(matcher, \"blah\");\n    }).to.throw(\n      AssertionError,\n      /^blah: expected 2 to satisfy \\[Function( matcher)*\\]$/\n    );\n\n    expect(() => {\n      expect(2, \"blah\").to.satisfy(matcher);\n    }).to.throw(\n      AssertionError,\n      /^blah: expected 2 to satisfy \\[Function( matcher)*\\]$/\n    );\n  });\n\n  it(\"closeTo\", () => {\n    expect(1.5).to.be.closeTo(1.0, 0.5);\n    expect(10).to.be.closeTo(20, 20);\n    expect(-10).to.be.closeTo(20, 30);\n  });\n\n  it(\"approximately\", () => {\n    expect(1.5).to.be.approximately(1.0, 0.5);\n    expect(10).to.be.approximately(20, 20);\n    expect(-10).to.be.approximately(20, 30);\n  });\n\n  it(\"oneOf\", () => {\n    expect(1).to.be.oneOf([1, 2, 3]);\n    expect(\"1\").to.not.be.oneOf([1, 2, 3]);\n    expect([3, [4]]).to.not.be.oneOf([1, 2, [3, 4]]);\n    var threeFour = [3, [4]];\n    expect(threeFour).to.be.oneOf([1, 2, threeFour]);\n  });\n\n  it(\"include.members\", () => {\n    expect([1, 2, 3]).to.include.members([]);\n    expect([1, 2, 3]).to.include.members([3, 2]);\n    expect([1, 2, 3]).to.include.members([3, 2, 2]);\n    expect([1, 2, 3]).to.not.include.members([8, 4]);\n    expect([1, 2, 3]).to.not.include.members([1, 2, 3, 4]);\n    expect([{ a: 1 }]).to.not.include.members([{ a: 1 }]);\n\n    expect(() => {\n      expect([1, 2, 3]).to.include.members([2, 5], \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to be a superset of [ 2, 5 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3], \"blah\").to.include.members([2, 5]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to be a superset of [ 2, 5 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).to.not.include.members([2, 1]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ 1, 2, 3 ] to not be a superset of [ 2, 1 ]\"\n    );\n  });\n\n  it(\"same.members\", () => {\n    expect([5, 4]).to.have.same.members([4, 5]);\n    expect([5, 4]).to.have.same.members([5, 4]);\n    expect([5, 4, 4]).to.have.same.members([5, 4, 4]);\n    expect([5, 4]).to.not.have.same.members([]);\n    expect([5, 4]).to.not.have.same.members([6, 3]);\n    expect([5, 4]).to.not.have.same.members([5, 4, 2]);\n    expect([5, 4]).to.not.have.same.members([5, 4, 4]);\n    expect([5, 4, 4]).to.not.have.same.members([5, 4]);\n    expect([5, 4, 4]).to.not.have.same.members([5, 4, 3]);\n    expect([5, 4, 3]).to.not.have.same.members([5, 4, 4]);\n  });\n\n  it(\"members\", () => {\n    expect([5, 4]).members([4, 5]);\n    expect([5, 4]).members([5, 4]);\n    expect([5, 4, 4]).members([5, 4, 4]);\n    expect([5, 4]).not.members([]);\n    expect([5, 4]).not.members([6, 3]);\n    expect([5, 4]).not.members([5, 4, 2]);\n    expect([5, 4]).not.members([5, 4, 4]);\n    expect([5, 4, 4]).not.members([5, 4]);\n    expect([5, 4, 4]).not.members([5, 4, 3]);\n    expect([5, 4, 3]).not.members([5, 4, 4]);\n    expect([{ id: 1 }]).not.members([{ id: 1 }]);\n\n    expect(() => {\n      expect([1, 2, 3]).members([2, 1, 5], \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have the same members as [ 2, 1, 5 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3], \"blah\").members([2, 1, 5]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have the same members as [ 2, 1, 5 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).not.members([2, 1, 3]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ 1, 2, 3 ] to not have the same members as [ 2, 1, 3 ]\"\n    );\n\n    expect(() => {\n      expect({}).members([], \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} to be an iterable\");\n\n    expect(() => {\n      expect({}, \"blah\").members([]);\n    }).to.throw(AssertionError, \"blah: expected {} to be an iterable\");\n\n    expect(() => {\n      expect([]).members({}, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} to be an iterable\");\n\n    expect(() => {\n      expect([], \"blah\").members({});\n    }).to.throw(AssertionError, \"blah: expected {} to be an iterable\");\n  });\n\n  it(\"deep.members\", () => {\n    expect([{ id: 1 }]).deep.members([{ id: 1 }]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).deep.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n\n    expect([{ id: 2 }]).not.deep.members([{ id: 1 }]);\n    expect([{ a: 1 }, { b: 2 }]).not.deep.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).not.deep.members([\n      { a: 1 },\n      { b: 2 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).not.deep.members([\n      { a: 1 },\n      { b: 2 },\n      { c: 3 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.deep.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n\n    expect(() => {\n      expect([{ id: 1 }]).deep.members([{ id: 2 }], \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { id: 1 } ] to have the same members as [ { id: 2 } ]\"\n    );\n\n    expect(() => {\n      expect([{ id: 1 }], \"blah\").deep.members([{ id: 2 }]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { id: 1 } ] to have the same members as [ { id: 2 } ]\"\n    );\n  });\n\n  it(\"include.deep.members\", () => {\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).include.deep.members([\n      { b: 2 },\n      { a: 1 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).include.deep.members([\n      { b: 2 },\n      { a: 1 },\n      { a: 1 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.include.deep.members([\n      { b: 2 },\n      { a: 1 },\n      { f: 5 },\n    ]);\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }]).include.deep.members(\n        [{ b: 2 }, { a: 1 }, { f: 5 }],\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to be a superset of [ { b: 2 }, { a: 1 }, { f: 5 } ]\"\n    );\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }], \"blah\").include.deep.members([\n        { b: 2 },\n        { a: 1 },\n        { f: 5 },\n      ]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to be a superset of [ { b: 2 }, { a: 1 }, { f: 5 } ]\"\n    );\n  });\n\n  it(\"ordered.members\", () => {\n    expect([1, 2, 3]).ordered.members([1, 2, 3]);\n    expect([1, 2, 2]).ordered.members([1, 2, 2]);\n\n    expect([1, 2, 3]).not.ordered.members([2, 1, 3]);\n    expect([1, 2, 3]).not.ordered.members([1, 2]);\n    expect([1, 2]).not.ordered.members([1, 2, 2]);\n    expect([1, 2, 2]).not.ordered.members([1, 2]);\n    expect([1, 2, 2]).not.ordered.members([1, 2, 3]);\n    expect([1, 2, 3]).not.ordered.members([1, 2, 2]);\n\n    expect(() => {\n      expect([1, 2, 3]).ordered.members([2, 1, 3], \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have the same ordered members as [ 2, 1, 3 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3], \"blah\").ordered.members([2, 1, 3]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to have the same ordered members as [ 2, 1, 3 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).not.ordered.members([1, 2, 3]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ 1, 2, 3 ] to not have the same ordered members as [ 1, 2, 3 ]\"\n    );\n  });\n\n  it(\"include.ordered.members\", () => {\n    expect([1, 2, 3]).include.ordered.members([1, 2]);\n    expect([1, 2, 3]).not.include.ordered.members([2, 1]);\n    expect([1, 2, 3]).not.include.ordered.members([2, 3]);\n    expect([1, 2, 3]).not.include.ordered.members([1, 2, 2]);\n\n    expect(() => {\n      expect([1, 2, 3]).include.ordered.members([2, 1], \"blah\");\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to be an ordered superset of [ 2, 1 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3], \"blah\").include.ordered.members([2, 1]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ 1, 2, 3 ] to be an ordered superset of [ 2, 1 ]\"\n    );\n\n    expect(() => {\n      expect([1, 2, 3]).not.include.ordered.members([1, 2]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ 1, 2, 3 ] to not be an ordered superset of [ 1, 2 ]\"\n    );\n  });\n\n  it(\"deep.ordered.members\", () => {\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { c: 3 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.deep.ordered.members([\n      { b: 2 },\n      { a: 1 },\n      { c: 3 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }]).not.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).not.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { b: 2 }]).not.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { c: 3 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }]).deep.ordered.members(\n        [{ b: 2 }, { a: 1 }, { c: 3 }],\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to have the same ordered members as [ { b: 2 }, { a: 1 }, { c: 3 } ]\"\n    );\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }], \"blah\").deep.ordered.members([\n        { b: 2 },\n        { a: 1 },\n        { c: 3 },\n      ]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to have the same ordered members as [ { b: 2 }, { a: 1 }, { c: 3 } ]\"\n    );\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.deep.ordered.members([\n        { a: 1 },\n        { b: 2 },\n        { c: 3 },\n      ]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to not have the same ordered members as [ { a: 1 }, { b: 2 }, { c: 3 } ]\"\n    );\n  });\n\n  it(\"include.deep.ordered.members\", () => {\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).include.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.include.deep.ordered.members([\n      { b: 2 },\n      { a: 1 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.include.deep.ordered.members([\n      { b: 2 },\n      { c: 3 },\n    ]);\n    expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.include.deep.ordered.members([\n      { a: 1 },\n      { b: 2 },\n      { b: 2 },\n    ]);\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }]).include.deep.ordered.members(\n        [{ b: 2 }, { a: 1 }],\n        \"blah\"\n      );\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to be an ordered superset of [ { b: 2 }, { a: 1 } ]\"\n    );\n\n    expect(() => {\n      expect(\n        [{ a: 1 }, { b: 2 }, { c: 3 }],\n        \"blah\"\n      ).include.deep.ordered.members([{ b: 2 }, { a: 1 }]);\n    }).to.throw(\n      AssertionError,\n      \"blah: expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to be an ordered superset of [ { b: 2 }, { a: 1 } ]\"\n    );\n\n    expect(() => {\n      expect([{ a: 1 }, { b: 2 }, { c: 3 }]).not.include.deep.ordered.members([\n        { a: 1 },\n        { b: 2 },\n      ]);\n    }).to.throw(\n      AssertionError,\n      \"expected [ { a: 1 }, { b: 2 }, { c: 3 } ] to not be an ordered superset of [ { a: 1 }, { b: 2 } ]\"\n    );\n  });\n\n  it(\"change\", () => {\n    const obj = { value: 10, str: \"foo\" };\n    const heroes = [\"spiderman\", \"superman\"];\n    const fn = () => (obj.value += 5);\n    const decFn = () => (obj.value -= 20);\n    const sameFn = () => \"foo\" + \"bar\";\n    const bangFn = () => (obj.str += \"!\");\n    const batFn = () => heroes.push(\"batman\");\n    const lenFn = () => heroes.length;\n\n    expect(fn).to.change(obj, \"value\");\n    expect(fn).to.change(obj, \"value\").by(5);\n    expect(fn).to.change(obj, \"value\").by(-5);\n\n    expect(decFn).to.change(obj, \"value\").by(20);\n    expect(decFn).to.change(obj, \"value\").but.not.by(21);\n\n    expect(sameFn).to.not.change(obj, \"value\");\n\n    expect(sameFn).to.not.change(obj, \"str\");\n    expect(bangFn).to.change(obj, \"str\");\n\n    expect(batFn).to.change(lenFn).by(1);\n    expect(batFn).to.change(lenFn).but.not.by(2);\n\n    expect(() => {\n      expect(sameFn).to.change(obj, \"value\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected .value to change\");\n\n    expect(() => {\n      expect(sameFn, \"blah\").to.change(obj, \"value\");\n    }).to.throw(AssertionError, \"blah: expected .value to change\");\n\n    expect(() => {\n      expect(fn).to.not.change(obj, \"value\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected .value to not change\");\n\n    expect(() => {\n      expect({}).to.change(obj, \"value\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} to be a function\");\n\n    expect(() => {\n      expect({}, \"blah\").to.change(obj, \"value\");\n    }).to.throw(AssertionError, \"blah: expected {} to be a function\");\n\n    expect(() => {\n      expect(fn).to.change({}, \"badprop\", \"blah\");\n    }).to.throw(AssertionError, \"blah: expected {} to have property 'badprop'\");\n\n    expect(() => {\n      expect(fn, \"blah\").to.change({}, \"badprop\");\n    }).to.throw(AssertionError, \"blah: expected {} to have property 'badprop'\");\n\n    expect(() => {\n      expect(fn, \"blah\").to.change({});\n    }).to.throw(AssertionError, \"blah: expected {} to be a function\");\n\n    expect(() => {\n      expect(fn).to.change(obj, \"value\").by(10, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected .value to change by 10\");\n\n    expect(() => {\n      expect(fn, \"blah\").to.change(obj, \"value\").by(10);\n    }).to.throw(AssertionError, \"blah: expected .value to change by 10\");\n\n    expect(() => {\n      expect(fn).to.change(obj, \"value\").but.not.by(5, \"blah\");\n    }).to.throw(AssertionError, \"blah: expected .value to not change by 5\");\n  });\n\n  it(\"increase, decrease\", () => {\n    var obj = { value: 10, noop: null },\n      arr = [\"one\", \"two\"],\n      pFn = function () {\n        arr.push(\"three\");\n      },\n      popFn = function () {\n        arr.pop();\n      },\n      nFn = function () {\n        return null;\n      },\n      lenFn = function () {\n        return arr.length;\n      },\n      incFn = function () {\n        obj.value += 2;\n      },\n      decFn = function () {\n        obj.value -= 3;\n      },\n      smFn = function () {\n        obj.value += 0;\n      };\n\n    expect(smFn).to.not.increase(obj, \"value\");\n    expect(decFn).to.not.increase(obj, \"value\");\n    expect(incFn).to.increase(obj, \"value\");\n    expect(incFn).to.increase(obj, \"value\").by(2);\n    expect(incFn).to.increase(obj, \"value\").but.not.by(1);\n\n    expect(smFn).to.not.decrease(obj, \"value\");\n    expect(incFn).to.not.decrease(obj, \"value\");\n    expect(decFn).to.decrease(obj, \"value\");\n    expect(decFn).to.decrease(obj, \"value\").by(3);\n    expect(decFn).to.decrease(obj, \"value\").but.not.by(2);\n\n    expect(popFn).to.not.increase(lenFn);\n    expect(nFn).to.not.increase(lenFn);\n    expect(pFn).to.increase(lenFn);\n    expect(pFn).to.increase(lenFn).by(1);\n    expect(pFn).to.increase(lenFn).but.not.by(2);\n\n    expect(popFn).to.decrease(lenFn);\n    expect(popFn).to.decrease(lenFn).by(1);\n    expect(popFn).to.decrease(lenFn).but.not.by(2);\n    expect(nFn).to.not.decrease(lenFn);\n    expect(pFn).to.not.decrease(lenFn);\n  });\n\n  it(\"extensible\", function () {\n    const nonExtensibleObject = Object.preventExtensions({});\n\n    expect({}).to.be.extensible;\n    expect(nonExtensibleObject).to.not.be.extensible;\n\n    expect(() => {\n      expect(nonExtensibleObject, \"blah\").to.be.extensible;\n    }).to.throw(AssertionError, \"blah: expected {} to be extensible\");\n\n    expect(() => {\n      expect({}).to.not.be.extensible;\n    }).to.throw(AssertionError, \"expected {} to not be extensible\");\n\n    expect(42).to.not.be.extensible;\n    expect(null).to.not.be.extensible;\n    expect(\"foo\").to.not.be.extensible;\n    expect(false).to.not.be.extensible;\n    expect(undefined).to.not.be.extensible;\n    expect(sym).to.not.be.extensible;\n\n    expect(() => {\n      expect(42).to.be.extensible;\n    }).to.throw(AssertionError, \"expected 42 to be extensible\");\n\n    expect(() => {\n      expect(null).to.be.extensible;\n    }).to.throw(AssertionError, \"expected null to be extensible\");\n\n    expect(() => {\n      expect(\"foo\").to.be.extensible;\n    }).to.throw(AssertionError, \"expected 'foo' to be extensible\");\n\n    expect(() => {\n      expect(false).to.be.extensible;\n    }).to.throw(AssertionError, \"expected false to be extensible\");\n\n    expect(() => {\n      expect(undefined).to.be.extensible;\n    }).to.throw(AssertionError, \"expected undefined to be extensible\");\n\n    const proxy = new Proxy(\n      {},\n      {\n        isExtensible() {\n          throw new TypeError();\n        },\n      }\n    );\n\n    expect(() => {\n      expect(proxy).to.be.extensible;\n    }).to.throw(TypeError);\n  });\n\n  it(\"sealed\", function () {\n    const sealedObject = Object.seal({});\n\n    expect(sealedObject).to.be.sealed;\n    expect({}).to.not.be.sealed;\n\n    expect(() => {\n      expect({}).to.be.sealed;\n    }).to.throw(AssertionError, \"expected {} to be sealed\");\n\n    expect(() => {\n      expect(sealedObject).to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected {} to not be sealed\");\n\n    expect(42).to.be.sealed;\n    expect(null).to.be.sealed;\n    expect(\"foo\").to.be.sealed;\n    expect(false).to.be.sealed;\n    expect(undefined).to.be.sealed;\n    expect(sym).to.be.sealed;\n\n    expect(() => {\n      expect(42).to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected 42 to not be sealed\");\n\n    expect(() => {\n      expect(null).to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected null to not be sealed\");\n\n    expect(() => {\n      expect(\"foo\").to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected 'foo' to not be sealed\");\n\n    expect(() => {\n      expect(false).to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected false to not be sealed\");\n\n    expect(() => {\n      expect(undefined).to.not.be.sealed;\n    }).to.throw(AssertionError, \"expected undefined to not be sealed\");\n\n    const proxy = new Proxy(\n      {},\n      {\n        ownKeys() {\n          throw new TypeError();\n        },\n      }\n    );\n\n    Object.preventExtensions(proxy);\n\n    expect(() => {\n      expect(proxy).to.be.sealed;\n    }).to.throw(TypeError);\n  });\n\n  it(\"frozen\", function () {\n    const frozenObject = Object.freeze({});\n\n    expect(frozenObject).to.be.frozen;\n    expect({}).to.not.be.frozen;\n\n    expect(() => {\n      expect({}).to.be.frozen;\n    }).to.throw(AssertionError, \"expected {} to be frozen\");\n\n    expect(() => {\n      expect(frozenObject).to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected {} to not be frozen\");\n\n    expect(42).to.be.frozen;\n    expect(null).to.be.frozen;\n    expect(\"foo\").to.be.frozen;\n    expect(false).to.be.frozen;\n    expect(undefined).to.be.frozen;\n    expect(sym).to.be.frozen;\n\n    expect(() => {\n      expect(42).to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected 42 to not be frozen\");\n\n    expect(() => {\n      expect(null).to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected null to not be frozen\");\n\n    expect(() => {\n      expect(\"foo\").to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected 'foo' to not be frozen\");\n\n    expect(() => {\n      expect(false).to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected false to not be frozen\");\n\n    expect(() => {\n      expect(undefined).to.not.be.frozen;\n    }).to.throw(AssertionError, \"expected undefined to not be frozen\");\n\n    const proxy = new Proxy(\n      {},\n      {\n        ownKeys() {\n          throw new TypeError();\n        },\n      }\n    );\n\n    Object.preventExtensions(proxy);\n\n    expect(() => {\n      expect(proxy).to.be.frozen;\n    }).to.throw(TypeError);\n  });\n});\n\nfunction runTest(fileData) {\n  tests.forEach((test) => test.func());\n}\n\n\n//# sourceURL=webpack://WTBenchmark/./src/chai.mjs?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/chai.mjs");
/******/ 	self.WTBenchmark = __webpack_exports__;
/******/ 	
/******/ })()
;